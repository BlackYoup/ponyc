{
    "docs": [
        {
            "location": "/", 
            "text": "Packages\n\n\n\n\npackages/stdlib\n\n\nassert\n\n\nbuiltin\n\n\nbuiltin_test\n\n\nbureaucracy\n\n\ncapsicum\n\n\ncollections\n\n\ndebug\n\n\nencode/base64\n\n\nfiles\n\n\nglob\n\n\nini\n\n\njson\n\n\nmath\n\n\nnet\n\n\nnet/http\n\n\nnet/ssl\n\n\noptions\n\n\nponytest\n\n\npromises\n\n\nrandom\n\n\nregex\n\n\nsignals\n\n\nstrings\n\n\nterm\n\n\ntime", 
            "title": "stdlib"
        }, 
        {
            "location": "/packages-stdlib--index/", 
            "text": "Pony Standard Library\n\n\nThis package represents the test suite for the Pony standard library.\n\n\nFor every new package, please add a Main actor and tests to the package in a\nfile called 'test.pony'. Then add a corresponding use directive and a line to\nthe main actor constructor of this package to invoke those tests.\n\n\nAll tests can be run by compiling and running packages/stdlib.\n\n\nEntities\n\n\n\n\nactor Main", 
            "title": "Package"
        }, 
        {
            "location": "/packages-stdlib--index/#pony-standard-library", 
            "text": "This package represents the test suite for the Pony standard library.  For every new package, please add a Main actor and tests to the package in a\nfile called 'test.pony'. Then add a corresponding use directive and a line to\nthe main actor constructor of this package to invoke those tests.  All tests can be run by compiling and running packages/stdlib.", 
            "title": "Pony Standard Library"
        }, 
        {
            "location": "/packages-stdlib--index/#entities", 
            "text": "actor Main", 
            "title": "Entities"
        }, 
        {
            "location": "/packages-stdlib-Main/", 
            "text": "actor packages/stdlib/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/packages-stdlib-Main/#actor-packagesstdlibmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor packages/stdlib/Main is TestList ref"
        }, 
        {
            "location": "/packages-stdlib-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/packages-stdlib-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/packages-stdlib-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/packages-stdlib-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/packages-stdlib-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/assert--index/", 
            "text": "Assert package\n\n\nContains runtime assertions. If you are looking for assertion that only run\nwhen your code was compiled with the \ndebug\n flag, check out \nAssert\n. For\nassertions that are always enabled, check out \nFact\n.\n\n\nEntities\n\n\n\n\nprimitive Assert\n\n\nprimitive Fact", 
            "title": "Package"
        }, 
        {
            "location": "/assert--index/#assert-package", 
            "text": "Contains runtime assertions. If you are looking for assertion that only run\nwhen your code was compiled with the  debug  flag, check out  Assert . For\nassertions that are always enabled, check out  Fact .", 
            "title": "Assert package"
        }, 
        {
            "location": "/assert--index/#entities", 
            "text": "primitive Assert  primitive Fact", 
            "title": "Entities"
        }, 
        {
            "location": "/assert-Assert/", 
            "text": "primitive assert/Assert\n\n\nDefault capability\n: \nval\n\n\nThis is a debug only assertion. If the test is false, it will print any\nsupplied error message to stderr and raise an error.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(test: \nBool\n val, optional msg: \nString\n val): \nNone\n val ?\n\n\nfun box  \neq\n(that: \nAssert\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nAssert\n val): \nBool\n val", 
            "title": "primitive Assert"
        }, 
        {
            "location": "/assert-Assert/#primitive-assertassert", 
            "text": "Default capability :  val  This is a debug only assertion. If the test is false, it will print any\nsupplied error message to stderr and raise an error.", 
            "title": "primitive assert/Assert"
        }, 
        {
            "location": "/assert-Assert/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/assert-Assert/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/assert-Assert/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/assert-Assert/#fun-box-applytest-bool-val-optional-msg-string-val-none-val", 
            "text": "", 
            "title": "fun box  apply(test: Bool val, optional msg: String val): None val ?"
        }, 
        {
            "location": "/assert-Assert/#fun-box-eqthat-assert-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Assert val): Bool val"
        }, 
        {
            "location": "/assert-Assert/#fun-box-nethat-assert-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Assert val): Bool val"
        }, 
        {
            "location": "/assert-Fact/", 
            "text": "primitive assert/Fact\n\n\nDefault capability\n: \nval\n\n\nThis is an assertion that is always enabled. If the test is false, it will\nprint any supplied error message to stderr and raise an error.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(test: \nBool\n val, optional msg: \nString\n val): \nNone\n val ?\n\n\nfun box  \neq\n(that: \nFact\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFact\n val): \nBool\n val", 
            "title": "primitive Fact"
        }, 
        {
            "location": "/assert-Fact/#primitive-assertfact", 
            "text": "Default capability :  val  This is an assertion that is always enabled. If the test is false, it will\nprint any supplied error message to stderr and raise an error.", 
            "title": "primitive assert/Fact"
        }, 
        {
            "location": "/assert-Fact/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/assert-Fact/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/assert-Fact/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/assert-Fact/#fun-box-applytest-bool-val-optional-msg-string-val-none-val", 
            "text": "", 
            "title": "fun box  apply(test: Bool val, optional msg: String val): None val ?"
        }, 
        {
            "location": "/assert-Fact/#fun-box-eqthat-fact-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Fact val): Bool val"
        }, 
        {
            "location": "/assert-Fact/#fun-box-nethat-fact-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Fact val): Bool val"
        }, 
        {
            "location": "/builtin--index/", 
            "text": "Builtin package\n\n\nThe builtin package is home to standard library members that require compiler\nsupport. For details on specific packages, see their individual entity entries.\n\n\nEntities\n\n\n\n\ntype Align\n\n\nprimitive AlignCenter\n\n\nprimitive AlignLeft\n\n\nprimitive AlignRight\n\n\nprimitive AmbientAuth\n\n\ninterface Any\n\n\ntrait _ArithmeticConvertible\n\n\nclass Array\n\n\nclass ArrayKeys\n\n\nclass ArrayPairs\n\n\nclass ArrayValues\n\n\nprimitive AsioEvent\n\n\ntype AsioEventID\n\n\ninterface AsioEventNotify\n\n\nprimitive Bool\n\n\ntype ByteSeq\n\n\ninterface ByteSeqIter\n\n\ninterface Comparable\n\n\ntype Compare\n\n\ninterface Creatable\n\n\ninterface DisposableActor\n\n\nclass Env\n\n\nprimitive Equal\n\n\ninterface Equatable\n\n\nprimitive F32\n\n\nprimitive F64\n\n\ntype Float\n\n\ntrait FloatingPoint\n\n\nprimitive FormatBinary\n\n\nprimitive FormatBinaryBare\n\n\nprimitive FormatDefault\n\n\nprimitive FormatDefaultNumber\n\n\nprimitive FormatExp\n\n\nprimitive FormatExpLarge\n\n\nprimitive FormatFix\n\n\nprimitive FormatFixLarge\n\n\ntype FormatFloat\n\n\nprimitive FormatGeneral\n\n\nprimitive FormatGeneralLarge\n\n\nprimitive FormatHex\n\n\nprimitive FormatHexBare\n\n\nprimitive FormatHexSmall\n\n\nprimitive FormatHexSmallBare\n\n\ntype FormatInt\n\n\nprimitive FormatOctal\n\n\nprimitive FormatOctalBare\n\n\ninterface FormatSettings\n\n\nprimitive FormatSettingsDefault\n\n\ntype FormatSettingsFloat\n\n\nclass FormatSettingsHolder\n\n\ntype FormatSettingsInt\n\n\ntrait FormatSpec\n\n\nprimitive FormatUTF32\n\n\nprimitive Greater\n\n\ninterface HasEq\n\n\nprimitive I128\n\n\nprimitive I16\n\n\nprimitive I32\n\n\nprimitive I64\n\n\nprimitive I8\n\n\nprimitive ILong\n\n\nprimitive ISize\n\n\ntrait Integer\n\n\ninterface Iterator\n\n\nprimitive Less\n\n\nstruct MaybePointer\n\n\nprimitive None\n\n\ntype Number\n\n\ninterface OutStream\n\n\nprimitive Platform\n\n\nstruct Pointer\n\n\nprimitive PrefixDefault\n\n\ntype PrefixNumber\n\n\nprimitive PrefixSign\n\n\nprimitive PrefixSpace\n\n\ntrait PrefixSpec\n\n\ninterface ReadElement\n\n\ninterface ReadSeq\n\n\ntrait Real\n\n\ninterface Seq\n\n\ntype Signed\n\n\ntrait _SignedInteger\n\n\ninterface SourceLoc\n\n\nactor StdStream\n\n\nactor Stdin\n\n\ninterface StdinNotify\n\n\nclass String\n\n\nclass StringBytes\n\n\nclass StringRunes\n\n\ninterface Stringable\n\n\nprimitive _ToString\n\n\nprimitive U128\n\n\nprimitive U16\n\n\nprimitive U32\n\n\nprimitive U64\n\n\nprimitive U8\n\n\nprimitive ULong\n\n\nprimitive USize\n\n\ntype Unsigned\n\n\ntrait _UnsignedInteger", 
            "title": "Package"
        }, 
        {
            "location": "/builtin--index/#builtin-package", 
            "text": "The builtin package is home to standard library members that require compiler\nsupport. For details on specific packages, see their individual entity entries.", 
            "title": "Builtin package"
        }, 
        {
            "location": "/builtin--index/#entities", 
            "text": "type Align  primitive AlignCenter  primitive AlignLeft  primitive AlignRight  primitive AmbientAuth  interface Any  trait _ArithmeticConvertible  class Array  class ArrayKeys  class ArrayPairs  class ArrayValues  primitive AsioEvent  type AsioEventID  interface AsioEventNotify  primitive Bool  type ByteSeq  interface ByteSeqIter  interface Comparable  type Compare  interface Creatable  interface DisposableActor  class Env  primitive Equal  interface Equatable  primitive F32  primitive F64  type Float  trait FloatingPoint  primitive FormatBinary  primitive FormatBinaryBare  primitive FormatDefault  primitive FormatDefaultNumber  primitive FormatExp  primitive FormatExpLarge  primitive FormatFix  primitive FormatFixLarge  type FormatFloat  primitive FormatGeneral  primitive FormatGeneralLarge  primitive FormatHex  primitive FormatHexBare  primitive FormatHexSmall  primitive FormatHexSmallBare  type FormatInt  primitive FormatOctal  primitive FormatOctalBare  interface FormatSettings  primitive FormatSettingsDefault  type FormatSettingsFloat  class FormatSettingsHolder  type FormatSettingsInt  trait FormatSpec  primitive FormatUTF32  primitive Greater  interface HasEq  primitive I128  primitive I16  primitive I32  primitive I64  primitive I8  primitive ILong  primitive ISize  trait Integer  interface Iterator  primitive Less  struct MaybePointer  primitive None  type Number  interface OutStream  primitive Platform  struct Pointer  primitive PrefixDefault  type PrefixNumber  primitive PrefixSign  primitive PrefixSpace  trait PrefixSpec  interface ReadElement  interface ReadSeq  trait Real  interface Seq  type Signed  trait _SignedInteger  interface SourceLoc  actor StdStream  actor Stdin  interface StdinNotify  class String  class StringBytes  class StringRunes  interface Stringable  primitive _ToString  primitive U128  primitive U16  primitive U32  primitive U64  primitive U8  primitive ULong  primitive USize  type Unsigned  trait _UnsignedInteger", 
            "title": "Entities"
        }, 
        {
            "location": "/builtin-Align/", 
            "text": "type builtin/Align is ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nNo doc string provided.", 
            "title": "type Align"
        }, 
        {
            "location": "/builtin-Align/#type-builtinalign-is-alignleft-val-alignright-val-aligncenter-val", 
            "text": "No doc string provided.", 
            "title": "type builtin/Align is ((AlignLeft val | AlignRight val) | AlignCenter val)"
        }, 
        {
            "location": "/builtin-AlignCenter/", 
            "text": "primitive builtin/AlignCenter\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nAlignCenter\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nAlignCenter\n val): \nBool\n val", 
            "title": "primitive AlignCenter"
        }, 
        {
            "location": "/builtin-AlignCenter/#primitive-builtinaligncenter", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/AlignCenter"
        }, 
        {
            "location": "/builtin-AlignCenter/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-AlignCenter/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-AlignCenter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-AlignCenter/#fun-box-eqthat-aligncenter-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: AlignCenter val): Bool val"
        }, 
        {
            "location": "/builtin-AlignCenter/#fun-box-nethat-aligncenter-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: AlignCenter val): Bool val"
        }, 
        {
            "location": "/builtin-AlignLeft/", 
            "text": "primitive builtin/AlignLeft\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nAlignLeft\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nAlignLeft\n val): \nBool\n val", 
            "title": "primitive AlignLeft"
        }, 
        {
            "location": "/builtin-AlignLeft/#primitive-builtinalignleft", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/AlignLeft"
        }, 
        {
            "location": "/builtin-AlignLeft/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-AlignLeft/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-AlignLeft/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-AlignLeft/#fun-box-eqthat-alignleft-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: AlignLeft val): Bool val"
        }, 
        {
            "location": "/builtin-AlignLeft/#fun-box-nethat-alignleft-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: AlignLeft val): Bool val"
        }, 
        {
            "location": "/builtin-AlignRight/", 
            "text": "primitive builtin/AlignRight\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nAlignRight\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nAlignRight\n val): \nBool\n val", 
            "title": "primitive AlignRight"
        }, 
        {
            "location": "/builtin-AlignRight/#primitive-builtinalignright", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/AlignRight"
        }, 
        {
            "location": "/builtin-AlignRight/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-AlignRight/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-AlignRight/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-AlignRight/#fun-box-eqthat-alignright-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: AlignRight val): Bool val"
        }, 
        {
            "location": "/builtin-AlignRight/#fun-box-nethat-alignright-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: AlignRight val): Bool val"
        }, 
        {
            "location": "/builtin-AmbientAuth/", 
            "text": "primitive builtin/AmbientAuth\n\n\nDefault capability\n: \nval\n\n\nThis type represents the root capability. When a Pony program starts, the\nEnv passed to the Main actor contains an instance of the root capability.\n\n\nAmbient access to the root capability is denied outside of the builtin\npackage. Inside the builtin package, only Env creates a Root.\n\n\nThe root capability can be used by any package that wants to establish a\nprinciple of least authority. A typical usage is to have a parameter on a\nconstructor for some resource that expects a limiting capability specific to\nthe package, but will also accept the root capability as representing\nunlimited access.\n\n\nConstructors\n\n\nnew \n_create\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nAmbientAuth\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nAmbientAuth\n val): \nBool\n val", 
            "title": "primitive AmbientAuth"
        }, 
        {
            "location": "/builtin-AmbientAuth/#primitive-builtinambientauth", 
            "text": "Default capability :  val  This type represents the root capability. When a Pony program starts, the\nEnv passed to the Main actor contains an instance of the root capability.  Ambient access to the root capability is denied outside of the builtin\npackage. Inside the builtin package, only Env creates a Root.  The root capability can be used by any package that wants to establish a\nprinciple of least authority. A typical usage is to have a parameter on a\nconstructor for some resource that expects a limiting capability specific to\nthe package, but will also accept the root capability as representing\nunlimited access.", 
            "title": "primitive builtin/AmbientAuth"
        }, 
        {
            "location": "/builtin-AmbientAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-AmbientAuth/#new-_create", 
            "text": "", 
            "title": "new _create()"
        }, 
        {
            "location": "/builtin-AmbientAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-AmbientAuth/#fun-box-eqthat-ambientauth-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: AmbientAuth val): Bool val"
        }, 
        {
            "location": "/builtin-AmbientAuth/#fun-box-nethat-ambientauth-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: AmbientAuth val): Bool val"
        }, 
        {
            "location": "/builtin-Any/", 
            "text": "interface builtin/Any\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.", 
            "title": "interface Any"
        }, 
        {
            "location": "/builtin-Any/#interface-builtinany", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "interface builtin/Any"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/", 
            "text": "trait builtin/_ArithmeticConvertible\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nPublic Functions\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "trait _ArithmeticConvertible"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#trait-builtin_arithmeticconvertible", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "trait builtin/_ArithmeticConvertible"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-Array/", 
            "text": "class builtin/Array[A: A] is \nSeq\n[A] ref\n\n\nDefault capability\n: \nref\n\n\nContiguous, resizable memory to store elements of type A.\n\n\nConstructors\n\n\nnew \ncreate\n(optional len: \nUSize\n val)\n\n\nCreate an array with zero elements, but space for len elements.\n\n\nnew \nfrom_cstring\n(ptr: \nPointer\n[A] ref, len: \nUSize\n val, optional alloc: \nUSize\n val)\n\n\nCreate an array from a C-style pointer and length. The contents are not\ncopied.\n\n\nnew \ninit\n(from: A^, len: \nUSize\n val)\n\n\nCreate an array of len elements, all initialised to the given value.\n\n\nnew \nundefined\n[optional B: ((A \n \nReal\n[B val] val) \n ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)))](len: \nUSize\n val)\n\n\nCreate an array of len elements, populating them with random memory. This\nis only allowed for an array of numbers.\n\n\nPublic Functions\n\n\nfun ref  \nappend\n(seq: (\nReadSeq\n[A] box \n \nReadElement\n[A^] box), optional offset: \nUSize\n val, optional len: \nUSize\n val): \nArray\n[A] ref^\n\n\nAppend the elements from a sequence, starting from the given offset.\nThe array is returned to allow call chaining.\n\n\nfun box  \napply\n(i: \nUSize\n val): this-\nA ?\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun ref  \nclear\n(): \nArray\n[A] ref^\n\n\nRemove all elements from the array.\nThe array is returned to allow call chaining.\n\n\nfun box  \nclone\n(): \nArray\n[this-\nA!] ref^\n\n\nClone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.\n\n\nfun ref  \nconcat\n(iter: \nIterator\n[A^] ref, optional offset: \nUSize\n val, optional len: \nUSize\n val): \nArray\n[A] ref^\n\n\nAdd len iterated elements to the end of the array, starting from the given\noffset. The array is returned to allow call chaining.\n\n\nfun box  \ncopy_to\n(dst: \nArray\n[this-\nA!] ref, src_idx: \nUSize\n val, dst_idx: \nUSize\n val, len: \nUSize\n val): this-\nArray\n[A] ref^\n\n\nCopy len elements from this(src_idx) to dst(dst_idx).\nThe array is returned to allow call chaining.\n\n\nfun box  \ncstring\n(): \nPointer\n[A] tag\n\n\nReturn the underlying C-style pointer.\n\n\nfun ref  \ndelete\n(i: \nUSize\n val): A^ ?\n\n\nDelete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.\n\n\nfun box  \nfind\n(value: A!, optional offset: \nUSize\n val, optional nth: \nUSize\n val): \nUSize\n val ?\n\n\nFind the n-th appearance of value in the array, by identity. Return the\nindex, or raise an error if value isn't present.\n\n\nfun ref  \ninsert\n(i: \nUSize\n val, value: A): \nArray\n[A] ref^ ?\n\n\nInsert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.\nThe array is returned to allow call chaining.\n\n\nfun box  \nkeys\n(): \nArrayKeys\n[A, this-\nArray\n[A] ref] ref^\n\n\nReturn an iterator over the indices in the array.\n\n\nfun box  \npairs\n(): \nArrayPairs\n[A, this-\nArray\n[A] ref] ref^\n\n\nReturn an iterator over the (index, value) pairs in the array.\n\n\nfun box  \npermute\n(indices: \nIterator\n[\nUSize\n val] ref): \nArray\n[this-\nA!] ref^ ?\n\n\nCreate a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun ref  \npop\n(): A^ ?\n\n\nRemove an element from the end of the array.\nThe removed element is returned.\n\n\nfun ref  \npush\n(value: A): \nArray\n[A] ref^\n\n\nAdd an element to the end of the array.\nThe array is returned to allow call chaining.\n\n\nfun ref  \nremove\n(i: \nUSize\n val, n: \nUSize\n val): \nArray\n[A] ref^\n\n\nRemove n elements from the array, beginning at index i.\nThe array is returned to allow call chaining.\n\n\nfun ref  \nreserve\n(len: \nUSize\n val): \nArray\n[A] ref^\n\n\nReserve space for len elements, including whatever elements are already in\nthe array.\n\n\nfun box  \nreverse\n(): \nArray\n[this-\nA!] ref^\n\n\nCreate a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun ref  \nreverse_in_place\n(): \nArray\n[A] ref^\n\n\nReverse the array in place.\n\n\nfun box  \nrfind\n(value: A!, optional offset: \nUSize\n val, optional nth: \nUSize\n val): \nUSize\n val ?\n\n\nAs find, but search backwards in the array.\n\n\nfun ref  \nshift\n(): A^ ?\n\n\nRemove an element from the beginning of the array.\nThe removed element is returned.\n\n\nfun box  \nsize\n(): \nUSize\n val\n\n\nThe number of elements in the array.\n\n\nfun box  \nslice\n(optional from: \nUSize\n val, optional to: \nUSize\n val, optional step: \nUSize\n val): \nArray\n[this-\nA!] ref^\n\n\nCreate a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.\n\n\nfun box  \nspace\n(): \nUSize\n val\n\n\nThe available space in the array.\n\n\nfun ref  \ntruncate\n(len: \nUSize\n val): \nArray\n[A] ref^\n\n\nTruncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.\nThe array is returned to allow call chaining.\n\n\nfun ref  \nunshift\n(value: A): \nArray\n[A] ref^\n\n\nAdd an element to the beginning of the array.\nThe array is returned to allow call chaining.\n\n\nfun ref  \nupdate\n(i: \nUSize\n val, value: A): A^ ?\n\n\nChange the i-th element, raising an error if the index is out of bounds.\n\n\nfun box  \nvalues\n(): \nArrayValues\n[A, this-\nArray\n[A] ref] ref^\n\n\nReturn an iterator over the values in the array.\n\n\nPrivate Functions\n\n\nfun box  \n_cstring\n(): \nPointer\n[A] box\n\n\nInternal cstring.", 
            "title": "class Array"
        }, 
        {
            "location": "/builtin-Array/#class-builtinarray91a-a93-is-seq91a93-ref", 
            "text": "Default capability :  ref  Contiguous, resizable memory to store elements of type A.", 
            "title": "class builtin/Array[A: A] is Seq[A] ref"
        }, 
        {
            "location": "/builtin-Array/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Array/#new-createoptional-len-usize-val", 
            "text": "Create an array with zero elements, but space for len elements.", 
            "title": "new create(optional len: USize val)"
        }, 
        {
            "location": "/builtin-Array/#new-from_cstringptr-pointer91a93-ref-len-usize-val-optional-alloc-usize-val", 
            "text": "Create an array from a C-style pointer and length. The contents are not\ncopied.", 
            "title": "new from_cstring(ptr: Pointer[A] ref, len: USize val, optional alloc: USize val)"
        }, 
        {
            "location": "/builtin-Array/#new-initfrom-a-len-usize-val", 
            "text": "Create an array of len elements, all initialised to the given value.", 
            "title": "new init(from: A^, len: USize val)"
        }, 
        {
            "location": "/builtin-Array/#new-undefined91optional-b-a-real91b-val93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93len-usize-val", 
            "text": "Create an array of len elements, populating them with random memory. This\nis only allowed for an array of numbers.", 
            "title": "new undefined[optional B: ((A &amp; Real[B val] val) &amp; ((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)))](len: USize val)"
        }, 
        {
            "location": "/builtin-Array/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-appendseq-readseq91a93-box-readelement91a93-box-optional-offset-usize-val-optional-len-usize-val-array91a93-ref", 
            "text": "Append the elements from a sequence, starting from the given offset.\nThe array is returned to allow call chaining.", 
            "title": "fun ref  append(seq: (ReadSeq[A] box &amp; ReadElement[A^] box), optional offset: USize val, optional len: USize val): Array[A] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-box-applyi-usize-val-this-a", 
            "text": "Get the i-th element, raising an error if the index is out of bounds.", 
            "title": "fun box  apply(i: USize val): this-&gt;A ?"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-clear-array91a93-ref", 
            "text": "Remove all elements from the array.\nThe array is returned to allow call chaining.", 
            "title": "fun ref  clear(): Array[A] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-box-clone-array91this-a93-ref", 
            "text": "Clone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.", 
            "title": "fun box  clone(): Array[this-&gt;A!] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-concatiter-iterator91a93-ref-optional-offset-usize-val-optional-len-usize-val-array91a93-ref", 
            "text": "Add len iterated elements to the end of the array, starting from the given\noffset. The array is returned to allow call chaining.", 
            "title": "fun ref  concat(iter: Iterator[A^] ref, optional offset: USize val, optional len: USize val): Array[A] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-box-copy_todst-array91this-a93-ref-src_idx-usize-val-dst_idx-usize-val-len-usize-val-this-array91a93-ref", 
            "text": "Copy len elements from this(src_idx) to dst(dst_idx).\nThe array is returned to allow call chaining.", 
            "title": "fun box  copy_to(dst: Array[this-&gt;A!] ref, src_idx: USize val, dst_idx: USize val, len: USize val): this-&gt;Array[A] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-box-cstring-pointer91a93-tag", 
            "text": "Return the underlying C-style pointer.", 
            "title": "fun box  cstring(): Pointer[A] tag"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-deletei-usize-val-a", 
            "text": "Delete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.", 
            "title": "fun ref  delete(i: USize val): A^ ?"
        }, 
        {
            "location": "/builtin-Array/#fun-box-findvalue-a-optional-offset-usize-val-optional-nth-usize-val-usize-val", 
            "text": "Find the n-th appearance of value in the array, by identity. Return the\nindex, or raise an error if value isn't present.", 
            "title": "fun box  find(value: A!, optional offset: USize val, optional nth: USize val): USize val ?"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-inserti-usize-val-value-a-array91a93-ref", 
            "text": "Insert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.\nThe array is returned to allow call chaining.", 
            "title": "fun ref  insert(i: USize val, value: A): Array[A] ref^ ?"
        }, 
        {
            "location": "/builtin-Array/#fun-box-keys-arraykeys91a-this-array91a93-ref93-ref", 
            "text": "Return an iterator over the indices in the array.", 
            "title": "fun box  keys(): ArrayKeys[A, this-&gt;Array[A] ref] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-box-pairs-arraypairs91a-this-array91a93-ref93-ref", 
            "text": "Return an iterator over the (index, value) pairs in the array.", 
            "title": "fun box  pairs(): ArrayPairs[A, this-&gt;Array[A] ref] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-box-permuteindices-iterator91usize-val93-ref-array91this-a93-ref", 
            "text": "Create a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.", 
            "title": "fun box  permute(indices: Iterator[USize val] ref): Array[this-&gt;A!] ref^ ?"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-pop-a", 
            "text": "Remove an element from the end of the array.\nThe removed element is returned.", 
            "title": "fun ref  pop(): A^ ?"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-pushvalue-a-array91a93-ref", 
            "text": "Add an element to the end of the array.\nThe array is returned to allow call chaining.", 
            "title": "fun ref  push(value: A): Array[A] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-removei-usize-val-n-usize-val-array91a93-ref", 
            "text": "Remove n elements from the array, beginning at index i.\nThe array is returned to allow call chaining.", 
            "title": "fun ref  remove(i: USize val, n: USize val): Array[A] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-reservelen-usize-val-array91a93-ref", 
            "text": "Reserve space for len elements, including whatever elements are already in\nthe array.", 
            "title": "fun ref  reserve(len: USize val): Array[A] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-box-reverse-array91this-a93-ref", 
            "text": "Create a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.", 
            "title": "fun box  reverse(): Array[this-&gt;A!] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-reverse_in_place-array91a93-ref", 
            "text": "Reverse the array in place.", 
            "title": "fun ref  reverse_in_place(): Array[A] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-box-rfindvalue-a-optional-offset-usize-val-optional-nth-usize-val-usize-val", 
            "text": "As find, but search backwards in the array.", 
            "title": "fun box  rfind(value: A!, optional offset: USize val, optional nth: USize val): USize val ?"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-shift-a", 
            "text": "Remove an element from the beginning of the array.\nThe removed element is returned.", 
            "title": "fun ref  shift(): A^ ?"
        }, 
        {
            "location": "/builtin-Array/#fun-box-size-usize-val", 
            "text": "The number of elements in the array.", 
            "title": "fun box  size(): USize val"
        }, 
        {
            "location": "/builtin-Array/#fun-box-sliceoptional-from-usize-val-optional-to-usize-val-optional-step-usize-val-array91this-a93-ref", 
            "text": "Create a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.", 
            "title": "fun box  slice(optional from: USize val, optional to: USize val, optional step: USize val): Array[this-&gt;A!] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-box-space-usize-val", 
            "text": "The available space in the array.", 
            "title": "fun box  space(): USize val"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-truncatelen-usize-val-array91a93-ref", 
            "text": "Truncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.\nThe array is returned to allow call chaining.", 
            "title": "fun ref  truncate(len: USize val): Array[A] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-unshiftvalue-a-array91a93-ref", 
            "text": "Add an element to the beginning of the array.\nThe array is returned to allow call chaining.", 
            "title": "fun ref  unshift(value: A): Array[A] ref^"
        }, 
        {
            "location": "/builtin-Array/#fun-ref-updatei-usize-val-value-a-a", 
            "text": "Change the i-th element, raising an error if the index is out of bounds.", 
            "title": "fun ref  update(i: USize val, value: A): A^ ?"
        }, 
        {
            "location": "/builtin-Array/#fun-box-values-arrayvalues91a-this-array91a93-ref93-ref", 
            "text": "Return an iterator over the values in the array.", 
            "title": "fun box  values(): ArrayValues[A, this-&gt;Array[A] ref] ref^"
        }, 
        {
            "location": "/builtin-Array/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-Array/#fun-box-_cstring-pointer91a93-box", 
            "text": "Internal cstring.", 
            "title": "fun box  _cstring(): Pointer[A] box"
        }, 
        {
            "location": "/builtin-ArrayKeys/", 
            "text": "class builtin/ArrayKeys[A: A, B: \nArray\n[A] #read] is \nIterator\n[\nUSize\n val] ref\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(array: B #read)\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nfun ref  \nnext\n(): \nUSize\n val", 
            "title": "class ArrayKeys"
        }, 
        {
            "location": "/builtin-ArrayKeys/#class-builtinarraykeys91a-a-b-array91a93-read93-is-iterator91usize-val93-ref", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class builtin/ArrayKeys[A: A, B: Array[A] #read] is Iterator[USize val] ref"
        }, 
        {
            "location": "/builtin-ArrayKeys/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ArrayKeys/#new-createarray-b-read", 
            "text": "", 
            "title": "new create(array: B #read)"
        }, 
        {
            "location": "/builtin-ArrayKeys/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ArrayKeys/#fun-box-has_next-bool-val", 
            "text": "", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/builtin-ArrayKeys/#fun-ref-next-usize-val", 
            "text": "", 
            "title": "fun ref  next(): USize val"
        }, 
        {
            "location": "/builtin-ArrayPairs/", 
            "text": "class builtin/ArrayPairs[A: A, B: \nArray\n[A] #read] is \nIterator\n[(\nUSize\n val , B #read-\nA)] ref\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(array: B #read)\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nfun ref  \nnext\n(): (\nUSize\n val , B #read-\nA) ?", 
            "title": "class ArrayPairs"
        }, 
        {
            "location": "/builtin-ArrayPairs/#class-builtinarraypairs91a-a-b-array91a93-read93-is-iterator91usize-val-b-read-a93-ref", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class builtin/ArrayPairs[A: A, B: Array[A] #read] is Iterator[(USize val , B #read-&gt;A)] ref"
        }, 
        {
            "location": "/builtin-ArrayPairs/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ArrayPairs/#new-createarray-b-read", 
            "text": "", 
            "title": "new create(array: B #read)"
        }, 
        {
            "location": "/builtin-ArrayPairs/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ArrayPairs/#fun-box-has_next-bool-val", 
            "text": "", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/builtin-ArrayPairs/#fun-ref-next-usize-val-b-read-a", 
            "text": "", 
            "title": "fun ref  next(): (USize val , B #read-&gt;A) ?"
        }, 
        {
            "location": "/builtin-ArrayValues/", 
            "text": "class builtin/ArrayValues[A: A, B: \nArray\n[A] #read] is \nIterator\n[B #read-\nA] ref\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(array: B #read)\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nfun ref  \nnext\n(): B #read-\nA ?", 
            "title": "class ArrayValues"
        }, 
        {
            "location": "/builtin-ArrayValues/#class-builtinarrayvalues91a-a-b-array91a93-read93-is-iterator91b-read-a93-ref", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class builtin/ArrayValues[A: A, B: Array[A] #read] is Iterator[B #read-&gt;A] ref"
        }, 
        {
            "location": "/builtin-ArrayValues/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ArrayValues/#new-createarray-b-read", 
            "text": "", 
            "title": "new create(array: B #read)"
        }, 
        {
            "location": "/builtin-ArrayValues/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ArrayValues/#fun-box-has_next-bool-val", 
            "text": "", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/builtin-ArrayValues/#fun-ref-next-b-read-a", 
            "text": "", 
            "title": "fun ref  next(): B #read-&gt;A ?"
        }, 
        {
            "location": "/builtin-AsioEvent/", 
            "text": "primitive builtin/AsioEvent\n\n\nDefault capability\n: \nval\n\n\nFunctions for asynchronous event notification.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \ndisposable\n(flags: \nU32\n val): \nBool\n val\n\n\nReturns true if the event should be disposed of.\n\n\nfun box  \ndispose\n(): \nU32\n val\n\n\nfun box  \neq\n(that: \nAsioEvent\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nAsioEvent\n val): \nBool\n val\n\n\nfun box  \nnone\n(): \nPointer\n[\nAsioEvent\n val] tag\n\n\nAn empty event.\n\n\nfun box  \nread\n(): \nU32\n val\n\n\nfun box  \nread_write\n(): \nU32\n val\n\n\nfun box  \nreadable\n(flags: \nU32\n val): \nBool\n val\n\n\nReturns true if the flags contain the readable flag.\n\n\nfun box  \nsignal\n(): \nU32\n val\n\n\nfun box  \ntimer\n(): \nU32\n val\n\n\nfun box  \nwrite\n(): \nU32\n val\n\n\nfun box  \nwriteable\n(flags: \nU32\n val): \nBool\n val\n\n\nReturns true if the flags contain the writeable flag.", 
            "title": "primitive AsioEvent"
        }, 
        {
            "location": "/builtin-AsioEvent/#primitive-builtinasioevent", 
            "text": "Default capability :  val  Functions for asynchronous event notification.", 
            "title": "primitive builtin/AsioEvent"
        }, 
        {
            "location": "/builtin-AsioEvent/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-AsioEvent/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-AsioEvent/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-disposableflags-u32-val-bool-val", 
            "text": "Returns true if the event should be disposed of.", 
            "title": "fun box  disposable(flags: U32 val): Bool val"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-dispose-u32-val", 
            "text": "", 
            "title": "fun box  dispose(): U32 val"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-eqthat-asioevent-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: AsioEvent val): Bool val"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-nethat-asioevent-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: AsioEvent val): Bool val"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-none-pointer91asioevent-val93-tag", 
            "text": "An empty event.", 
            "title": "fun box  none(): Pointer[AsioEvent val] tag"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-read-u32-val", 
            "text": "", 
            "title": "fun box  read(): U32 val"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-read_write-u32-val", 
            "text": "", 
            "title": "fun box  read_write(): U32 val"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-readableflags-u32-val-bool-val", 
            "text": "Returns true if the flags contain the readable flag.", 
            "title": "fun box  readable(flags: U32 val): Bool val"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-signal-u32-val", 
            "text": "", 
            "title": "fun box  signal(): U32 val"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-timer-u32-val", 
            "text": "", 
            "title": "fun box  timer(): U32 val"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-write-u32-val", 
            "text": "", 
            "title": "fun box  write(): U32 val"
        }, 
        {
            "location": "/builtin-AsioEvent/#fun-box-writeableflags-u32-val-bool-val", 
            "text": "Returns true if the flags contain the writeable flag.", 
            "title": "fun box  writeable(flags: U32 val): Bool val"
        }, 
        {
            "location": "/builtin-AsioEventID/", 
            "text": "type builtin/AsioEventID is \nPointer\n[\nAsioEvent\n val] tag\n\n\nNo doc string provided.", 
            "title": "type AsioEventID"
        }, 
        {
            "location": "/builtin-AsioEventID/#type-builtinasioeventid-is-pointer91asioevent-val93-tag", 
            "text": "No doc string provided.", 
            "title": "type builtin/AsioEventID is Pointer[AsioEvent val] tag"
        }, 
        {
            "location": "/builtin-AsioEventNotify/", 
            "text": "interface builtin/AsioEventNotify\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nPrivate Behaviours\n\n\nbe \nevent\nnotify\n(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)", 
            "title": "interface AsioEventNotify"
        }, 
        {
            "location": "/builtin-AsioEventNotify/#interface-builtinasioeventnotify", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "interface builtin/AsioEventNotify"
        }, 
        {
            "location": "/builtin-AsioEventNotify/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/builtin-AsioEventNotify/#be-eventnotifyevent-pointer91asioevent-val93-tag-flags-u32-val-arg-u32-val", 
            "text": "", 
            "title": "be eventnotify(event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)"
        }, 
        {
            "location": "/builtin-Bool/", 
            "text": "primitive builtin/Bool is \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(from: \nBool\n val)\n\n\nPublic Functions\n\n\nfun box  \neq\n(y: \nBool\n val): \nBool\n val\n\n\nfun box  \nne\n(y: \nBool\n val): \nBool\n val\n\n\nfun box  \nop_and\n(y: \nBool\n val): \nBool\n val\n\n\nfun box  \nop_not\n(): \nBool\n val\n\n\nfun box  \nop_or\n(y: \nBool\n val): \nBool\n val\n\n\nfun box  \nop_xor\n(y: \nBool\n val): \nBool\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^", 
            "title": "primitive Bool"
        }, 
        {
            "location": "/builtin-Bool/#primitive-builtinbool-is-stringable91formatdefault-val-prefixdefault-val93-box", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/Bool is Stringable[FormatDefault val, PrefixDefault val] box"
        }, 
        {
            "location": "/builtin-Bool/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Bool/#new-createfrom-bool-val", 
            "text": "", 
            "title": "new create(from: Bool val)"
        }, 
        {
            "location": "/builtin-Bool/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Bool/#fun-box-eqy-bool-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: Bool val): Bool val"
        }, 
        {
            "location": "/builtin-Bool/#fun-box-ney-bool-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: Bool val): Bool val"
        }, 
        {
            "location": "/builtin-Bool/#fun-box-op_andy-bool-val-bool-val", 
            "text": "", 
            "title": "fun box  op_and(y: Bool val): Bool val"
        }, 
        {
            "location": "/builtin-Bool/#fun-box-op_not-bool-val", 
            "text": "", 
            "title": "fun box  op_not(): Bool val"
        }, 
        {
            "location": "/builtin-Bool/#fun-box-op_ory-bool-val-bool-val", 
            "text": "", 
            "title": "fun box  op_or(y: Bool val): Bool val"
        }, 
        {
            "location": "/builtin-Bool/#fun-box-op_xory-bool-val-bool-val", 
            "text": "", 
            "title": "fun box  op_xor(y: Bool val): Bool val"
        }, 
        {
            "location": "/builtin-Bool/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-prefixdefault-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[FormatDefault val, PrefixDefault val] box): String iso^"
        }, 
        {
            "location": "/builtin-ByteSeq/", 
            "text": "type builtin/ByteSeq is (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\nNo doc string provided.", 
            "title": "type ByteSeq"
        }, 
        {
            "location": "/builtin-ByteSeq/#type-builtinbyteseq-is-string-val-array91u8-val93-val", 
            "text": "No doc string provided.", 
            "title": "type builtin/ByteSeq is (String val | Array[U8 val] val)"
        }, 
        {
            "location": "/builtin-ByteSeqIter/", 
            "text": "interface builtin/ByteSeqIter\n\n\nDefault capability\n: \nval\n\n\nAccept an iterable collection of String or Array[U8] val.\n\n\nPublic Functions\n\n\nfun box  \nvalues\n(): \nIterator\n[(this-\nString\n box | this-\nArray\n[\nU8\n val] box)] ref", 
            "title": "interface ByteSeqIter"
        }, 
        {
            "location": "/builtin-ByteSeqIter/#interface-builtinbyteseqiter", 
            "text": "Default capability :  val  Accept an iterable collection of String or Array[U8] val.", 
            "title": "interface builtin/ByteSeqIter"
        }, 
        {
            "location": "/builtin-ByteSeqIter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ByteSeqIter/#fun-box-values-iterator91this-string-box-this-array91u8-val93-box93-ref", 
            "text": "", 
            "title": "fun box  values(): Iterator[(this-&gt;String box | this-&gt;Array[U8 val] box)] ref"
        }, 
        {
            "location": "/builtin-Comparable/", 
            "text": "interface builtin/Comparable[A: \nComparable\n[A #read] #read] is \nEquatable\n[A #read] ref\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nPublic Functions\n\n\nfun box  \ncompare\n(that: box-\nA #read): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \neq\n(that: box-\nA #read): \nBool\n val\n\n\nfun box  \nge\n(that: box-\nA #read): \nBool\n val\n\n\nfun box  \ngt\n(that: box-\nA #read): \nBool\n val\n\n\nfun box  \nle\n(that: box-\nA #read): \nBool\n val\n\n\nfun box  \nlt\n(that: box-\nA #read): \nBool\n val\n\n\nfun box  \nne\n(that: box-\nA #read): \nBool\n val", 
            "title": "interface Comparable"
        }, 
        {
            "location": "/builtin-Comparable/#interface-builtincomparable91a-comparable91a-read93-read93-is-equatable91a-read93-ref", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "interface builtin/Comparable[A: Comparable[A #read] #read] is Equatable[A #read] ref"
        }, 
        {
            "location": "/builtin-Comparable/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Comparable/#fun-box-comparethat-box-a-read-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: box-&gt;A #read): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-Comparable/#fun-box-eqthat-box-a-read-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: box-&gt;A #read): Bool val"
        }, 
        {
            "location": "/builtin-Comparable/#fun-box-gethat-box-a-read-bool-val", 
            "text": "", 
            "title": "fun box  ge(that: box-&gt;A #read): Bool val"
        }, 
        {
            "location": "/builtin-Comparable/#fun-box-gtthat-box-a-read-bool-val", 
            "text": "", 
            "title": "fun box  gt(that: box-&gt;A #read): Bool val"
        }, 
        {
            "location": "/builtin-Comparable/#fun-box-lethat-box-a-read-bool-val", 
            "text": "", 
            "title": "fun box  le(that: box-&gt;A #read): Bool val"
        }, 
        {
            "location": "/builtin-Comparable/#fun-box-ltthat-box-a-read-bool-val", 
            "text": "", 
            "title": "fun box  lt(that: box-&gt;A #read): Bool val"
        }, 
        {
            "location": "/builtin-Comparable/#fun-box-nethat-box-a-read-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: box-&gt;A #read): Bool val"
        }, 
        {
            "location": "/builtin-Compare/", 
            "text": "type builtin/Compare is ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nNo doc string provided.", 
            "title": "type Compare"
        }, 
        {
            "location": "/builtin-Compare/#type-builtincompare-is-less-val-equal-val-greater-val", 
            "text": "No doc string provided.", 
            "title": "type builtin/Compare is ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-Creatable/", 
            "text": "interface builtin/Creatable\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()", 
            "title": "interface Creatable"
        }, 
        {
            "location": "/builtin-Creatable/#interface-builtincreatable", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "interface builtin/Creatable"
        }, 
        {
            "location": "/builtin-Creatable/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Creatable/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-DisposableActor/", 
            "text": "interface builtin/DisposableActor\n\n\nDefault capability\n: \ntag\n\n\nAn interface used to asynchronously dispose of an actor.\n\n\nPublic Behaviours\n\n\nbe \ndispose\n()", 
            "title": "interface DisposableActor"
        }, 
        {
            "location": "/builtin-DisposableActor/#interface-builtindisposableactor", 
            "text": "Default capability :  tag  An interface used to asynchronously dispose of an actor.", 
            "title": "interface builtin/DisposableActor"
        }, 
        {
            "location": "/builtin-DisposableActor/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/builtin-DisposableActor/#be-dispose", 
            "text": "", 
            "title": "be dispose()"
        }, 
        {
            "location": "/builtin-Env/", 
            "text": "class builtin/Env\n\n\nDefault capability\n: \nval\n\n\nAn environment holds the command line and other values injected into the\nprogram by default by the runtime.\n\n\nPublic fields\n\n\n\n\nlet args: \nArray\n[\nString\n val] val\n\n\nlet err: \nStdStream\n tag\n\n\nlet input: \nStdin\n tag\n\n\nlet out: \nStdStream\n tag\n\n\nlet root: (\nAmbientAuth\n val | \nNone\n val)\n\n\n\n\nConstructors\n\n\nnew \n_create\n(argc: \nU32\n val, argv: \nPointer\n[\nPointer\n[\nU8\n val] ref] val, envp: \nPointer\n[\nPointer\n[\nU8\n val] ref] val)\n\n\nBuilds an environment from the command line. This is done before the Main\nactor is created.\n\n\nnew \ncreate\n(root': (\nAmbientAuth\n val | \nNone\n val), input': \nStdin\n tag, out': \nStdStream\n tag, err': \nStdStream\n tag, args': \nArray\n[\nString\n val] val, vars': (\nArray\n[\nString\n val] val | \nNone\n val))\n\n\nBuild an artificial environment. A root capability may be supplied.\n\n\nPublic Functions\n\n\nfun tag  \nexitcode\n(code: \nI32\n val): \nNone\n val\n\n\nSets the application exit code. If this is called more than once, the last\nvalue set will be the exit code. The exit code defaults to 0.\n\n\nfun box  \nvars\n(): \nArray\n[\nString\n val] val\n\n\nReturn the environment variables as an array of strings of the form\n\"key=value\".\n\n\nPrivate Functions\n\n\nfun tag  \ncount\nstrings\n(data: \nPointer\n[\nPointer\n[\nU8\n val] ref] val): \nUSize\n val\n\n\nfun tag  \nstrings\nfrom_pointers\n(data: \nPointer\n[\nPointer\n[\nU8\n val] ref] val, len: \nUSize\n val): \nArray\n[\nString\n val] iso^", 
            "title": "class Env"
        }, 
        {
            "location": "/builtin-Env/#class-builtinenv", 
            "text": "Default capability :  val  An environment holds the command line and other values injected into the\nprogram by default by the runtime.", 
            "title": "class builtin/Env"
        }, 
        {
            "location": "/builtin-Env/#public-fields", 
            "text": "let args:  Array [ String  val] val  let err:  StdStream  tag  let input:  Stdin  tag  let out:  StdStream  tag  let root: ( AmbientAuth  val |  None  val)", 
            "title": "Public fields"
        }, 
        {
            "location": "/builtin-Env/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Env/#new-_createargc-u32-val-argv-pointer91pointer91u8-val93-ref93-val-envp-pointer91pointer91u8-val93-ref93-val", 
            "text": "Builds an environment from the command line. This is done before the Main\nactor is created.", 
            "title": "new _create(argc: U32 val, argv: Pointer[Pointer[U8 val] ref] val, envp: Pointer[Pointer[U8 val] ref] val)"
        }, 
        {
            "location": "/builtin-Env/#new-createroot-ambientauth-val-none-val-input-stdin-tag-out-stdstream-tag-err-stdstream-tag-args-array91string-val93-val-vars-array91string-val93-val-none-val", 
            "text": "Build an artificial environment. A root capability may be supplied.", 
            "title": "new create(root': (AmbientAuth val | None val), input': Stdin tag, out': StdStream tag, err': StdStream tag, args': Array[String val] val, vars': (Array[String val] val | None val))"
        }, 
        {
            "location": "/builtin-Env/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Env/#fun-tag-exitcodecode-i32-val-none-val", 
            "text": "Sets the application exit code. If this is called more than once, the last\nvalue set will be the exit code. The exit code defaults to 0.", 
            "title": "fun tag  exitcode(code: I32 val): None val"
        }, 
        {
            "location": "/builtin-Env/#fun-box-vars-array91string-val93-val", 
            "text": "Return the environment variables as an array of strings of the form\n\"key=value\".", 
            "title": "fun box  vars(): Array[String val] val"
        }, 
        {
            "location": "/builtin-Env/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-Env/#fun-tag-countstringsdata-pointer91pointer91u8-val93-ref93-val-usize-val", 
            "text": "", 
            "title": "fun tag  countstrings(data: Pointer[Pointer[U8 val] ref] val): USize val"
        }, 
        {
            "location": "/builtin-Env/#fun-tag-stringsfrom_pointersdata-pointer91pointer91u8-val93-ref93-val-len-usize-val-array91string-val93-iso", 
            "text": "", 
            "title": "fun tag  stringsfrom_pointers(data: Pointer[Pointer[U8 val] ref] val, len: USize val): Array[String val] iso^"
        }, 
        {
            "location": "/builtin-Equal/", 
            "text": "primitive builtin/Equal is \nEquatable\n[((\nLess\n val | \nEqual\n val) | \nGreater\n val)] ref\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nfun box  \nne\n(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^", 
            "title": "primitive Equal"
        }, 
        {
            "location": "/builtin-Equal/#primitive-builtinequal-is-equatable91less-val-equal-val-greater-val93-ref", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/Equal is Equatable[((Less val | Equal val) | Greater val)] ref"
        }, 
        {
            "location": "/builtin-Equal/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Equal/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-Equal/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Equal/#fun-box-eqthat-less-val-equal-val-greater-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: ((Less val | Equal val) | Greater val)): Bool val"
        }, 
        {
            "location": "/builtin-Equal/#fun-box-nethat-less-val-equal-val-greater-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: ((Less val | Equal val) | Greater val)): Bool val"
        }, 
        {
            "location": "/builtin-Equal/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-prefixdefault-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[FormatDefault val, PrefixDefault val] box): String iso^"
        }, 
        {
            "location": "/builtin-Equatable/", 
            "text": "interface builtin/Equatable[A: \nEquatable\n[A #read] #read]\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: box-\nA #read): \nBool\n val\n\n\nfun box  \nne\n(that: box-\nA #read): \nBool\n val", 
            "title": "interface Equatable"
        }, 
        {
            "location": "/builtin-Equatable/#interface-builtinequatable91a-equatable91a-read93-read93", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "interface builtin/Equatable[A: Equatable[A #read] #read]"
        }, 
        {
            "location": "/builtin-Equatable/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Equatable/#fun-box-eqthat-box-a-read-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: box-&gt;A #read): Bool val"
        }, 
        {
            "location": "/builtin-Equatable/#fun-box-nethat-box-a-read-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: box-&gt;A #read): Bool val"
        }, 
        {
            "location": "/builtin-F32/", 
            "text": "primitive builtin/F32 is \nFloatingPoint\n[\nF32\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nF32\n val)\n\n\nnew \ne\n()\n\n\nnew \nfrom_bits\n(i: \nU32\n val)\n\n\nnew \npi\n()\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nF32\n val\n\n\nfun box  \nacos\n(): \nF32\n val\n\n\nfun box  \nacosh\n(): \nF32\n val\n\n\nfun box  \nadd\n(y: \nF32\n val): \nF32\n val\n\n\nfun box  \nasin\n(): \nF32\n val\n\n\nfun box  \nasinh\n(): \nF32\n val\n\n\nfun box  \natan\n(): \nF32\n val\n\n\nfun box  \natan2\n(y: \nF32\n val): \nF32\n val\n\n\nfun box  \natanh\n(): \nF32\n val\n\n\nfun box  \nbits\n(): \nU32\n val\n\n\nfun box  \ncbrt\n(): \nF32\n val\n\n\nfun box  \nceil\n(): \nF32\n val\n\n\nfun box  \ncompare\n(that: \nF32\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \ncos\n(): \nF32\n val\n\n\nfun box  \ncosh\n(): \nF32\n val\n\n\nfun box  \ndiv\n(y: \nF32\n val): \nF32\n val\n\n\nfun box  \ndivmod\n(y: \nF32\n val): (\nF32\n val , \nF32\n val)\n\n\nfun tag  \nepsilon\n(): \nF32\n val\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nfun box  \neq\n(y: \nF32\n val): \nBool\n val\n\n\nfun box  \nexp\n(): \nF32\n val\n\n\nfun box  \nexp2\n(): \nF32\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun box  \nfinite\n(): \nBool\n val\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun box  \nfloor\n(): \nF32\n val\n\n\nfun box  \nfrexp\n(): (\nF32\n val , \nU32\n val)\n\n\nfun tag  \nfrom\n[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): \nF32\n val\n\n\nfun box  \nge\n(y: \nF32\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nF32\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nldexp\n(x: \nF32\n val, exponent: \nI32\n val): \nF32\n val\n\n\nfun box  \nle\n(y: \nF32\n val): \nBool\n val\n\n\nfun box  \nlog\n(): \nF32\n val\n\n\nfun box  \nlog10\n(): \nF32\n val\n\n\nfun box  \nlog2\n(): \nF32\n val\n\n\nfun box  \nlogb\n(): \nF32\n val\n\n\nfun box  \nlt\n(y: \nF32\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nF32\n val): \nF32\n val\n\n\nfun tag  \nmax_exp10\n(): \nI16\n val\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun tag  \nmax_exp2\n(): \nI16\n val\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun tag  \nmax_value\n(): \nF32\n val\n\n\nMaximum positive value representable.\n\n\nfun box  \nmin\n(y: \nF32\n val): \nF32\n val\n\n\nfun tag  \nmin_exp10\n(): \nI16\n val\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag  \nmin_exp2\n(): \nI16\n val\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag  \nmin_value\n(): \nF32\n val\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nfun box  \nmod\n(y: \nF32\n val): \nF32\n val\n\n\nfun box  \nmul\n(y: \nF32\n val): \nF32\n val\n\n\nfun box  \nnan\n(): \nBool\n val\n\n\nCheck whether this number is NaN.\n\n\nfun box  \nne\n(y: \nF32\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nF32\n val\n\n\nfun box  \npow\n(y: \nF32\n val): \nF32\n val\n\n\nfun box  \npowi\n(y: \nI32\n val): \nF32\n val\n\n\nfun tag  \nprecision10\n(): \nU8\n val\n\n\nMantissa precision in decimal digits.\n\n\nfun tag  \nprecision2\n(): \nU8\n val\n\n\nMantissa precision in bits.\n\n\nfun tag  \nradix\n(): \nU8\n val\n\n\nExponent radix.\n\n\nfun box  \nround\n(): \nF32\n val\n\n\nfun box  \nsin\n(): \nF32\n val\n\n\nfun box  \nsinh\n(): \nF32\n val\n\n\nfun box  \nsqrt\n(): \nF32\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nF32\n val): \nF32\n val\n\n\nfun box  \ntan\n(): \nF32\n val\n\n\nfun box  \ntanh\n(): \nF32\n val\n\n\nfun box  \ntrunc\n(): \nF32\n val\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive F32"
        }, 
        {
            "location": "/builtin-F32/#primitive-builtinf32-is-floatingpoint91f32-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/F32 is FloatingPoint[F32 val] val"
        }, 
        {
            "location": "/builtin-F32/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-F32/#new-createoptional-value-f32-val", 
            "text": "", 
            "title": "new create(optional value: F32 val)"
        }, 
        {
            "location": "/builtin-F32/#new-e", 
            "text": "", 
            "title": "new e()"
        }, 
        {
            "location": "/builtin-F32/#new-from_bitsi-u32-val", 
            "text": "", 
            "title": "new from_bits(i: U32 val)"
        }, 
        {
            "location": "/builtin-F32/#new-pi", 
            "text": "", 
            "title": "new pi()"
        }, 
        {
            "location": "/builtin-F32/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-F32/#fun-box-abs-f32-val", 
            "text": "", 
            "title": "fun box  abs(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-acos-f32-val", 
            "text": "", 
            "title": "fun box  acos(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-acosh-f32-val", 
            "text": "", 
            "title": "fun box  acosh(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-addy-f32-val-f32-val", 
            "text": "", 
            "title": "fun box  add(y: F32 val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-asin-f32-val", 
            "text": "", 
            "title": "fun box  asin(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-asinh-f32-val", 
            "text": "", 
            "title": "fun box  asinh(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-atan-f32-val", 
            "text": "", 
            "title": "fun box  atan(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-atan2y-f32-val-f32-val", 
            "text": "", 
            "title": "fun box  atan2(y: F32 val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-atanh-f32-val", 
            "text": "", 
            "title": "fun box  atanh(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-bits-u32-val", 
            "text": "", 
            "title": "fun box  bits(): U32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-cbrt-f32-val", 
            "text": "", 
            "title": "fun box  cbrt(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-ceil-f32-val", 
            "text": "", 
            "title": "fun box  ceil(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-comparethat-f32-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: F32 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-F32/#fun-box-cos-f32-val", 
            "text": "", 
            "title": "fun box  cos(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-cosh-f32-val", 
            "text": "", 
            "title": "fun box  cosh(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-divy-f32-val-f32-val", 
            "text": "", 
            "title": "fun box  div(y: F32 val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-divmody-f32-val-f32-val-f32-val", 
            "text": "", 
            "title": "fun box  divmod(y: F32 val): (F32 val , F32 val)"
        }, 
        {
            "location": "/builtin-F32/#fun-tag-epsilon-f32-val", 
            "text": "Minimum positive value such that (1 + epsilon) != 1.", 
            "title": "fun tag  epsilon(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-eqy-f32-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: F32 val): Bool val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-exp-f32-val", 
            "text": "", 
            "title": "fun box  exp(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-exp2-f32-val", 
            "text": "", 
            "title": "fun box  exp2(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-finite-bool-val", 
            "text": "Check whether this number is finite, ie not +/-infinity and not NaN.", 
            "title": "fun box  finite(): Bool val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-floor-f32-val", 
            "text": "", 
            "title": "fun box  floor(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-frexp-f32-val-u32-val", 
            "text": "", 
            "title": "fun box  frexp(): (F32 val , U32 val)"
        }, 
        {
            "location": "/builtin-F32/#fun-tag-from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b-val93-val93a-b-val-f32-val", 
            "text": "", 
            "title": "fun tag  from[B: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[B val] val)](a: B val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-gey-f32-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: F32 val): Bool val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-gty-f32-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: F32 val): Bool val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-ldexpx-f32-val-exponent-i32-val-f32-val", 
            "text": "", 
            "title": "fun box  ldexp(x: F32 val, exponent: I32 val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-ley-f32-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: F32 val): Bool val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-log-f32-val", 
            "text": "", 
            "title": "fun box  log(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-log10-f32-val", 
            "text": "", 
            "title": "fun box  log10(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-log2-f32-val", 
            "text": "", 
            "title": "fun box  log2(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-logb-f32-val", 
            "text": "", 
            "title": "fun box  logb(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-lty-f32-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: F32 val): Bool val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-maxy-f32-val-f32-val", 
            "text": "", 
            "title": "fun box  max(y: F32 val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-tag-max_exp10-i16-val", 
            "text": "Maximum exponent value such that (10^exponent) - 1 is representable.", 
            "title": "fun tag  max_exp10(): I16 val"
        }, 
        {
            "location": "/builtin-F32/#fun-tag-max_exp2-i16-val", 
            "text": "Maximum exponent value such that (2^exponent) - 1 is representable.", 
            "title": "fun tag  max_exp2(): I16 val"
        }, 
        {
            "location": "/builtin-F32/#fun-tag-max_value-f32-val", 
            "text": "Maximum positive value representable.", 
            "title": "fun tag  max_value(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-miny-f32-val-f32-val", 
            "text": "", 
            "title": "fun box  min(y: F32 val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-tag-min_exp10-i16-val", 
            "text": "Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).", 
            "title": "fun tag  min_exp10(): I16 val"
        }, 
        {
            "location": "/builtin-F32/#fun-tag-min_exp2-i16-val", 
            "text": "Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).", 
            "title": "fun tag  min_exp2(): I16 val"
        }, 
        {
            "location": "/builtin-F32/#fun-tag-min_value-f32-val", 
            "text": "Minimum positive value representable at full precision (ie a normalised\nnumber).", 
            "title": "fun tag  min_value(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-mody-f32-val-f32-val", 
            "text": "", 
            "title": "fun box  mod(y: F32 val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-muly-f32-val-f32-val", 
            "text": "", 
            "title": "fun box  mul(y: F32 val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-nan-bool-val", 
            "text": "Check whether this number is NaN.", 
            "title": "fun box  nan(): Bool val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-ney-f32-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: F32 val): Bool val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-neg-f32-val", 
            "text": "", 
            "title": "fun box  neg(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-powy-f32-val-f32-val", 
            "text": "", 
            "title": "fun box  pow(y: F32 val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-powiy-i32-val-f32-val", 
            "text": "", 
            "title": "fun box  powi(y: I32 val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-tag-precision10-u8-val", 
            "text": "Mantissa precision in decimal digits.", 
            "title": "fun tag  precision10(): U8 val"
        }, 
        {
            "location": "/builtin-F32/#fun-tag-precision2-u8-val", 
            "text": "Mantissa precision in bits.", 
            "title": "fun tag  precision2(): U8 val"
        }, 
        {
            "location": "/builtin-F32/#fun-tag-radix-u8-val", 
            "text": "Exponent radix.", 
            "title": "fun tag  radix(): U8 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-round-f32-val", 
            "text": "", 
            "title": "fun box  round(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-sin-f32-val", 
            "text": "", 
            "title": "fun box  sin(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-sinh-f32-val", 
            "text": "", 
            "title": "fun box  sinh(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-sqrt-f32-val", 
            "text": "", 
            "title": "fun box  sqrt(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatexp-val-formatexplarge-val-formatfix-val-formatfixlarge-val-formatgeneral-val-formatgenerallarge-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[((((((FormatDefault val | FormatExp val) | FormatExpLarge val) | FormatFix val) | FormatFixLarge val) | FormatGeneral val) | FormatGeneralLarge val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-F32/#fun-box-suby-f32-val-f32-val", 
            "text": "", 
            "title": "fun box  sub(y: F32 val): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-tan-f32-val", 
            "text": "", 
            "title": "fun box  tan(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-tanh-f32-val", 
            "text": "", 
            "title": "fun box  tanh(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-trunc-f32-val", 
            "text": "", 
            "title": "fun box  trunc(): F32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-F32/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-F64/", 
            "text": "primitive builtin/F64 is \nFloatingPoint\n[\nF64\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nF64\n val)\n\n\nnew \ne\n()\n\n\nnew \nfrom_bits\n(i: \nU64\n val)\n\n\nnew \npi\n()\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nF64\n val\n\n\nfun box  \nacos\n(): \nF64\n val\n\n\nfun box  \nacosh\n(): \nF64\n val\n\n\nfun box  \nadd\n(y: \nF64\n val): \nF64\n val\n\n\nfun box  \nasin\n(): \nF64\n val\n\n\nfun box  \nasinh\n(): \nF64\n val\n\n\nfun box  \natan\n(): \nF64\n val\n\n\nfun box  \natan2\n(y: \nF64\n val): \nF64\n val\n\n\nfun box  \natanh\n(): \nF64\n val\n\n\nfun box  \nbits\n(): \nU64\n val\n\n\nfun box  \ncbrt\n(): \nF64\n val\n\n\nfun box  \nceil\n(): \nF64\n val\n\n\nfun box  \ncompare\n(that: \nF64\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \ncos\n(): \nF64\n val\n\n\nfun box  \ncosh\n(): \nF64\n val\n\n\nfun box  \ndiv\n(y: \nF64\n val): \nF64\n val\n\n\nfun box  \ndivmod\n(y: \nF64\n val): (\nF64\n val , \nF64\n val)\n\n\nfun tag  \nepsilon\n(): \nF64\n val\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nfun box  \neq\n(y: \nF64\n val): \nBool\n val\n\n\nfun box  \nexp\n(): \nF64\n val\n\n\nfun box  \nexp2\n(): \nF64\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun box  \nfinite\n(): \nBool\n val\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun box  \nfloor\n(): \nF64\n val\n\n\nfun box  \nfrexp\n(): (\nF64\n val , \nU32\n val)\n\n\nfun tag  \nfrom\n[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): \nF64\n val\n\n\nfun box  \nge\n(y: \nF64\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nF64\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nldexp\n(x: \nF64\n val, exponent: \nI32\n val): \nF64\n val\n\n\nfun box  \nle\n(y: \nF64\n val): \nBool\n val\n\n\nfun box  \nlog\n(): \nF64\n val\n\n\nfun box  \nlog10\n(): \nF64\n val\n\n\nfun box  \nlog2\n(): \nF64\n val\n\n\nfun box  \nlogb\n(): \nF64\n val\n\n\nfun box  \nlt\n(y: \nF64\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nF64\n val): \nF64\n val\n\n\nfun tag  \nmax_exp10\n(): \nI16\n val\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun tag  \nmax_exp2\n(): \nI16\n val\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun tag  \nmax_value\n(): \nF64\n val\n\n\nMaximum positive value representable.\n\n\nfun box  \nmin\n(y: \nF64\n val): \nF64\n val\n\n\nfun tag  \nmin_exp10\n(): \nI16\n val\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag  \nmin_exp2\n(): \nI16\n val\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag  \nmin_value\n(): \nF64\n val\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nfun box  \nmod\n(y: \nF64\n val): \nF64\n val\n\n\nfun box  \nmul\n(y: \nF64\n val): \nF64\n val\n\n\nfun box  \nnan\n(): \nBool\n val\n\n\nCheck whether this number is NaN.\n\n\nfun box  \nne\n(y: \nF64\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nF64\n val\n\n\nfun box  \npow\n(y: \nF64\n val): \nF64\n val\n\n\nfun box  \npowi\n(y: \nI32\n val): \nF64\n val\n\n\nfun tag  \nprecision10\n(): \nU8\n val\n\n\nMantissa precision in decimal digits.\n\n\nfun tag  \nprecision2\n(): \nU8\n val\n\n\nMantissa precision in bits.\n\n\nfun tag  \nradix\n(): \nU8\n val\n\n\nExponent radix.\n\n\nfun box  \nround\n(): \nF64\n val\n\n\nfun box  \nsin\n(): \nF64\n val\n\n\nfun box  \nsinh\n(): \nF64\n val\n\n\nfun box  \nsqrt\n(): \nF64\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nF64\n val): \nF64\n val\n\n\nfun box  \ntan\n(): \nF64\n val\n\n\nfun box  \ntanh\n(): \nF64\n val\n\n\nfun box  \ntrunc\n(): \nF64\n val\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive F64"
        }, 
        {
            "location": "/builtin-F64/#primitive-builtinf64-is-floatingpoint91f64-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/F64 is FloatingPoint[F64 val] val"
        }, 
        {
            "location": "/builtin-F64/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-F64/#new-createoptional-value-f64-val", 
            "text": "", 
            "title": "new create(optional value: F64 val)"
        }, 
        {
            "location": "/builtin-F64/#new-e", 
            "text": "", 
            "title": "new e()"
        }, 
        {
            "location": "/builtin-F64/#new-from_bitsi-u64-val", 
            "text": "", 
            "title": "new from_bits(i: U64 val)"
        }, 
        {
            "location": "/builtin-F64/#new-pi", 
            "text": "", 
            "title": "new pi()"
        }, 
        {
            "location": "/builtin-F64/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-F64/#fun-box-abs-f64-val", 
            "text": "", 
            "title": "fun box  abs(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-acos-f64-val", 
            "text": "", 
            "title": "fun box  acos(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-acosh-f64-val", 
            "text": "", 
            "title": "fun box  acosh(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-addy-f64-val-f64-val", 
            "text": "", 
            "title": "fun box  add(y: F64 val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-asin-f64-val", 
            "text": "", 
            "title": "fun box  asin(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-asinh-f64-val", 
            "text": "", 
            "title": "fun box  asinh(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-atan-f64-val", 
            "text": "", 
            "title": "fun box  atan(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-atan2y-f64-val-f64-val", 
            "text": "", 
            "title": "fun box  atan2(y: F64 val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-atanh-f64-val", 
            "text": "", 
            "title": "fun box  atanh(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-bits-u64-val", 
            "text": "", 
            "title": "fun box  bits(): U64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-cbrt-f64-val", 
            "text": "", 
            "title": "fun box  cbrt(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-ceil-f64-val", 
            "text": "", 
            "title": "fun box  ceil(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-comparethat-f64-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: F64 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-F64/#fun-box-cos-f64-val", 
            "text": "", 
            "title": "fun box  cos(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-cosh-f64-val", 
            "text": "", 
            "title": "fun box  cosh(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-divy-f64-val-f64-val", 
            "text": "", 
            "title": "fun box  div(y: F64 val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-divmody-f64-val-f64-val-f64-val", 
            "text": "", 
            "title": "fun box  divmod(y: F64 val): (F64 val , F64 val)"
        }, 
        {
            "location": "/builtin-F64/#fun-tag-epsilon-f64-val", 
            "text": "Minimum positive value such that (1 + epsilon) != 1.", 
            "title": "fun tag  epsilon(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-eqy-f64-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: F64 val): Bool val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-exp-f64-val", 
            "text": "", 
            "title": "fun box  exp(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-exp2-f64-val", 
            "text": "", 
            "title": "fun box  exp2(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-finite-bool-val", 
            "text": "Check whether this number is finite, ie not +/-infinity and not NaN.", 
            "title": "fun box  finite(): Bool val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-floor-f64-val", 
            "text": "", 
            "title": "fun box  floor(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-frexp-f64-val-u32-val", 
            "text": "", 
            "title": "fun box  frexp(): (F64 val , U32 val)"
        }, 
        {
            "location": "/builtin-F64/#fun-tag-from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b-val93-val93a-b-val-f64-val", 
            "text": "", 
            "title": "fun tag  from[B: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[B val] val)](a: B val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-gey-f64-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: F64 val): Bool val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-gty-f64-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: F64 val): Bool val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-ldexpx-f64-val-exponent-i32-val-f64-val", 
            "text": "", 
            "title": "fun box  ldexp(x: F64 val, exponent: I32 val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-ley-f64-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: F64 val): Bool val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-log-f64-val", 
            "text": "", 
            "title": "fun box  log(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-log10-f64-val", 
            "text": "", 
            "title": "fun box  log10(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-log2-f64-val", 
            "text": "", 
            "title": "fun box  log2(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-logb-f64-val", 
            "text": "", 
            "title": "fun box  logb(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-lty-f64-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: F64 val): Bool val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-maxy-f64-val-f64-val", 
            "text": "", 
            "title": "fun box  max(y: F64 val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-tag-max_exp10-i16-val", 
            "text": "Maximum exponent value such that (10^exponent) - 1 is representable.", 
            "title": "fun tag  max_exp10(): I16 val"
        }, 
        {
            "location": "/builtin-F64/#fun-tag-max_exp2-i16-val", 
            "text": "Maximum exponent value such that (2^exponent) - 1 is representable.", 
            "title": "fun tag  max_exp2(): I16 val"
        }, 
        {
            "location": "/builtin-F64/#fun-tag-max_value-f64-val", 
            "text": "Maximum positive value representable.", 
            "title": "fun tag  max_value(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-miny-f64-val-f64-val", 
            "text": "", 
            "title": "fun box  min(y: F64 val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-tag-min_exp10-i16-val", 
            "text": "Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).", 
            "title": "fun tag  min_exp10(): I16 val"
        }, 
        {
            "location": "/builtin-F64/#fun-tag-min_exp2-i16-val", 
            "text": "Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).", 
            "title": "fun tag  min_exp2(): I16 val"
        }, 
        {
            "location": "/builtin-F64/#fun-tag-min_value-f64-val", 
            "text": "Minimum positive value representable at full precision (ie a normalised\nnumber).", 
            "title": "fun tag  min_value(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-mody-f64-val-f64-val", 
            "text": "", 
            "title": "fun box  mod(y: F64 val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-muly-f64-val-f64-val", 
            "text": "", 
            "title": "fun box  mul(y: F64 val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-nan-bool-val", 
            "text": "Check whether this number is NaN.", 
            "title": "fun box  nan(): Bool val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-ney-f64-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: F64 val): Bool val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-neg-f64-val", 
            "text": "", 
            "title": "fun box  neg(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-powy-f64-val-f64-val", 
            "text": "", 
            "title": "fun box  pow(y: F64 val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-powiy-i32-val-f64-val", 
            "text": "", 
            "title": "fun box  powi(y: I32 val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-tag-precision10-u8-val", 
            "text": "Mantissa precision in decimal digits.", 
            "title": "fun tag  precision10(): U8 val"
        }, 
        {
            "location": "/builtin-F64/#fun-tag-precision2-u8-val", 
            "text": "Mantissa precision in bits.", 
            "title": "fun tag  precision2(): U8 val"
        }, 
        {
            "location": "/builtin-F64/#fun-tag-radix-u8-val", 
            "text": "Exponent radix.", 
            "title": "fun tag  radix(): U8 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-round-f64-val", 
            "text": "", 
            "title": "fun box  round(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-sin-f64-val", 
            "text": "", 
            "title": "fun box  sin(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-sinh-f64-val", 
            "text": "", 
            "title": "fun box  sinh(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-sqrt-f64-val", 
            "text": "", 
            "title": "fun box  sqrt(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatexp-val-formatexplarge-val-formatfix-val-formatfixlarge-val-formatgeneral-val-formatgenerallarge-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[((((((FormatDefault val | FormatExp val) | FormatExpLarge val) | FormatFix val) | FormatFixLarge val) | FormatGeneral val) | FormatGeneralLarge val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-F64/#fun-box-suby-f64-val-f64-val", 
            "text": "", 
            "title": "fun box  sub(y: F64 val): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-tan-f64-val", 
            "text": "", 
            "title": "fun box  tan(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-tanh-f64-val", 
            "text": "", 
            "title": "fun box  tanh(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-trunc-f64-val", 
            "text": "", 
            "title": "fun box  trunc(): F64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-F64/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-Float/", 
            "text": "type builtin/Float is (\nF32\n val | \nF64\n val)\n\n\nNo doc string provided.", 
            "title": "type Float"
        }, 
        {
            "location": "/builtin-Float/#type-builtinfloat-is-f32-val-f64-val", 
            "text": "No doc string provided.", 
            "title": "type builtin/Float is (F32 val | F64 val)"
        }, 
        {
            "location": "/builtin-FloatingPoint/", 
            "text": "trait builtin/FloatingPoint[A: \nFloatingPoint\n[A val] val] is \nReal\n[A val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(value: A val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): A val\n\n\nfun box  \nacos\n(): A val\n\n\nfun box  \nacosh\n(): A val\n\n\nfun box  \nadd\n(y: A val): A val\n\n\nfun box  \nasin\n(): A val\n\n\nfun box  \nasinh\n(): A val\n\n\nfun box  \natan\n(): A val\n\n\nfun box  \natan2\n(y: A val): A val\n\n\nfun box  \natanh\n(): A val\n\n\nfun box  \ncbrt\n(): A val\n\n\nfun box  \nceil\n(): A val\n\n\nfun box  \ncompare\n(that: A val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \ncos\n(): A val\n\n\nfun box  \ncosh\n(): A val\n\n\nfun box  \ndiv\n(y: A val): A val\n\n\nfun box  \ndivmod\n(y: A val): (A val , A val)\n\n\nfun tag  \nepsilon\n(): A val\n\n\nfun box  \neq\n(y: A val): \nBool\n val\n\n\nfun box  \nexp\n(): A val\n\n\nfun box  \nexp2\n(): A val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun box  \nfinite\n(): \nBool\n val\n\n\nfun box  \nfloor\n(): A val\n\n\nfun box  \nfrexp\n(): (A val , \nU32\n val)\n\n\nfun tag  \nfrom\n[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): A val\n\n\nfun box  \nge\n(y: A val): \nBool\n val\n\n\nfun box  \ngt\n(y: A val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nldexp\n(x: A val, exponent: \nI32\n val): A val\n\n\nfun box  \nle\n(y: A val): \nBool\n val\n\n\nfun box  \nlog\n(): A val\n\n\nfun box  \nlog10\n(): A val\n\n\nfun box  \nlog2\n(): A val\n\n\nfun box  \nlogb\n(): A val\n\n\nfun box  \nlt\n(y: A val): \nBool\n val\n\n\nfun box  \nmax\n(y: A val): A val\n\n\nfun tag  \nmax_exp10\n(): \nI16\n val\n\n\nfun tag  \nmax_exp2\n(): \nI16\n val\n\n\nfun tag  \nmax_value\n(): A val\n\n\nfun box  \nmin\n(y: A val): A val\n\n\nfun tag  \nmin_exp10\n(): \nI16\n val\n\n\nfun tag  \nmin_exp2\n(): \nI16\n val\n\n\nfun tag  \nmin_value\n(): A val\n\n\nfun box  \nmod\n(y: A val): A val\n\n\nfun box  \nmul\n(y: A val): A val\n\n\nfun box  \nnan\n(): \nBool\n val\n\n\nfun box  \nne\n(y: A val): \nBool\n val\n\n\nfun box  \nneg\n(): A val\n\n\nfun box  \npow\n(y: A val): A val\n\n\nfun box  \npowi\n(y: \nI32\n val): A val\n\n\nfun tag  \nprecision10\n(): \nU8\n val\n\n\nfun tag  \nprecision2\n(): \nU8\n val\n\n\nfun tag  \nradix\n(): \nU8\n val\n\n\nfun box  \nround\n(): A val\n\n\nfun box  \nsin\n(): A val\n\n\nfun box  \nsinh\n(): A val\n\n\nfun box  \nsqrt\n(): A val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: A val): A val\n\n\nfun box  \ntan\n(): A val\n\n\nfun box  \ntanh\n(): A val\n\n\nfun box  \ntrunc\n(): A val\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "trait FloatingPoint"
        }, 
        {
            "location": "/builtin-FloatingPoint/#trait-builtinfloatingpoint91a-floatingpoint91a-val93-val93-is-real91a-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "trait builtin/FloatingPoint[A: FloatingPoint[A val] val] is Real[A val] val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FloatingPoint/#new-createvalue-a-val", 
            "text": "", 
            "title": "new create(value: A val)"
        }, 
        {
            "location": "/builtin-FloatingPoint/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-abs-a-val", 
            "text": "", 
            "title": "fun box  abs(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-acos-a-val", 
            "text": "", 
            "title": "fun box  acos(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-acosh-a-val", 
            "text": "", 
            "title": "fun box  acosh(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-addy-a-val-a-val", 
            "text": "", 
            "title": "fun box  add(y: A val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-asin-a-val", 
            "text": "", 
            "title": "fun box  asin(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-asinh-a-val", 
            "text": "", 
            "title": "fun box  asinh(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-atan-a-val", 
            "text": "", 
            "title": "fun box  atan(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-atan2y-a-val-a-val", 
            "text": "", 
            "title": "fun box  atan2(y: A val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-atanh-a-val", 
            "text": "", 
            "title": "fun box  atanh(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-cbrt-a-val", 
            "text": "", 
            "title": "fun box  cbrt(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-ceil-a-val", 
            "text": "", 
            "title": "fun box  ceil(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-comparethat-a-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: A val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-cos-a-val", 
            "text": "", 
            "title": "fun box  cos(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-cosh-a-val", 
            "text": "", 
            "title": "fun box  cosh(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-divy-a-val-a-val", 
            "text": "", 
            "title": "fun box  div(y: A val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-divmody-a-val-a-val-a-val", 
            "text": "", 
            "title": "fun box  divmod(y: A val): (A val , A val)"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-tag-epsilon-a-val", 
            "text": "", 
            "title": "fun tag  epsilon(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-eqy-a-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-exp-a-val", 
            "text": "", 
            "title": "fun box  exp(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-exp2-a-val", 
            "text": "", 
            "title": "fun box  exp2(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-finite-bool-val", 
            "text": "", 
            "title": "fun box  finite(): Bool val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-floor-a-val", 
            "text": "", 
            "title": "fun box  floor(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-frexp-a-val-u32-val", 
            "text": "", 
            "title": "fun box  frexp(): (A val , U32 val)"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-tag-from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b-val93-val93a-b-val-a-val", 
            "text": "", 
            "title": "fun tag  from[B: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[B val] val)](a: B val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-gey-a-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-gty-a-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-ldexpx-a-val-exponent-i32-val-a-val", 
            "text": "", 
            "title": "fun box  ldexp(x: A val, exponent: I32 val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-ley-a-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-log-a-val", 
            "text": "", 
            "title": "fun box  log(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-log10-a-val", 
            "text": "", 
            "title": "fun box  log10(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-log2-a-val", 
            "text": "", 
            "title": "fun box  log2(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-logb-a-val", 
            "text": "", 
            "title": "fun box  logb(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-lty-a-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-maxy-a-val-a-val", 
            "text": "", 
            "title": "fun box  max(y: A val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-tag-max_exp10-i16-val", 
            "text": "", 
            "title": "fun tag  max_exp10(): I16 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-tag-max_exp2-i16-val", 
            "text": "", 
            "title": "fun tag  max_exp2(): I16 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-tag-max_value-a-val", 
            "text": "", 
            "title": "fun tag  max_value(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-miny-a-val-a-val", 
            "text": "", 
            "title": "fun box  min(y: A val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-tag-min_exp10-i16-val", 
            "text": "", 
            "title": "fun tag  min_exp10(): I16 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-tag-min_exp2-i16-val", 
            "text": "", 
            "title": "fun tag  min_exp2(): I16 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-tag-min_value-a-val", 
            "text": "", 
            "title": "fun tag  min_value(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-mody-a-val-a-val", 
            "text": "", 
            "title": "fun box  mod(y: A val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-muly-a-val-a-val", 
            "text": "", 
            "title": "fun box  mul(y: A val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-nan-bool-val", 
            "text": "", 
            "title": "fun box  nan(): Bool val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-ney-a-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-neg-a-val", 
            "text": "", 
            "title": "fun box  neg(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-powy-a-val-a-val", 
            "text": "", 
            "title": "fun box  pow(y: A val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-powiy-i32-val-a-val", 
            "text": "", 
            "title": "fun box  powi(y: I32 val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-tag-precision10-u8-val", 
            "text": "", 
            "title": "fun tag  precision10(): U8 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-tag-precision2-u8-val", 
            "text": "", 
            "title": "fun tag  precision2(): U8 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-tag-radix-u8-val", 
            "text": "", 
            "title": "fun tag  radix(): U8 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-round-a-val", 
            "text": "", 
            "title": "fun box  round(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-sin-a-val", 
            "text": "", 
            "title": "fun box  sin(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-sinh-a-val", 
            "text": "", 
            "title": "fun box  sinh(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-sqrt-a-val", 
            "text": "", 
            "title": "fun box  sqrt(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatexp-val-formatexplarge-val-formatfix-val-formatfixlarge-val-formatgeneral-val-formatgenerallarge-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[((((((FormatDefault val | FormatExp val) | FormatExpLarge val) | FormatFix val) | FormatFixLarge val) | FormatGeneral val) | FormatGeneralLarge val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-suby-a-val-a-val", 
            "text": "", 
            "title": "fun box  sub(y: A val): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-tan-a-val", 
            "text": "", 
            "title": "fun box  tan(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-tanh-a-val", 
            "text": "", 
            "title": "fun box  tanh(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-trunc-a-val", 
            "text": "", 
            "title": "fun box  trunc(): A val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-FloatingPoint/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-FormatBinary/", 
            "text": "primitive builtin/FormatBinary is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatBinary\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatBinary\n val): \nBool\n val", 
            "title": "primitive FormatBinary"
        }, 
        {
            "location": "/builtin-FormatBinary/#primitive-builtinformatbinary-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatBinary is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatBinary/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatBinary/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatBinary/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatBinary/#fun-box-eqthat-formatbinary-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatBinary val): Bool val"
        }, 
        {
            "location": "/builtin-FormatBinary/#fun-box-nethat-formatbinary-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatBinary val): Bool val"
        }, 
        {
            "location": "/builtin-FormatBinaryBare/", 
            "text": "primitive builtin/FormatBinaryBare is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatBinaryBare\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatBinaryBare\n val): \nBool\n val", 
            "title": "primitive FormatBinaryBare"
        }, 
        {
            "location": "/builtin-FormatBinaryBare/#primitive-builtinformatbinarybare-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatBinaryBare is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatBinaryBare/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatBinaryBare/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatBinaryBare/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatBinaryBare/#fun-box-eqthat-formatbinarybare-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatBinaryBare val): Bool val"
        }, 
        {
            "location": "/builtin-FormatBinaryBare/#fun-box-nethat-formatbinarybare-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatBinaryBare val): Bool val"
        }, 
        {
            "location": "/builtin-FormatDefault/", 
            "text": "primitive builtin/FormatDefault is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatDefault\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatDefault\n val): \nBool\n val", 
            "title": "primitive FormatDefault"
        }, 
        {
            "location": "/builtin-FormatDefault/#primitive-builtinformatdefault-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatDefault is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatDefault/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatDefault/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatDefault/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatDefault/#fun-box-eqthat-formatdefault-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatDefault val): Bool val"
        }, 
        {
            "location": "/builtin-FormatDefault/#fun-box-nethat-formatdefault-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatDefault val): Bool val"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/", 
            "text": "primitive builtin/FormatDefaultNumber\n\n\nDefault capability\n: \nval\n\n\nDefault format settings for numbers.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \nalign\n(): ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nfun box  \neq\n(that: \nFormatDefaultNumber\n val): \nBool\n val\n\n\nfun box  \nfill\n(): \nU32\n val\n\n\nfun box  \nformat\n(): \nFormatDefault\n val\n\n\nfun box  \nne\n(that: \nFormatDefaultNumber\n val): \nBool\n val\n\n\nfun box  \nprecision\n(): \nUSize\n val\n\n\nfun box  \nprefix\n(): \nPrefixDefault\n val\n\n\nfun box  \nwidth\n(): \nUSize\n val", 
            "title": "primitive FormatDefaultNumber"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#primitive-builtinformatdefaultnumber", 
            "text": "Default capability :  val  Default format settings for numbers.", 
            "title": "primitive builtin/FormatDefaultNumber"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#fun-box-align-alignleft-val-alignright-val-aligncenter-val", 
            "text": "", 
            "title": "fun box  align(): ((AlignLeft val | AlignRight val) | AlignCenter val)"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#fun-box-eqthat-formatdefaultnumber-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatDefaultNumber val): Bool val"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#fun-box-fill-u32-val", 
            "text": "", 
            "title": "fun box  fill(): U32 val"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#fun-box-format-formatdefault-val", 
            "text": "", 
            "title": "fun box  format(): FormatDefault val"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#fun-box-nethat-formatdefaultnumber-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatDefaultNumber val): Bool val"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#fun-box-precision-usize-val", 
            "text": "", 
            "title": "fun box  precision(): USize val"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#fun-box-prefix-prefixdefault-val", 
            "text": "", 
            "title": "fun box  prefix(): PrefixDefault val"
        }, 
        {
            "location": "/builtin-FormatDefaultNumber/#fun-box-width-usize-val", 
            "text": "", 
            "title": "fun box  width(): USize val"
        }, 
        {
            "location": "/builtin-FormatExp/", 
            "text": "primitive builtin/FormatExp is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatExp\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatExp\n val): \nBool\n val", 
            "title": "primitive FormatExp"
        }, 
        {
            "location": "/builtin-FormatExp/#primitive-builtinformatexp-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatExp is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatExp/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatExp/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatExp/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatExp/#fun-box-eqthat-formatexp-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatExp val): Bool val"
        }, 
        {
            "location": "/builtin-FormatExp/#fun-box-nethat-formatexp-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatExp val): Bool val"
        }, 
        {
            "location": "/builtin-FormatExpLarge/", 
            "text": "primitive builtin/FormatExpLarge is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatExpLarge\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatExpLarge\n val): \nBool\n val", 
            "title": "primitive FormatExpLarge"
        }, 
        {
            "location": "/builtin-FormatExpLarge/#primitive-builtinformatexplarge-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatExpLarge is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatExpLarge/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatExpLarge/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatExpLarge/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatExpLarge/#fun-box-eqthat-formatexplarge-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatExpLarge val): Bool val"
        }, 
        {
            "location": "/builtin-FormatExpLarge/#fun-box-nethat-formatexplarge-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatExpLarge val): Bool val"
        }, 
        {
            "location": "/builtin-FormatFix/", 
            "text": "primitive builtin/FormatFix is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatFix\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatFix\n val): \nBool\n val", 
            "title": "primitive FormatFix"
        }, 
        {
            "location": "/builtin-FormatFix/#primitive-builtinformatfix-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatFix is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatFix/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatFix/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatFix/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatFix/#fun-box-eqthat-formatfix-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatFix val): Bool val"
        }, 
        {
            "location": "/builtin-FormatFix/#fun-box-nethat-formatfix-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatFix val): Bool val"
        }, 
        {
            "location": "/builtin-FormatFixLarge/", 
            "text": "primitive builtin/FormatFixLarge is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatFixLarge\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatFixLarge\n val): \nBool\n val", 
            "title": "primitive FormatFixLarge"
        }, 
        {
            "location": "/builtin-FormatFixLarge/#primitive-builtinformatfixlarge-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatFixLarge is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatFixLarge/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatFixLarge/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatFixLarge/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatFixLarge/#fun-box-eqthat-formatfixlarge-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatFixLarge val): Bool val"
        }, 
        {
            "location": "/builtin-FormatFixLarge/#fun-box-nethat-formatfixlarge-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatFixLarge val): Bool val"
        }, 
        {
            "location": "/builtin-FormatFloat/", 
            "text": "type builtin/FormatFloat is ((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val)\n\n\nNo doc string provided.", 
            "title": "type FormatFloat"
        }, 
        {
            "location": "/builtin-FormatFloat/#type-builtinformatfloat-is-formatdefault-val-formatexp-val-formatexplarge-val-formatfix-val-formatfixlarge-val-formatgeneral-val-formatgenerallarge-val", 
            "text": "No doc string provided.", 
            "title": "type builtin/FormatFloat is ((((((FormatDefault val | FormatExp val) | FormatExpLarge val) | FormatFix val) | FormatFixLarge val) | FormatGeneral val) | FormatGeneralLarge val)"
        }, 
        {
            "location": "/builtin-FormatGeneral/", 
            "text": "primitive builtin/FormatGeneral is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatGeneral\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatGeneral\n val): \nBool\n val", 
            "title": "primitive FormatGeneral"
        }, 
        {
            "location": "/builtin-FormatGeneral/#primitive-builtinformatgeneral-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatGeneral is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatGeneral/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatGeneral/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatGeneral/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatGeneral/#fun-box-eqthat-formatgeneral-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatGeneral val): Bool val"
        }, 
        {
            "location": "/builtin-FormatGeneral/#fun-box-nethat-formatgeneral-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatGeneral val): Bool val"
        }, 
        {
            "location": "/builtin-FormatGeneralLarge/", 
            "text": "primitive builtin/FormatGeneralLarge is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatGeneralLarge\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatGeneralLarge\n val): \nBool\n val", 
            "title": "primitive FormatGeneralLarge"
        }, 
        {
            "location": "/builtin-FormatGeneralLarge/#primitive-builtinformatgenerallarge-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatGeneralLarge is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatGeneralLarge/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatGeneralLarge/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatGeneralLarge/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatGeneralLarge/#fun-box-eqthat-formatgenerallarge-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatGeneralLarge val): Bool val"
        }, 
        {
            "location": "/builtin-FormatGeneralLarge/#fun-box-nethat-formatgenerallarge-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatGeneralLarge val): Bool val"
        }, 
        {
            "location": "/builtin-FormatHex/", 
            "text": "primitive builtin/FormatHex is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatHex\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatHex\n val): \nBool\n val", 
            "title": "primitive FormatHex"
        }, 
        {
            "location": "/builtin-FormatHex/#primitive-builtinformathex-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatHex is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatHex/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatHex/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatHex/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatHex/#fun-box-eqthat-formathex-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatHex val): Bool val"
        }, 
        {
            "location": "/builtin-FormatHex/#fun-box-nethat-formathex-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatHex val): Bool val"
        }, 
        {
            "location": "/builtin-FormatHexBare/", 
            "text": "primitive builtin/FormatHexBare is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatHexBare\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatHexBare\n val): \nBool\n val", 
            "title": "primitive FormatHexBare"
        }, 
        {
            "location": "/builtin-FormatHexBare/#primitive-builtinformathexbare-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatHexBare is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatHexBare/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatHexBare/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatHexBare/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatHexBare/#fun-box-eqthat-formathexbare-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatHexBare val): Bool val"
        }, 
        {
            "location": "/builtin-FormatHexBare/#fun-box-nethat-formathexbare-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatHexBare val): Bool val"
        }, 
        {
            "location": "/builtin-FormatHexSmall/", 
            "text": "primitive builtin/FormatHexSmall is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatHexSmall\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatHexSmall\n val): \nBool\n val", 
            "title": "primitive FormatHexSmall"
        }, 
        {
            "location": "/builtin-FormatHexSmall/#primitive-builtinformathexsmall-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatHexSmall is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatHexSmall/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatHexSmall/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatHexSmall/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatHexSmall/#fun-box-eqthat-formathexsmall-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatHexSmall val): Bool val"
        }, 
        {
            "location": "/builtin-FormatHexSmall/#fun-box-nethat-formathexsmall-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatHexSmall val): Bool val"
        }, 
        {
            "location": "/builtin-FormatHexSmallBare/", 
            "text": "primitive builtin/FormatHexSmallBare is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatHexSmallBare\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatHexSmallBare\n val): \nBool\n val", 
            "title": "primitive FormatHexSmallBare"
        }, 
        {
            "location": "/builtin-FormatHexSmallBare/#primitive-builtinformathexsmallbare-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatHexSmallBare is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatHexSmallBare/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatHexSmallBare/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatHexSmallBare/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatHexSmallBare/#fun-box-eqthat-formathexsmallbare-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatHexSmallBare val): Bool val"
        }, 
        {
            "location": "/builtin-FormatHexSmallBare/#fun-box-nethat-formathexsmallbare-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatHexSmallBare val): Bool val"
        }, 
        {
            "location": "/builtin-FormatInt/", 
            "text": "type builtin/FormatInt is (((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val)\n\n\nNo doc string provided.", 
            "title": "type FormatInt"
        }, 
        {
            "location": "/builtin-FormatInt/#type-builtinformatint-is-formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val", 
            "text": "No doc string provided.", 
            "title": "type builtin/FormatInt is (((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val)"
        }, 
        {
            "location": "/builtin-FormatOctal/", 
            "text": "primitive builtin/FormatOctal is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatOctal\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatOctal\n val): \nBool\n val", 
            "title": "primitive FormatOctal"
        }, 
        {
            "location": "/builtin-FormatOctal/#primitive-builtinformatoctal-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatOctal is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatOctal/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatOctal/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatOctal/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatOctal/#fun-box-eqthat-formatoctal-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatOctal val): Bool val"
        }, 
        {
            "location": "/builtin-FormatOctal/#fun-box-nethat-formatoctal-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatOctal val): Bool val"
        }, 
        {
            "location": "/builtin-FormatOctalBare/", 
            "text": "primitive builtin/FormatOctalBare is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatOctalBare\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatOctalBare\n val): \nBool\n val", 
            "title": "primitive FormatOctalBare"
        }, 
        {
            "location": "/builtin-FormatOctalBare/#primitive-builtinformatoctalbare-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatOctalBare is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatOctalBare/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatOctalBare/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatOctalBare/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatOctalBare/#fun-box-eqthat-formatoctalbare-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatOctalBare val): Bool val"
        }, 
        {
            "location": "/builtin-FormatOctalBare/#fun-box-nethat-formatoctalbare-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatOctalBare val): Bool val"
        }, 
        {
            "location": "/builtin-FormatSettings/", 
            "text": "interface builtin/FormatSettings[optional F: \nFormatSpec\n val, optional P: \nPrefixSpec\n val]\n\n\nDefault capability\n: \nbox\n\n\nProvide the settings to be used when converting objects to strings.\n\n\nThe \nformat\n and \nprefix\n settings are effectively enums. The \nFormatDefault\n\nand \nPrefixDefault\n values are acceptable for all Stringable objects. Other\npossible values can be added for each Stringable, without those values having\nto be handled by all Stringables. For example, integers have the option\n\nFormatHex\n, whereas floats do not.\n\n\n\n\nformat. Format to use.\n\n\nprefix. Prefix to use.\n\n\nprecision. Precision to use. The exact meaning of this depends on the type,\nbut is generally the number of characters used for all, or part, of the\nstring. A value of -1 indicates that the default for the type should be\nused.\n\n\nwidth. The minimum number of characters that will be in the produced\nstring. If necessary the string will be padded with the fill character to\nmake it long enough.\n\n\nalign. Whether fill characters should be added at the beginning or end of\nthe generated string, or both.\n\n\nfill: The character to pad a string with if it is shorter than width.\n\n\n\n\nPublic Functions\n\n\nfun box  \nalign\n(): ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nfun box  \nfill\n(): \nU32\n val\n\n\nfun box  \nformat\n(): (F val | \nFormatDefault\n val)\n\n\nfun box  \nprecision\n(): \nUSize\n val\n\n\nfun box  \nprefix\n(): (P val | \nPrefixDefault\n val)\n\n\nfun box  \nwidth\n(): \nUSize\n val", 
            "title": "interface FormatSettings"
        }, 
        {
            "location": "/builtin-FormatSettings/#interface-builtinformatsettings91optional-f-formatspec-val-optional-p-prefixspec-val93", 
            "text": "Default capability :  box  Provide the settings to be used when converting objects to strings.  The  format  and  prefix  settings are effectively enums. The  FormatDefault \nand  PrefixDefault  values are acceptable for all Stringable objects. Other\npossible values can be added for each Stringable, without those values having\nto be handled by all Stringables. For example, integers have the option FormatHex , whereas floats do not.   format. Format to use.  prefix. Prefix to use.  precision. Precision to use. The exact meaning of this depends on the type,\nbut is generally the number of characters used for all, or part, of the\nstring. A value of -1 indicates that the default for the type should be\nused.  width. The minimum number of characters that will be in the produced\nstring. If necessary the string will be padded with the fill character to\nmake it long enough.  align. Whether fill characters should be added at the beginning or end of\nthe generated string, or both.  fill: The character to pad a string with if it is shorter than width.", 
            "title": "interface builtin/FormatSettings[optional F: FormatSpec val, optional P: PrefixSpec val]"
        }, 
        {
            "location": "/builtin-FormatSettings/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatSettings/#fun-box-align-alignleft-val-alignright-val-aligncenter-val", 
            "text": "", 
            "title": "fun box  align(): ((AlignLeft val | AlignRight val) | AlignCenter val)"
        }, 
        {
            "location": "/builtin-FormatSettings/#fun-box-fill-u32-val", 
            "text": "", 
            "title": "fun box  fill(): U32 val"
        }, 
        {
            "location": "/builtin-FormatSettings/#fun-box-format-f-val-formatdefault-val", 
            "text": "", 
            "title": "fun box  format(): (F val | FormatDefault val)"
        }, 
        {
            "location": "/builtin-FormatSettings/#fun-box-precision-usize-val", 
            "text": "", 
            "title": "fun box  precision(): USize val"
        }, 
        {
            "location": "/builtin-FormatSettings/#fun-box-prefix-p-val-prefixdefault-val", 
            "text": "", 
            "title": "fun box  prefix(): (P val | PrefixDefault val)"
        }, 
        {
            "location": "/builtin-FormatSettings/#fun-box-width-usize-val", 
            "text": "", 
            "title": "fun box  width(): USize val"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/", 
            "text": "primitive builtin/FormatSettingsDefault\n\n\nDefault capability\n: \nval\n\n\nDefault format settings for general Stringable objects.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \nalign\n(): ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nfun box  \neq\n(that: \nFormatSettingsDefault\n val): \nBool\n val\n\n\nfun box  \nfill\n(): \nU32\n val\n\n\nfun box  \nformat\n(): \nFormatDefault\n val\n\n\nfun box  \nne\n(that: \nFormatSettingsDefault\n val): \nBool\n val\n\n\nfun box  \nprecision\n(): \nUSize\n val\n\n\nfun box  \nprefix\n(): \nPrefixDefault\n val\n\n\nfun box  \nwidth\n(): \nUSize\n val", 
            "title": "primitive FormatSettingsDefault"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#primitive-builtinformatsettingsdefault", 
            "text": "Default capability :  val  Default format settings for general Stringable objects.", 
            "title": "primitive builtin/FormatSettingsDefault"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#fun-box-align-alignleft-val-alignright-val-aligncenter-val", 
            "text": "", 
            "title": "fun box  align(): ((AlignLeft val | AlignRight val) | AlignCenter val)"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#fun-box-eqthat-formatsettingsdefault-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatSettingsDefault val): Bool val"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#fun-box-fill-u32-val", 
            "text": "", 
            "title": "fun box  fill(): U32 val"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#fun-box-format-formatdefault-val", 
            "text": "", 
            "title": "fun box  format(): FormatDefault val"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#fun-box-nethat-formatsettingsdefault-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatSettingsDefault val): Bool val"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#fun-box-precision-usize-val", 
            "text": "", 
            "title": "fun box  precision(): USize val"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#fun-box-prefix-prefixdefault-val", 
            "text": "", 
            "title": "fun box  prefix(): PrefixDefault val"
        }, 
        {
            "location": "/builtin-FormatSettingsDefault/#fun-box-width-usize-val", 
            "text": "", 
            "title": "fun box  width(): USize val"
        }, 
        {
            "location": "/builtin-FormatSettingsFloat/", 
            "text": "type builtin/FormatSettingsFloat is \nFormatSettingsHolder\n[((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val), \nFormatDefaultNumber\n val] ref\n\n\nFormat holder for floats.", 
            "title": "type FormatSettingsFloat"
        }, 
        {
            "location": "/builtin-FormatSettingsFloat/#type-builtinformatsettingsfloat-is-formatsettingsholder91formatdefault-val-formatexp-val-formatexplarge-val-formatfix-val-formatfixlarge-val-formatgeneral-val-formatgenerallarge-val-prefixdefault-val-prefixspace-val-prefixsign-val-formatdefaultnumber-val93-ref", 
            "text": "Format holder for floats.", 
            "title": "type builtin/FormatSettingsFloat is FormatSettingsHolder[((((((FormatDefault val | FormatExp val) | FormatExpLarge val) | FormatFix val) | FormatFixLarge val) | FormatGeneral val) | FormatGeneralLarge val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val), FormatDefaultNumber val] ref"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/", 
            "text": "class builtin/FormatSettingsHolder[optional F: \nFormatSpec\n val, optional P: \nPrefixSpec\n val, optional D: (\nFormatSettings\n[F val, P val] #read \n \nCreatable\n #read)]\n\n\nDefault capability\n: \nref\n\n\nModifiable format settings holder.\n\n\nEach setting should be set as appropriate and then the holder can be passed\nto the relevant \nstring()\n functions. The settings can then be tweaked and\nthe holder reused for other \nstring()\n calls if required.\n\n\nDefault settings may be provided to the \ncreate()\n constructor. If they\naren't, defaults are specified by an instance of the \nD\n type parameter.\n\n\nSettings may be read and written directly or the provided accessors may be\nused. The write accessors return \nthis\n to allow call chaining.\n\n\nPublic fields\n\n\n\n\nvar align': ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nvar fill': \nU32\n val\n\n\nvar format': (F val | \nFormatDefault\n val)\n\n\nvar precision': \nUSize\n val\n\n\nvar prefix': (P val | \nPrefixDefault\n val)\n\n\nvar width': \nUSize\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(optional defaults: \nFormatSettings\n[F val, P val] box)\n\n\nInitialise fields using the given default source.\n\n\nPublic Functions\n\n\nfun box  \nalign\n(): ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nfun box  \nfill\n(): \nU32\n val\n\n\nfun box  \nformat\n(): (F val | \nFormatDefault\n val)\n\n\nfun box  \nprecision\n(): \nUSize\n val\n\n\nfun box  \nprefix\n(): (P val | \nPrefixDefault\n val)\n\n\nfun ref  \nset_align\n(a: ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nfun ref  \nset_fill\n(f: \nU32\n val): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nfun ref  \nset_format\n(f: (F val | \nFormatDefault\n val)): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nfun ref  \nset_precision\n(p: \nUSize\n val): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nfun ref  \nset_prefix\n(p: (P val | \nPrefixDefault\n val)): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nfun ref  \nset_width\n(w: \nUSize\n val): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nfun box  \nwidth\n(): \nUSize\n val", 
            "title": "class FormatSettingsHolder"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#class-builtinformatsettingsholder91optional-f-formatspec-val-optional-p-prefixspec-val-optional-d-formatsettings91f-val-p-val93-read-creatable-read93", 
            "text": "Default capability :  ref  Modifiable format settings holder.  Each setting should be set as appropriate and then the holder can be passed\nto the relevant  string()  functions. The settings can then be tweaked and\nthe holder reused for other  string()  calls if required.  Default settings may be provided to the  create()  constructor. If they\naren't, defaults are specified by an instance of the  D  type parameter.  Settings may be read and written directly or the provided accessors may be\nused. The write accessors return  this  to allow call chaining.", 
            "title": "class builtin/FormatSettingsHolder[optional F: FormatSpec val, optional P: PrefixSpec val, optional D: (FormatSettings[F val, P val] #read &amp; Creatable #read)]"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#public-fields", 
            "text": "var align': (( AlignLeft  val |  AlignRight  val) |  AlignCenter  val)  var fill':  U32  val  var format': (F val |  FormatDefault  val)  var precision':  USize  val  var prefix': (P val |  PrefixDefault  val)  var width':  USize  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#new-createoptional-defaults-formatsettings91f-val-p-val93-box", 
            "text": "Initialise fields using the given default source.", 
            "title": "new create(optional defaults: FormatSettings[F val, P val] box)"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-box-align-alignleft-val-alignright-val-aligncenter-val", 
            "text": "", 
            "title": "fun box  align(): ((AlignLeft val | AlignRight val) | AlignCenter val)"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-box-fill-u32-val", 
            "text": "", 
            "title": "fun box  fill(): U32 val"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-box-format-f-val-formatdefault-val", 
            "text": "", 
            "title": "fun box  format(): (F val | FormatDefault val)"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-box-precision-usize-val", 
            "text": "", 
            "title": "fun box  precision(): USize val"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-box-prefix-p-val-prefixdefault-val", 
            "text": "", 
            "title": "fun box  prefix(): (P val | PrefixDefault val)"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-ref-set_aligna-alignleft-val-alignright-val-aligncenter-val-formatsettingsholder91f-val-p-val-d-read93-ref", 
            "text": "", 
            "title": "fun ref  set_align(a: ((AlignLeft val | AlignRight val) | AlignCenter val)): FormatSettingsHolder[F val, P val, D #read] ref"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-ref-set_fillf-u32-val-formatsettingsholder91f-val-p-val-d-read93-ref", 
            "text": "", 
            "title": "fun ref  set_fill(f: U32 val): FormatSettingsHolder[F val, P val, D #read] ref"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-ref-set_formatf-f-val-formatdefault-val-formatsettingsholder91f-val-p-val-d-read93-ref", 
            "text": "", 
            "title": "fun ref  set_format(f: (F val | FormatDefault val)): FormatSettingsHolder[F val, P val, D #read] ref"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-ref-set_precisionp-usize-val-formatsettingsholder91f-val-p-val-d-read93-ref", 
            "text": "", 
            "title": "fun ref  set_precision(p: USize val): FormatSettingsHolder[F val, P val, D #read] ref"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-ref-set_prefixp-p-val-prefixdefault-val-formatsettingsholder91f-val-p-val-d-read93-ref", 
            "text": "", 
            "title": "fun ref  set_prefix(p: (P val | PrefixDefault val)): FormatSettingsHolder[F val, P val, D #read] ref"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-ref-set_widthw-usize-val-formatsettingsholder91f-val-p-val-d-read93-ref", 
            "text": "", 
            "title": "fun ref  set_width(w: USize val): FormatSettingsHolder[F val, P val, D #read] ref"
        }, 
        {
            "location": "/builtin-FormatSettingsHolder/#fun-box-width-usize-val", 
            "text": "", 
            "title": "fun box  width(): USize val"
        }, 
        {
            "location": "/builtin-FormatSettingsInt/", 
            "text": "type builtin/FormatSettingsInt is \nFormatSettingsHolder\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val), \nFormatDefaultNumber\n val] ref\n\n\nFormat holder for integers.", 
            "title": "type FormatSettingsInt"
        }, 
        {
            "location": "/builtin-FormatSettingsInt/#type-builtinformatsettingsint-is-formatsettingsholder91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val-formatdefaultnumber-val93-ref", 
            "text": "Format holder for integers.", 
            "title": "type builtin/FormatSettingsInt is FormatSettingsHolder[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val), FormatDefaultNumber val] ref"
        }, 
        {
            "location": "/builtin-FormatSpec/", 
            "text": "trait builtin/FormatSpec\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.", 
            "title": "trait FormatSpec"
        }, 
        {
            "location": "/builtin-FormatSpec/#trait-builtinformatspec", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "trait builtin/FormatSpec"
        }, 
        {
            "location": "/builtin-FormatUTF32/", 
            "text": "primitive builtin/FormatUTF32 is \nFormatSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFormatUTF32\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFormatUTF32\n val): \nBool\n val", 
            "title": "primitive FormatUTF32"
        }, 
        {
            "location": "/builtin-FormatUTF32/#primitive-builtinformatutf32-is-formatspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/FormatUTF32 is FormatSpec val"
        }, 
        {
            "location": "/builtin-FormatUTF32/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FormatUTF32/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-FormatUTF32/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FormatUTF32/#fun-box-eqthat-formatutf32-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FormatUTF32 val): Bool val"
        }, 
        {
            "location": "/builtin-FormatUTF32/#fun-box-nethat-formatutf32-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FormatUTF32 val): Bool val"
        }, 
        {
            "location": "/builtin-Greater/", 
            "text": "primitive builtin/Greater is \nEquatable\n[((\nLess\n val | \nEqual\n val) | \nGreater\n val)] ref\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nfun box  \nne\n(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^", 
            "title": "primitive Greater"
        }, 
        {
            "location": "/builtin-Greater/#primitive-builtingreater-is-equatable91less-val-equal-val-greater-val93-ref", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/Greater is Equatable[((Less val | Equal val) | Greater val)] ref"
        }, 
        {
            "location": "/builtin-Greater/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Greater/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-Greater/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Greater/#fun-box-eqthat-less-val-equal-val-greater-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: ((Less val | Equal val) | Greater val)): Bool val"
        }, 
        {
            "location": "/builtin-Greater/#fun-box-nethat-less-val-equal-val-greater-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: ((Less val | Equal val) | Greater val)): Bool val"
        }, 
        {
            "location": "/builtin-Greater/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-prefixdefault-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[FormatDefault val, PrefixDefault val] box): String iso^"
        }, 
        {
            "location": "/builtin-HasEq/", 
            "text": "interface builtin/HasEq[A: A]\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: box-\nA): \nBool\n val", 
            "title": "interface HasEq"
        }, 
        {
            "location": "/builtin-HasEq/#interface-builtinhaseq91a-a93", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "interface builtin/HasEq[A: A]"
        }, 
        {
            "location": "/builtin-HasEq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-HasEq/#fun-box-eqthat-box-a-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: box-&gt;A): Bool val"
        }, 
        {
            "location": "/builtin-I128/", 
            "text": "primitive builtin/I128 is \n_SignedInteger\n[\nI128\n val, \nU128\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nI128\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nU128\n val\n\n\nfun box  \nadd\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \nbitwidth\n(): \nI128\n val\n\n\nfun box  \nbswap\n(): \nI128\n val\n\n\nfun box  \nclz\n(): \nI128\n val\n\n\nfun box  \ncompare\n(that: \nI128\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nI128\n val\n\n\nfun box  \ndiv\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \ndivmod\n(y: \nI128\n val): (\nI128\n val , \nI128\n val)\n\n\nfun box  \neq\n(y: \nI128\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nI128\n val\n\n\nfun box  \nge\n(y: \nI128\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nI128\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nI128\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nI128\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nI128\n val): \nI128\n val\n\n\nfun tag  \nmax_value\n(): \nI128\n val\n\n\nfun box  \nmin\n(y: \nI128\n val): \nI128\n val\n\n\nfun tag  \nmin_value\n(): \nI128\n val\n\n\nfun box  \nmod\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \nmul\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \nne\n(y: \nI128\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nI128\n val\n\n\nfun box  \nop_and\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \nop_not\n(): \nI128\n val\n\n\nfun box  \nop_or\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \nop_xor\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \npopcount\n(): \nI128\n val\n\n\nfun box  \nrotl\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \nrotr\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \nshl\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \nshr\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nI128\n val): \nI128\n val\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive I128"
        }, 
        {
            "location": "/builtin-I128/#primitive-builtini128-is-_signedinteger91i128-val-u128-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/I128 is _SignedInteger[I128 val, U128 val] val"
        }, 
        {
            "location": "/builtin-I128/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-I128/#new-createoptional-value-i128-val", 
            "text": "", 
            "title": "new create(optional value: I128 val)"
        }, 
        {
            "location": "/builtin-I128/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-I128/#fun-box-abs-u128-val", 
            "text": "", 
            "title": "fun box  abs(): U128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-addy-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  add(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-bitwidth-i128-val", 
            "text": "", 
            "title": "fun box  bitwidth(): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-bswap-i128-val", 
            "text": "", 
            "title": "fun box  bswap(): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-clz-i128-val", 
            "text": "", 
            "title": "fun box  clz(): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-comparethat-i128-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: I128 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-I128/#fun-box-ctz-i128-val", 
            "text": "", 
            "title": "fun box  ctz(): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-divy-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  div(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-divmody-i128-val-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  divmod(y: I128 val): (I128 val , I128 val)"
        }, 
        {
            "location": "/builtin-I128/#fun-box-eqy-i128-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: I128 val): Bool val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-I128/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-i128-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-gey-i128-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: I128 val): Bool val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-gty-i128-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: I128 val): Bool val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-ley-i128-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: I128 val): Bool val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-lty-i128-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: I128 val): Bool val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-maxy-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  max(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-tag-max_value-i128-val", 
            "text": "", 
            "title": "fun tag  max_value(): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-miny-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  min(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-tag-min_value-i128-val", 
            "text": "", 
            "title": "fun tag  min_value(): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-mody-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  mod(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-muly-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  mul(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-ney-i128-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: I128 val): Bool val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-neg-i128-val", 
            "text": "", 
            "title": "fun box  neg(): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-op_andy-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  op_and(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-op_not-i128-val", 
            "text": "", 
            "title": "fun box  op_not(): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-op_ory-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  op_or(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-op_xory-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  op_xor(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-popcount-i128-val", 
            "text": "", 
            "title": "fun box  popcount(): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-rotly-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  rotl(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-rotry-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  rotr(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-shly-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  shl(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-shry-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  shr(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-I128/#fun-box-suby-i128-val-i128-val", 
            "text": "", 
            "title": "fun box  sub(y: I128 val): I128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-I128/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-I16/", 
            "text": "primitive builtin/I16 is \n_SignedInteger\n[\nI16\n val, \nU16\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nI16\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nU16\n val\n\n\nfun box  \nadd\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \naddc\n(y: \nI16\n val): (\nI16\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nI16\n val\n\n\nfun box  \nbswap\n(): \nI16\n val\n\n\nfun box  \nclz\n(): \nI16\n val\n\n\nfun box  \ncompare\n(that: \nI16\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nI16\n val\n\n\nfun box  \ndiv\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \ndivmod\n(y: \nI16\n val): (\nI16\n val , \nI16\n val)\n\n\nfun box  \neq\n(y: \nI16\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nI16\n val\n\n\nfun box  \nge\n(y: \nI16\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nI16\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nI16\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nI16\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nI16\n val): \nI16\n val\n\n\nfun tag  \nmax_value\n(): \nI16\n val\n\n\nfun box  \nmin\n(y: \nI16\n val): \nI16\n val\n\n\nfun tag  \nmin_value\n(): \nI16\n val\n\n\nfun box  \nmod\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \nmul\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \nmulc\n(y: \nI16\n val): (\nI16\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nI16\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nI16\n val\n\n\nfun box  \nop_and\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \nop_not\n(): \nI16\n val\n\n\nfun box  \nop_or\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \nop_xor\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \npopcount\n(): \nI16\n val\n\n\nfun box  \nrotl\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \nrotr\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \nshl\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \nshr\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nI16\n val): \nI16\n val\n\n\nfun box  \nsubc\n(y: \nI16\n val): (\nI16\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive I16"
        }, 
        {
            "location": "/builtin-I16/#primitive-builtini16-is-_signedinteger91i16-val-u16-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/I16 is _SignedInteger[I16 val, U16 val] val"
        }, 
        {
            "location": "/builtin-I16/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-I16/#new-createoptional-value-i16-val", 
            "text": "", 
            "title": "new create(optional value: I16 val)"
        }, 
        {
            "location": "/builtin-I16/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-I16/#fun-box-abs-u16-val", 
            "text": "", 
            "title": "fun box  abs(): U16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-addy-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  add(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-addcy-i16-val-i16-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: I16 val): (I16 val , Bool val)"
        }, 
        {
            "location": "/builtin-I16/#fun-box-bitwidth-i16-val", 
            "text": "", 
            "title": "fun box  bitwidth(): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-bswap-i16-val", 
            "text": "", 
            "title": "fun box  bswap(): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-clz-i16-val", 
            "text": "", 
            "title": "fun box  clz(): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-comparethat-i16-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: I16 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-I16/#fun-box-ctz-i16-val", 
            "text": "", 
            "title": "fun box  ctz(): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-divy-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  div(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-divmody-i16-val-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  divmod(y: I16 val): (I16 val , I16 val)"
        }, 
        {
            "location": "/builtin-I16/#fun-box-eqy-i16-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: I16 val): Bool val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-I16/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-i16-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-gey-i16-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: I16 val): Bool val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-gty-i16-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: I16 val): Bool val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-ley-i16-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: I16 val): Bool val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-lty-i16-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: I16 val): Bool val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-maxy-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  max(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-tag-max_value-i16-val", 
            "text": "", 
            "title": "fun tag  max_value(): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-miny-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  min(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-tag-min_value-i16-val", 
            "text": "", 
            "title": "fun tag  min_value(): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-mody-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  mod(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-muly-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  mul(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-mulcy-i16-val-i16-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: I16 val): (I16 val , Bool val)"
        }, 
        {
            "location": "/builtin-I16/#fun-box-ney-i16-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: I16 val): Bool val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-neg-i16-val", 
            "text": "", 
            "title": "fun box  neg(): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-op_andy-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  op_and(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-op_not-i16-val", 
            "text": "", 
            "title": "fun box  op_not(): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-op_ory-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  op_or(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-op_xory-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  op_xor(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-popcount-i16-val", 
            "text": "", 
            "title": "fun box  popcount(): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-rotly-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  rotl(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-rotry-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  rotr(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-shly-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  shl(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-shry-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  shr(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-I16/#fun-box-suby-i16-val-i16-val", 
            "text": "", 
            "title": "fun box  sub(y: I16 val): I16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-subcy-i16-val-i16-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: I16 val): (I16 val , Bool val)"
        }, 
        {
            "location": "/builtin-I16/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-I16/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-I32/", 
            "text": "primitive builtin/I32 is \n_SignedInteger\n[\nI32\n val, \nU32\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nI32\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nU32\n val\n\n\nfun box  \nadd\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \naddc\n(y: \nI32\n val): (\nI32\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nI32\n val\n\n\nfun box  \nbswap\n(): \nI32\n val\n\n\nfun box  \nclz\n(): \nI32\n val\n\n\nfun box  \ncompare\n(that: \nI32\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nI32\n val\n\n\nfun box  \ndiv\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \ndivmod\n(y: \nI32\n val): (\nI32\n val , \nI32\n val)\n\n\nfun box  \neq\n(y: \nI32\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nI32\n val\n\n\nfun box  \nge\n(y: \nI32\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nI32\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nI32\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nI32\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nI32\n val): \nI32\n val\n\n\nfun tag  \nmax_value\n(): \nI32\n val\n\n\nfun box  \nmin\n(y: \nI32\n val): \nI32\n val\n\n\nfun tag  \nmin_value\n(): \nI32\n val\n\n\nfun box  \nmod\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \nmul\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \nmulc\n(y: \nI32\n val): (\nI32\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nI32\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nI32\n val\n\n\nfun box  \nop_and\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \nop_not\n(): \nI32\n val\n\n\nfun box  \nop_or\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \nop_xor\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \npopcount\n(): \nI32\n val\n\n\nfun box  \nrotl\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \nrotr\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \nshl\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \nshr\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nI32\n val): \nI32\n val\n\n\nfun box  \nsubc\n(y: \nI32\n val): (\nI32\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive I32"
        }, 
        {
            "location": "/builtin-I32/#primitive-builtini32-is-_signedinteger91i32-val-u32-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/I32 is _SignedInteger[I32 val, U32 val] val"
        }, 
        {
            "location": "/builtin-I32/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-I32/#new-createoptional-value-i32-val", 
            "text": "", 
            "title": "new create(optional value: I32 val)"
        }, 
        {
            "location": "/builtin-I32/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-I32/#fun-box-abs-u32-val", 
            "text": "", 
            "title": "fun box  abs(): U32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-addy-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  add(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-addcy-i32-val-i32-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: I32 val): (I32 val , Bool val)"
        }, 
        {
            "location": "/builtin-I32/#fun-box-bitwidth-i32-val", 
            "text": "", 
            "title": "fun box  bitwidth(): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-bswap-i32-val", 
            "text": "", 
            "title": "fun box  bswap(): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-clz-i32-val", 
            "text": "", 
            "title": "fun box  clz(): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-comparethat-i32-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: I32 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-I32/#fun-box-ctz-i32-val", 
            "text": "", 
            "title": "fun box  ctz(): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-divy-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  div(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-divmody-i32-val-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  divmod(y: I32 val): (I32 val , I32 val)"
        }, 
        {
            "location": "/builtin-I32/#fun-box-eqy-i32-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: I32 val): Bool val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-I32/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-i32-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-gey-i32-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: I32 val): Bool val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-gty-i32-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: I32 val): Bool val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-ley-i32-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: I32 val): Bool val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-lty-i32-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: I32 val): Bool val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-maxy-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  max(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-tag-max_value-i32-val", 
            "text": "", 
            "title": "fun tag  max_value(): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-miny-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  min(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-tag-min_value-i32-val", 
            "text": "", 
            "title": "fun tag  min_value(): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-mody-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  mod(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-muly-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  mul(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-mulcy-i32-val-i32-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: I32 val): (I32 val , Bool val)"
        }, 
        {
            "location": "/builtin-I32/#fun-box-ney-i32-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: I32 val): Bool val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-neg-i32-val", 
            "text": "", 
            "title": "fun box  neg(): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-op_andy-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  op_and(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-op_not-i32-val", 
            "text": "", 
            "title": "fun box  op_not(): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-op_ory-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  op_or(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-op_xory-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  op_xor(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-popcount-i32-val", 
            "text": "", 
            "title": "fun box  popcount(): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-rotly-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  rotl(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-rotry-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  rotr(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-shly-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  shl(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-shry-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  shr(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-I32/#fun-box-suby-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  sub(y: I32 val): I32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-subcy-i32-val-i32-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: I32 val): (I32 val , Bool val)"
        }, 
        {
            "location": "/builtin-I32/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-I32/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-I64/", 
            "text": "primitive builtin/I64 is \n_SignedInteger\n[\nI64\n val, \nU64\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nI64\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nU64\n val\n\n\nfun box  \nadd\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \naddc\n(y: \nI64\n val): (\nI64\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nI64\n val\n\n\nfun box  \nbswap\n(): \nI64\n val\n\n\nfun box  \nclz\n(): \nI64\n val\n\n\nfun box  \ncompare\n(that: \nI64\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nI64\n val\n\n\nfun box  \ndiv\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \ndivmod\n(y: \nI64\n val): (\nI64\n val , \nI64\n val)\n\n\nfun box  \neq\n(y: \nI64\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nI64\n val\n\n\nfun box  \nge\n(y: \nI64\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nI64\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nI64\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nI64\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nI64\n val): \nI64\n val\n\n\nfun tag  \nmax_value\n(): \nI64\n val\n\n\nfun box  \nmin\n(y: \nI64\n val): \nI64\n val\n\n\nfun tag  \nmin_value\n(): \nI64\n val\n\n\nfun box  \nmod\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \nmul\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \nmulc\n(y: \nI64\n val): (\nI64\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nI64\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nI64\n val\n\n\nfun box  \nop_and\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \nop_not\n(): \nI64\n val\n\n\nfun box  \nop_or\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \nop_xor\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \npopcount\n(): \nI64\n val\n\n\nfun box  \nrotl\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \nrotr\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \nshl\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \nshr\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nI64\n val): \nI64\n val\n\n\nfun box  \nsubc\n(y: \nI64\n val): (\nI64\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive I64"
        }, 
        {
            "location": "/builtin-I64/#primitive-builtini64-is-_signedinteger91i64-val-u64-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/I64 is _SignedInteger[I64 val, U64 val] val"
        }, 
        {
            "location": "/builtin-I64/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-I64/#new-createoptional-value-i64-val", 
            "text": "", 
            "title": "new create(optional value: I64 val)"
        }, 
        {
            "location": "/builtin-I64/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-I64/#fun-box-abs-u64-val", 
            "text": "", 
            "title": "fun box  abs(): U64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-addy-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  add(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-addcy-i64-val-i64-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: I64 val): (I64 val , Bool val)"
        }, 
        {
            "location": "/builtin-I64/#fun-box-bitwidth-i64-val", 
            "text": "", 
            "title": "fun box  bitwidth(): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-bswap-i64-val", 
            "text": "", 
            "title": "fun box  bswap(): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-clz-i64-val", 
            "text": "", 
            "title": "fun box  clz(): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-comparethat-i64-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: I64 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-I64/#fun-box-ctz-i64-val", 
            "text": "", 
            "title": "fun box  ctz(): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-divy-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  div(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-divmody-i64-val-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  divmod(y: I64 val): (I64 val , I64 val)"
        }, 
        {
            "location": "/builtin-I64/#fun-box-eqy-i64-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: I64 val): Bool val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-i64-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-gey-i64-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: I64 val): Bool val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-gty-i64-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: I64 val): Bool val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-ley-i64-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: I64 val): Bool val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-lty-i64-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: I64 val): Bool val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-maxy-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  max(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-tag-max_value-i64-val", 
            "text": "", 
            "title": "fun tag  max_value(): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-miny-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  min(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-tag-min_value-i64-val", 
            "text": "", 
            "title": "fun tag  min_value(): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-mody-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  mod(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-muly-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  mul(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-mulcy-i64-val-i64-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: I64 val): (I64 val , Bool val)"
        }, 
        {
            "location": "/builtin-I64/#fun-box-ney-i64-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: I64 val): Bool val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-neg-i64-val", 
            "text": "", 
            "title": "fun box  neg(): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-op_andy-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  op_and(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-op_not-i64-val", 
            "text": "", 
            "title": "fun box  op_not(): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-op_ory-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  op_or(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-op_xory-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  op_xor(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-popcount-i64-val", 
            "text": "", 
            "title": "fun box  popcount(): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-rotly-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  rotl(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-rotry-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  rotr(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-shly-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  shl(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-shry-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  shr(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-I64/#fun-box-suby-i64-val-i64-val", 
            "text": "", 
            "title": "fun box  sub(y: I64 val): I64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-subcy-i64-val-i64-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: I64 val): (I64 val , Bool val)"
        }, 
        {
            "location": "/builtin-I64/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-I64/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-I8/", 
            "text": "primitive builtin/I8 is \n_SignedInteger\n[\nI8\n val, \nU8\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nI8\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nU8\n val\n\n\nfun box  \nadd\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \naddc\n(y: \nI8\n val): (\nI8\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nI8\n val\n\n\nfun box  \nbswap\n(): \nI8\n val\n\n\nfun box  \nclz\n(): \nI8\n val\n\n\nfun box  \ncompare\n(that: \nI8\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nI8\n val\n\n\nfun box  \ndiv\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \ndivmod\n(y: \nI8\n val): (\nI8\n val , \nI8\n val)\n\n\nfun box  \neq\n(y: \nI8\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nI8\n val\n\n\nfun box  \nge\n(y: \nI8\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nI8\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nI8\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nI8\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nI8\n val): \nI8\n val\n\n\nfun tag  \nmax_value\n(): \nI8\n val\n\n\nfun box  \nmin\n(y: \nI8\n val): \nI8\n val\n\n\nfun tag  \nmin_value\n(): \nI8\n val\n\n\nfun box  \nmod\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \nmul\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \nmulc\n(y: \nI8\n val): (\nI8\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nI8\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nI8\n val\n\n\nfun box  \nop_and\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \nop_not\n(): \nI8\n val\n\n\nfun box  \nop_or\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \nop_xor\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \npopcount\n(): \nI8\n val\n\n\nfun box  \nrotl\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \nrotr\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \nshl\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \nshr\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nI8\n val): \nI8\n val\n\n\nfun box  \nsubc\n(y: \nI8\n val): (\nI8\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive I8"
        }, 
        {
            "location": "/builtin-I8/#primitive-builtini8-is-_signedinteger91i8-val-u8-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/I8 is _SignedInteger[I8 val, U8 val] val"
        }, 
        {
            "location": "/builtin-I8/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-I8/#new-createoptional-value-i8-val", 
            "text": "", 
            "title": "new create(optional value: I8 val)"
        }, 
        {
            "location": "/builtin-I8/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-I8/#fun-box-abs-u8-val", 
            "text": "", 
            "title": "fun box  abs(): U8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-addy-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  add(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-addcy-i8-val-i8-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: I8 val): (I8 val , Bool val)"
        }, 
        {
            "location": "/builtin-I8/#fun-box-bitwidth-i8-val", 
            "text": "", 
            "title": "fun box  bitwidth(): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-bswap-i8-val", 
            "text": "", 
            "title": "fun box  bswap(): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-clz-i8-val", 
            "text": "", 
            "title": "fun box  clz(): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-comparethat-i8-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: I8 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-I8/#fun-box-ctz-i8-val", 
            "text": "", 
            "title": "fun box  ctz(): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-divy-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  div(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-divmody-i8-val-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  divmod(y: I8 val): (I8 val , I8 val)"
        }, 
        {
            "location": "/builtin-I8/#fun-box-eqy-i8-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: I8 val): Bool val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-I8/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-i8-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-gey-i8-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: I8 val): Bool val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-gty-i8-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: I8 val): Bool val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-ley-i8-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: I8 val): Bool val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-lty-i8-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: I8 val): Bool val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-maxy-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  max(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-tag-max_value-i8-val", 
            "text": "", 
            "title": "fun tag  max_value(): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-miny-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  min(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-tag-min_value-i8-val", 
            "text": "", 
            "title": "fun tag  min_value(): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-mody-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  mod(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-muly-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  mul(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-mulcy-i8-val-i8-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: I8 val): (I8 val , Bool val)"
        }, 
        {
            "location": "/builtin-I8/#fun-box-ney-i8-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: I8 val): Bool val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-neg-i8-val", 
            "text": "", 
            "title": "fun box  neg(): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-op_andy-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  op_and(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-op_not-i8-val", 
            "text": "", 
            "title": "fun box  op_not(): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-op_ory-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  op_or(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-op_xory-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  op_xor(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-popcount-i8-val", 
            "text": "", 
            "title": "fun box  popcount(): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-rotly-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  rotl(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-rotry-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  rotr(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-shly-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  shl(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-shry-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  shr(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-I8/#fun-box-suby-i8-val-i8-val", 
            "text": "", 
            "title": "fun box  sub(y: I8 val): I8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-subcy-i8-val-i8-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: I8 val): (I8 val , Bool val)"
        }, 
        {
            "location": "/builtin-I8/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-I8/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-ILong/", 
            "text": "primitive builtin/ILong is \n_SignedInteger\n[\nILong\n val, \nULong\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nILong\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nULong\n val\n\n\nfun box  \nadd\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \naddc\n(y: \nILong\n val): (\nILong\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nILong\n val\n\n\nfun box  \nbswap\n(): \nILong\n val\n\n\nfun box  \nclz\n(): \nILong\n val\n\n\nfun box  \ncompare\n(that: \nILong\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nILong\n val\n\n\nfun box  \ndiv\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \ndivmod\n(y: \nILong\n val): (\nILong\n val , \nILong\n val)\n\n\nfun box  \neq\n(y: \nILong\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nILong\n val\n\n\nfun box  \nge\n(y: \nILong\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nILong\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nILong\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nILong\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nILong\n val): \nILong\n val\n\n\nfun tag  \nmax_value\n(): \nILong\n val\n\n\nfun box  \nmin\n(y: \nILong\n val): \nILong\n val\n\n\nfun tag  \nmin_value\n(): \nILong\n val\n\n\nfun box  \nmod\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \nmul\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \nmulc\n(y: \nILong\n val): (\nILong\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nILong\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nILong\n val\n\n\nfun box  \nop_and\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \nop_not\n(): \nILong\n val\n\n\nfun box  \nop_or\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \nop_xor\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \npopcount\n(): \nILong\n val\n\n\nfun box  \nrotl\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \nrotr\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \nshl\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \nshr\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nILong\n val): \nILong\n val\n\n\nfun box  \nsubc\n(y: \nILong\n val): (\nILong\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive ILong"
        }, 
        {
            "location": "/builtin-ILong/#primitive-builtinilong-is-_signedinteger91ilong-val-ulong-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/ILong is _SignedInteger[ILong val, ULong val] val"
        }, 
        {
            "location": "/builtin-ILong/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ILong/#new-createoptional-value-ilong-val", 
            "text": "", 
            "title": "new create(optional value: ILong val)"
        }, 
        {
            "location": "/builtin-ILong/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-abs-ulong-val", 
            "text": "", 
            "title": "fun box  abs(): ULong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-addy-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  add(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-addcy-ilong-val-ilong-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: ILong val): (ILong val , Bool val)"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-bitwidth-ilong-val", 
            "text": "", 
            "title": "fun box  bitwidth(): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-bswap-ilong-val", 
            "text": "", 
            "title": "fun box  bswap(): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-clz-ilong-val", 
            "text": "", 
            "title": "fun box  clz(): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-comparethat-ilong-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: ILong val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-ctz-ilong-val", 
            "text": "", 
            "title": "fun box  ctz(): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-divy-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  div(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-divmody-ilong-val-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  divmod(y: ILong val): (ILong val , ILong val)"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-eqy-ilong-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: ILong val): Bool val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-ilong-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-gey-ilong-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: ILong val): Bool val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-gty-ilong-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: ILong val): Bool val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-ley-ilong-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: ILong val): Bool val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-lty-ilong-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: ILong val): Bool val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-maxy-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  max(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-tag-max_value-ilong-val", 
            "text": "", 
            "title": "fun tag  max_value(): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-miny-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  min(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-tag-min_value-ilong-val", 
            "text": "", 
            "title": "fun tag  min_value(): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-mody-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  mod(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-muly-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  mul(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-mulcy-ilong-val-ilong-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: ILong val): (ILong val , Bool val)"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-ney-ilong-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: ILong val): Bool val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-neg-ilong-val", 
            "text": "", 
            "title": "fun box  neg(): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-op_andy-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  op_and(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-op_not-ilong-val", 
            "text": "", 
            "title": "fun box  op_not(): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-op_ory-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  op_or(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-op_xory-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  op_xor(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-popcount-ilong-val", 
            "text": "", 
            "title": "fun box  popcount(): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-rotly-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  rotl(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-rotry-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  rotr(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-shly-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  shl(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-shry-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  shr(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-suby-ilong-val-ilong-val", 
            "text": "", 
            "title": "fun box  sub(y: ILong val): ILong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-subcy-ilong-val-ilong-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: ILong val): (ILong val , Bool val)"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-ILong/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-ISize/", 
            "text": "primitive builtin/ISize is \n_SignedInteger\n[\nISize\n val, \nUSize\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nISize\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nUSize\n val\n\n\nfun box  \nadd\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \naddc\n(y: \nISize\n val): (\nISize\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nISize\n val\n\n\nfun box  \nbswap\n(): \nISize\n val\n\n\nfun box  \nclz\n(): \nISize\n val\n\n\nfun box  \ncompare\n(that: \nISize\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nISize\n val\n\n\nfun box  \ndiv\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \ndivmod\n(y: \nISize\n val): (\nISize\n val , \nISize\n val)\n\n\nfun box  \neq\n(y: \nISize\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nISize\n val\n\n\nfun box  \nge\n(y: \nISize\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nISize\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nISize\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nISize\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nISize\n val): \nISize\n val\n\n\nfun tag  \nmax_value\n(): \nISize\n val\n\n\nfun box  \nmin\n(y: \nISize\n val): \nISize\n val\n\n\nfun tag  \nmin_value\n(): \nISize\n val\n\n\nfun box  \nmod\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \nmul\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \nmulc\n(y: \nISize\n val): (\nISize\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nISize\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nISize\n val\n\n\nfun box  \nop_and\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \nop_not\n(): \nISize\n val\n\n\nfun box  \nop_or\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \nop_xor\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \npopcount\n(): \nISize\n val\n\n\nfun box  \nrotl\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \nrotr\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \nshl\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \nshr\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nISize\n val): \nISize\n val\n\n\nfun box  \nsubc\n(y: \nISize\n val): (\nISize\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive ISize"
        }, 
        {
            "location": "/builtin-ISize/#primitive-builtinisize-is-_signedinteger91isize-val-usize-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/ISize is _SignedInteger[ISize val, USize val] val"
        }, 
        {
            "location": "/builtin-ISize/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ISize/#new-createoptional-value-isize-val", 
            "text": "", 
            "title": "new create(optional value: ISize val)"
        }, 
        {
            "location": "/builtin-ISize/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-abs-usize-val", 
            "text": "", 
            "title": "fun box  abs(): USize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-addy-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  add(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-addcy-isize-val-isize-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: ISize val): (ISize val , Bool val)"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-bitwidth-isize-val", 
            "text": "", 
            "title": "fun box  bitwidth(): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-bswap-isize-val", 
            "text": "", 
            "title": "fun box  bswap(): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-clz-isize-val", 
            "text": "", 
            "title": "fun box  clz(): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-comparethat-isize-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: ISize val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-ctz-isize-val", 
            "text": "", 
            "title": "fun box  ctz(): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-divy-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  div(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-divmody-isize-val-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  divmod(y: ISize val): (ISize val , ISize val)"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-eqy-isize-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: ISize val): Bool val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-isize-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-gey-isize-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: ISize val): Bool val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-gty-isize-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: ISize val): Bool val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-ley-isize-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: ISize val): Bool val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-lty-isize-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: ISize val): Bool val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-maxy-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  max(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-tag-max_value-isize-val", 
            "text": "", 
            "title": "fun tag  max_value(): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-miny-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  min(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-tag-min_value-isize-val", 
            "text": "", 
            "title": "fun tag  min_value(): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-mody-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  mod(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-muly-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  mul(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-mulcy-isize-val-isize-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: ISize val): (ISize val , Bool val)"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-ney-isize-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: ISize val): Bool val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-neg-isize-val", 
            "text": "", 
            "title": "fun box  neg(): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-op_andy-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  op_and(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-op_not-isize-val", 
            "text": "", 
            "title": "fun box  op_not(): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-op_ory-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  op_or(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-op_xory-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  op_xor(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-popcount-isize-val", 
            "text": "", 
            "title": "fun box  popcount(): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-rotly-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  rotl(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-rotry-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  rotr(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-shly-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  shl(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-shry-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  shr(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-suby-isize-val-isize-val", 
            "text": "", 
            "title": "fun box  sub(y: ISize val): ISize val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-subcy-isize-val-isize-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: ISize val): (ISize val , Bool val)"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-ISize/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-Integer/", 
            "text": "trait builtin/Integer[A: \nInteger\n[A val] val] is \nReal\n[A val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(value: A val)\n\n\nPublic Functions\n\n\nfun box  \nadd\n(y: A val): A val\n\n\nfun box  \nbitwidth\n(): A val\n\n\nfun box  \nbswap\n(): A val\n\n\nfun box  \nclz\n(): A val\n\n\nfun box  \ncompare\n(that: A val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): A val\n\n\nfun box  \ndiv\n(y: A val): A val\n\n\nfun box  \ndivmod\n(y: A val): (A val , A val)\n\n\nfun box  \neq\n(y: A val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): A val\n\n\nfun box  \nge\n(y: A val): \nBool\n val\n\n\nfun box  \ngt\n(y: A val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: A val): \nBool\n val\n\n\nfun box  \nlt\n(y: A val): \nBool\n val\n\n\nfun box  \nmax\n(y: A val): A val\n\n\nfun tag  \nmax_value\n(): A val\n\n\nfun box  \nmin\n(y: A val): A val\n\n\nfun tag  \nmin_value\n(): A val\n\n\nfun box  \nmod\n(y: A val): A val\n\n\nfun box  \nmul\n(y: A val): A val\n\n\nfun box  \nne\n(y: A val): \nBool\n val\n\n\nfun box  \nneg\n(): A val\n\n\nfun box  \nop_and\n(y: A val): A val\n\n\nfun box  \nop_not\n(): A val\n\n\nfun box  \nop_or\n(y: A val): A val\n\n\nfun box  \nop_xor\n(y: A val): A val\n\n\nfun box  \npopcount\n(): A val\n\n\nfun box  \nrotl\n(y: A val): A val\n\n\nfun box  \nrotr\n(y: A val): A val\n\n\nfun box  \nshl\n(y: A val): A val\n\n\nfun box  \nshr\n(y: A val): A val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: A val): A val\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "trait Integer"
        }, 
        {
            "location": "/builtin-Integer/#trait-builtininteger91a-integer91a-val93-val93-is-real91a-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "trait builtin/Integer[A: Integer[A val] val] is Real[A val] val"
        }, 
        {
            "location": "/builtin-Integer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Integer/#new-createvalue-a-val", 
            "text": "", 
            "title": "new create(value: A val)"
        }, 
        {
            "location": "/builtin-Integer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-addy-a-val-a-val", 
            "text": "", 
            "title": "fun box  add(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-bitwidth-a-val", 
            "text": "", 
            "title": "fun box  bitwidth(): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-bswap-a-val", 
            "text": "", 
            "title": "fun box  bswap(): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-clz-a-val", 
            "text": "", 
            "title": "fun box  clz(): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-comparethat-a-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: A val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-ctz-a-val", 
            "text": "", 
            "title": "fun box  ctz(): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-divy-a-val-a-val", 
            "text": "", 
            "title": "fun box  div(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-divmody-a-val-a-val-a-val", 
            "text": "", 
            "title": "fun box  divmod(y: A val): (A val , A val)"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-eqy-a-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-tag-from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b-val93-val93a-b-val-a-val", 
            "text": "", 
            "title": "fun tag  from[B: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[B val] val)](a: B val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-gey-a-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-gty-a-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-ley-a-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-lty-a-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-maxy-a-val-a-val", 
            "text": "", 
            "title": "fun box  max(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-tag-max_value-a-val", 
            "text": "", 
            "title": "fun tag  max_value(): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-miny-a-val-a-val", 
            "text": "", 
            "title": "fun box  min(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-tag-min_value-a-val", 
            "text": "", 
            "title": "fun tag  min_value(): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-mody-a-val-a-val", 
            "text": "", 
            "title": "fun box  mod(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-muly-a-val-a-val", 
            "text": "", 
            "title": "fun box  mul(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-ney-a-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-neg-a-val", 
            "text": "", 
            "title": "fun box  neg(): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-op_andy-a-val-a-val", 
            "text": "", 
            "title": "fun box  op_and(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-op_not-a-val", 
            "text": "", 
            "title": "fun box  op_not(): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-op_ory-a-val-a-val", 
            "text": "", 
            "title": "fun box  op_or(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-op_xory-a-val-a-val", 
            "text": "", 
            "title": "fun box  op_xor(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-popcount-a-val", 
            "text": "", 
            "title": "fun box  popcount(): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-rotly-a-val-a-val", 
            "text": "", 
            "title": "fun box  rotl(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-rotry-a-val-a-val", 
            "text": "", 
            "title": "fun box  rotr(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-shly-a-val-a-val", 
            "text": "", 
            "title": "fun box  shl(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-shry-a-val-a-val", 
            "text": "", 
            "title": "fun box  shr(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-prefixdefault-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[FormatDefault val, PrefixDefault val] box): String iso^"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-suby-a-val-a-val", 
            "text": "", 
            "title": "fun box  sub(y: A val): A val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-Integer/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-Iterator/", 
            "text": "interface builtin/Iterator[A: A]\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nPublic Functions\n\n\nfun ref  \nhas_next\n(): \nBool\n val\n\n\nfun ref  \nnext\n(): A ?", 
            "title": "interface Iterator"
        }, 
        {
            "location": "/builtin-Iterator/#interface-builtiniterator91a-a93", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "interface builtin/Iterator[A: A]"
        }, 
        {
            "location": "/builtin-Iterator/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Iterator/#fun-ref-has_next-bool-val", 
            "text": "", 
            "title": "fun ref  has_next(): Bool val"
        }, 
        {
            "location": "/builtin-Iterator/#fun-ref-next-a", 
            "text": "", 
            "title": "fun ref  next(): A ?"
        }, 
        {
            "location": "/builtin-Less/", 
            "text": "primitive builtin/Less is \nEquatable\n[((\nLess\n val | \nEqual\n val) | \nGreater\n val)] ref\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nfun box  \nne\n(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^", 
            "title": "primitive Less"
        }, 
        {
            "location": "/builtin-Less/#primitive-builtinless-is-equatable91less-val-equal-val-greater-val93-ref", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/Less is Equatable[((Less val | Equal val) | Greater val)] ref"
        }, 
        {
            "location": "/builtin-Less/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Less/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-Less/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Less/#fun-box-eqthat-less-val-equal-val-greater-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: ((Less val | Equal val) | Greater val)): Bool val"
        }, 
        {
            "location": "/builtin-Less/#fun-box-nethat-less-val-equal-val-greater-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: ((Less val | Equal val) | Greater val)): Bool val"
        }, 
        {
            "location": "/builtin-Less/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-prefixdefault-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[FormatDefault val, PrefixDefault val] box): String iso^"
        }, 
        {
            "location": "/builtin-MaybePointer/", 
            "text": "struct builtin/MaybePointer[A: A]\n\n\nDefault capability\n: \nref\n\n\nA MaybePointer[A] is used to encode a possibly-null type. It should\n\nonly\n be used for structs that need to be passed to and from the C FFI.\n\n\nAn optional type for anything that isn't a struct should be encoded as a\nunion type, for example (A | None).\n\n\nConstructors\n\n\nnew \ncreate\n(that: A)\n\n\nThis re-encodes the type of \nthat\n from A to MaybePointer[A], allowing\n\nthat\n to be assigned to a field or variable of type MaybePointer[A]. It\ndoesn't allocate a wrapper object: there is no containing object for \nthat\n.\n\n\nnew \nnone\n()\n\n\nThis returns a null pointer typed as a MaybePointer[A].\n\n\nPublic Functions\n\n\nfun box  \napply\n(): this-\nA ?\n\n\nThis re-encodes the type of \nthis\n from MaybePointer[A] to A, allowing\n\nthis\n to be assigned to a field of variable of type A. If \nthis\n is a null\npointer, an error is raised.\n\n\nfun box  \nis_none\n(): \nBool\n val\n\n\nReturns true if \nthis\n is null (ie apply would raise an error).", 
            "title": "struct MaybePointer"
        }, 
        {
            "location": "/builtin-MaybePointer/#struct-builtinmaybepointer91a-a93", 
            "text": "Default capability :  ref  A MaybePointer[A] is used to encode a possibly-null type. It should only  be used for structs that need to be passed to and from the C FFI.  An optional type for anything that isn't a struct should be encoded as a\nunion type, for example (A | None).", 
            "title": "struct builtin/MaybePointer[A: A]"
        }, 
        {
            "location": "/builtin-MaybePointer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-MaybePointer/#new-createthat-a", 
            "text": "This re-encodes the type of  that  from A to MaybePointer[A], allowing that  to be assigned to a field or variable of type MaybePointer[A]. It\ndoesn't allocate a wrapper object: there is no containing object for  that .", 
            "title": "new create(that: A)"
        }, 
        {
            "location": "/builtin-MaybePointer/#new-none", 
            "text": "This returns a null pointer typed as a MaybePointer[A].", 
            "title": "new none()"
        }, 
        {
            "location": "/builtin-MaybePointer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-MaybePointer/#fun-box-apply-this-a", 
            "text": "This re-encodes the type of  this  from MaybePointer[A] to A, allowing this  to be assigned to a field of variable of type A. If  this  is a null\npointer, an error is raised.", 
            "title": "fun box  apply(): this-&gt;A ?"
        }, 
        {
            "location": "/builtin-MaybePointer/#fun-box-is_none-bool-val", 
            "text": "Returns true if  this  is null (ie apply would raise an error).", 
            "title": "fun box  is_none(): Bool val"
        }, 
        {
            "location": "/builtin-None/", 
            "text": "primitive builtin/None is \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nNone\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nNone\n val): \nBool\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^", 
            "title": "primitive None"
        }, 
        {
            "location": "/builtin-None/#primitive-builtinnone-is-stringable91formatdefault-val-prefixdefault-val93-box", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/None is Stringable[FormatDefault val, PrefixDefault val] box"
        }, 
        {
            "location": "/builtin-None/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-None/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-None/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-None/#fun-box-eqthat-none-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: None val): Bool val"
        }, 
        {
            "location": "/builtin-None/#fun-box-nethat-none-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: None val): Bool val"
        }, 
        {
            "location": "/builtin-None/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-prefixdefault-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[FormatDefault val, PrefixDefault val] box): String iso^"
        }, 
        {
            "location": "/builtin-Number/", 
            "text": "type builtin/Number is ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val))\n\n\nNo doc string provided.", 
            "title": "type Number"
        }, 
        {
            "location": "/builtin-Number/#type-builtinnumber-is-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val", 
            "text": "No doc string provided.", 
            "title": "type builtin/Number is ((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val))"
        }, 
        {
            "location": "/builtin-OutStream/", 
            "text": "interface builtin/OutStream\n\n\nDefault capability\n: \ntag\n\n\nAsnychronous access to some output stream.\n\n\nPublic Behaviours\n\n\nbe \nprint\n(data: (\nString\n val | \nArray\n[\nU8\n val] val))\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe \nprintv\n(data: \nByteSeqIter\n val)\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe \nwrite\n(data: (\nString\n val | \nArray\n[\nU8\n val] val))\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe \nwritev\n(data: \nByteSeqIter\n val)\n\n\nWrite an iterable collection of ByteSeqs.", 
            "title": "interface OutStream"
        }, 
        {
            "location": "/builtin-OutStream/#interface-builtinoutstream", 
            "text": "Default capability :  tag  Asnychronous access to some output stream.", 
            "title": "interface builtin/OutStream"
        }, 
        {
            "location": "/builtin-OutStream/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/builtin-OutStream/#be-printdata-string-val-array91u8-val93-val", 
            "text": "Print some bytes and insert a newline afterwards.", 
            "title": "be print(data: (String val | Array[U8 val] val))"
        }, 
        {
            "location": "/builtin-OutStream/#be-printvdata-byteseqiter-val", 
            "text": "Print an iterable collection of ByteSeqs.", 
            "title": "be printv(data: ByteSeqIter val)"
        }, 
        {
            "location": "/builtin-OutStream/#be-writedata-string-val-array91u8-val93-val", 
            "text": "Print some bytes without inserting a newline afterwards.", 
            "title": "be write(data: (String val | Array[U8 val] val))"
        }, 
        {
            "location": "/builtin-OutStream/#be-writevdata-byteseqiter-val", 
            "text": "Write an iterable collection of ByteSeqs.", 
            "title": "be writev(data: ByteSeqIter val)"
        }, 
        {
            "location": "/builtin-Platform/", 
            "text": "primitive builtin/Platform\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \narm\n(): \nBool\n val\n\n\nfun box  \ndebug\n(): \nBool\n val\n\n\nfun box  \neq\n(that: \nPlatform\n val): \nBool\n val\n\n\nfun box  \nfreebsd\n(): \nBool\n val\n\n\nfun box  \nilp32\n(): \nBool\n val\n\n\nfun box  \nlinux\n(): \nBool\n val\n\n\nfun box  \nllp64\n(): \nBool\n val\n\n\nfun box  \nlp64\n(): \nBool\n val\n\n\nfun box  \nnative128\n(): \nBool\n val\n\n\nfun box  \nne\n(that: \nPlatform\n val): \nBool\n val\n\n\nfun box  \nosx\n(): \nBool\n val\n\n\nfun box  \nposix\n(): \nBool\n val\n\n\nfun box  \nwindows\n(): \nBool\n val\n\n\nfun box  \nx86\n(): \nBool\n val", 
            "title": "primitive Platform"
        }, 
        {
            "location": "/builtin-Platform/#primitive-builtinplatform", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/Platform"
        }, 
        {
            "location": "/builtin-Platform/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Platform/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-Platform/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-arm-bool-val", 
            "text": "", 
            "title": "fun box  arm(): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-debug-bool-val", 
            "text": "", 
            "title": "fun box  debug(): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-eqthat-platform-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Platform val): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-freebsd-bool-val", 
            "text": "", 
            "title": "fun box  freebsd(): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-ilp32-bool-val", 
            "text": "", 
            "title": "fun box  ilp32(): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-linux-bool-val", 
            "text": "", 
            "title": "fun box  linux(): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-llp64-bool-val", 
            "text": "", 
            "title": "fun box  llp64(): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-lp64-bool-val", 
            "text": "", 
            "title": "fun box  lp64(): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-native128-bool-val", 
            "text": "", 
            "title": "fun box  native128(): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-nethat-platform-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Platform val): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-osx-bool-val", 
            "text": "", 
            "title": "fun box  osx(): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-posix-bool-val", 
            "text": "", 
            "title": "fun box  posix(): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-windows-bool-val", 
            "text": "", 
            "title": "fun box  windows(): Bool val"
        }, 
        {
            "location": "/builtin-Platform/#fun-box-x86-bool-val", 
            "text": "", 
            "title": "fun box  x86(): Bool val"
        }, 
        {
            "location": "/builtin-Pointer/", 
            "text": "struct builtin/Pointer[A: A]\n\n\nDefault capability\n: \nref\n\n\nA Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\nincluded in a union or intersection, or be a subtype of any interface. Most\nfunctions on a Pointer[A] are private to maintain memory safety.\n\n\nConstructors\n\n\nnew \n_alloc\n(len: \nUSize\n val)\n\n\nSpace for len instances of A.\n\n\nnew \ncreate\n()\n\n\nA null pointer.\n\n\nPublic Functions\n\n\nfun tag  \neq\n(that: \nPointer\n[A] tag): \nBool\n val\n\n\nReturn true if this address is that address.\n\n\nfun tag  \nge\n(that: \nPointer\n[A] tag): \nBool\n val\n\n\nfun tag  \ngt\n(that: \nPointer\n[A] tag): \nBool\n val\n\n\nfun tag  \nhash\n(): \nU64\n val\n\n\nReturns a hash of the address.\n\n\nfun tag  \nis_null\n(): \nBool\n val\n\n\nReturn true for a null pointer, false for anything else.\n\n\nfun tag  \nle\n(that: \nPointer\n[A] tag): \nBool\n val\n\n\nfun tag  \nlt\n(that: \nPointer\n[A] tag): \nBool\n val\n\n\nReturn true if this address is less than that address.\n\n\nfun tag  \nne\n(that: \nPointer\n[A] tag): \nBool\n val\n\n\nfun tag  \nusize\n(): \nUSize\n val\n\n\nConvert the pointer into an integer.\n\n\nPrivate Functions\n\n\nfun box  \n_apply\n(i: \nUSize\n val): this-\nA\n\n\nRetrieve index i.\n\n\nfun box  \ncopy\nto\n(that: \nPointer\n[this-\nA!] ref, n: \nUSize\n val): this-\nPointer\n[A] ref\n\n\nCopy n elements from this to that.\n\n\nfun ref  \n_delete\n(n: \nUSize\n val, len: \nUSize\n val): A^\n\n\nDelete n elements from the head of pointer, compact remaining elements of\nthe underlying array. The array length before this should be n + len.\nReturns the first deleted element.\n\n\nfun ref  \n_insert\n(n: \nUSize\n val, len: \nUSize\n val): \nPointer\n[A] ref\n\n\nCreates space for n new elements at the head, moving following elements.\nThe array length before this should be len, and the available space should\nbe at least n + len.\n\n\nfun box  \n_offset\n(n: \nUSize\n val): this-\nPointer\n[A] ref\n\n\nReturn a pointer to the n-th element.\n\n\nfun ref  \n_realloc\n(len: \nUSize\n val): \nPointer\n[A] ref\n\n\nKeep the contents, but reserve space for len instances of A.\n\n\nfun tag  \n_unsafe\n(): \nPointer\n[A] ref\n\n\nUnsafe change in reference capability.\n\n\nfun ref  \n_update\n(i: \nUSize\n val, value: A!): A^\n\n\nSet index i and return the previous value.", 
            "title": "struct Pointer"
        }, 
        {
            "location": "/builtin-Pointer/#struct-builtinpointer91a-a93", 
            "text": "Default capability :  ref  A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\nincluded in a union or intersection, or be a subtype of any interface. Most\nfunctions on a Pointer[A] are private to maintain memory safety.", 
            "title": "struct builtin/Pointer[A: A]"
        }, 
        {
            "location": "/builtin-Pointer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Pointer/#new-_alloclen-usize-val", 
            "text": "Space for len instances of A.", 
            "title": "new _alloc(len: USize val)"
        }, 
        {
            "location": "/builtin-Pointer/#new-create", 
            "text": "A null pointer.", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-Pointer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Pointer/#fun-tag-eqthat-pointer91a93-tag-bool-val", 
            "text": "Return true if this address is that address.", 
            "title": "fun tag  eq(that: Pointer[A] tag): Bool val"
        }, 
        {
            "location": "/builtin-Pointer/#fun-tag-gethat-pointer91a93-tag-bool-val", 
            "text": "", 
            "title": "fun tag  ge(that: Pointer[A] tag): Bool val"
        }, 
        {
            "location": "/builtin-Pointer/#fun-tag-gtthat-pointer91a93-tag-bool-val", 
            "text": "", 
            "title": "fun tag  gt(that: Pointer[A] tag): Bool val"
        }, 
        {
            "location": "/builtin-Pointer/#fun-tag-hash-u64-val", 
            "text": "Returns a hash of the address.", 
            "title": "fun tag  hash(): U64 val"
        }, 
        {
            "location": "/builtin-Pointer/#fun-tag-is_null-bool-val", 
            "text": "Return true for a null pointer, false for anything else.", 
            "title": "fun tag  is_null(): Bool val"
        }, 
        {
            "location": "/builtin-Pointer/#fun-tag-lethat-pointer91a93-tag-bool-val", 
            "text": "", 
            "title": "fun tag  le(that: Pointer[A] tag): Bool val"
        }, 
        {
            "location": "/builtin-Pointer/#fun-tag-ltthat-pointer91a93-tag-bool-val", 
            "text": "Return true if this address is less than that address.", 
            "title": "fun tag  lt(that: Pointer[A] tag): Bool val"
        }, 
        {
            "location": "/builtin-Pointer/#fun-tag-nethat-pointer91a93-tag-bool-val", 
            "text": "", 
            "title": "fun tag  ne(that: Pointer[A] tag): Bool val"
        }, 
        {
            "location": "/builtin-Pointer/#fun-tag-usize-usize-val", 
            "text": "Convert the pointer into an integer.", 
            "title": "fun tag  usize(): USize val"
        }, 
        {
            "location": "/builtin-Pointer/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-Pointer/#fun-box-_applyi-usize-val-this-a", 
            "text": "Retrieve index i.", 
            "title": "fun box  _apply(i: USize val): this-&gt;A"
        }, 
        {
            "location": "/builtin-Pointer/#fun-box-copytothat-pointer91this-a93-ref-n-usize-val-this-pointer91a93-ref", 
            "text": "Copy n elements from this to that.", 
            "title": "fun box  copyto(that: Pointer[this-&gt;A!] ref, n: USize val): this-&gt;Pointer[A] ref"
        }, 
        {
            "location": "/builtin-Pointer/#fun-ref-_deleten-usize-val-len-usize-val-a", 
            "text": "Delete n elements from the head of pointer, compact remaining elements of\nthe underlying array. The array length before this should be n + len.\nReturns the first deleted element.", 
            "title": "fun ref  _delete(n: USize val, len: USize val): A^"
        }, 
        {
            "location": "/builtin-Pointer/#fun-ref-_insertn-usize-val-len-usize-val-pointer91a93-ref", 
            "text": "Creates space for n new elements at the head, moving following elements.\nThe array length before this should be len, and the available space should\nbe at least n + len.", 
            "title": "fun ref  _insert(n: USize val, len: USize val): Pointer[A] ref"
        }, 
        {
            "location": "/builtin-Pointer/#fun-box-_offsetn-usize-val-this-pointer91a93-ref", 
            "text": "Return a pointer to the n-th element.", 
            "title": "fun box  _offset(n: USize val): this-&gt;Pointer[A] ref"
        }, 
        {
            "location": "/builtin-Pointer/#fun-ref-_realloclen-usize-val-pointer91a93-ref", 
            "text": "Keep the contents, but reserve space for len instances of A.", 
            "title": "fun ref  _realloc(len: USize val): Pointer[A] ref"
        }, 
        {
            "location": "/builtin-Pointer/#fun-tag-_unsafe-pointer91a93-ref", 
            "text": "Unsafe change in reference capability.", 
            "title": "fun tag  _unsafe(): Pointer[A] ref"
        }, 
        {
            "location": "/builtin-Pointer/#fun-ref-_updatei-usize-val-value-a-a", 
            "text": "Set index i and return the previous value.", 
            "title": "fun ref  _update(i: USize val, value: A!): A^"
        }, 
        {
            "location": "/builtin-PrefixDefault/", 
            "text": "primitive builtin/PrefixDefault is \nPrefixSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nPrefixDefault\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nPrefixDefault\n val): \nBool\n val", 
            "title": "primitive PrefixDefault"
        }, 
        {
            "location": "/builtin-PrefixDefault/#primitive-builtinprefixdefault-is-prefixspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/PrefixDefault is PrefixSpec val"
        }, 
        {
            "location": "/builtin-PrefixDefault/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-PrefixDefault/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-PrefixDefault/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-PrefixDefault/#fun-box-eqthat-prefixdefault-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: PrefixDefault val): Bool val"
        }, 
        {
            "location": "/builtin-PrefixDefault/#fun-box-nethat-prefixdefault-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: PrefixDefault val): Bool val"
        }, 
        {
            "location": "/builtin-PrefixNumber/", 
            "text": "type builtin/PrefixNumber is ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)\n\n\nNo doc string provided.", 
            "title": "type PrefixNumber"
        }, 
        {
            "location": "/builtin-PrefixNumber/#type-builtinprefixnumber-is-prefixdefault-val-prefixspace-val-prefixsign-val", 
            "text": "No doc string provided.", 
            "title": "type builtin/PrefixNumber is ((PrefixDefault val | PrefixSpace val) | PrefixSign val)"
        }, 
        {
            "location": "/builtin-PrefixSign/", 
            "text": "primitive builtin/PrefixSign is \nPrefixSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nPrefixSign\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nPrefixSign\n val): \nBool\n val", 
            "title": "primitive PrefixSign"
        }, 
        {
            "location": "/builtin-PrefixSign/#primitive-builtinprefixsign-is-prefixspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/PrefixSign is PrefixSpec val"
        }, 
        {
            "location": "/builtin-PrefixSign/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-PrefixSign/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-PrefixSign/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-PrefixSign/#fun-box-eqthat-prefixsign-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: PrefixSign val): Bool val"
        }, 
        {
            "location": "/builtin-PrefixSign/#fun-box-nethat-prefixsign-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: PrefixSign val): Bool val"
        }, 
        {
            "location": "/builtin-PrefixSpace/", 
            "text": "primitive builtin/PrefixSpace is \nPrefixSpec\n val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nPrefixSpace\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nPrefixSpace\n val): \nBool\n val", 
            "title": "primitive PrefixSpace"
        }, 
        {
            "location": "/builtin-PrefixSpace/#primitive-builtinprefixspace-is-prefixspec-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/PrefixSpace is PrefixSpec val"
        }, 
        {
            "location": "/builtin-PrefixSpace/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-PrefixSpace/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-PrefixSpace/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-PrefixSpace/#fun-box-eqthat-prefixspace-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: PrefixSpace val): Bool val"
        }, 
        {
            "location": "/builtin-PrefixSpace/#fun-box-nethat-prefixspace-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: PrefixSpace val): Bool val"
        }, 
        {
            "location": "/builtin-PrefixSpec/", 
            "text": "trait builtin/PrefixSpec\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.", 
            "title": "trait PrefixSpec"
        }, 
        {
            "location": "/builtin-PrefixSpec/#trait-builtinprefixspec", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "trait builtin/PrefixSpec"
        }, 
        {
            "location": "/builtin-ReadElement/", 
            "text": "interface builtin/ReadElement[A: A]\n\n\nDefault capability\n: \nbox\n\n\nUsed to show that a ReadSeq can return an element of a specific unmodified\ntype.\n\n\nPublic Functions\n\n\nfun box  \napply\n(i: \nUSize\n val): A ?", 
            "title": "interface ReadElement"
        }, 
        {
            "location": "/builtin-ReadElement/#interface-builtinreadelement91a-a93", 
            "text": "Default capability :  box  Used to show that a ReadSeq can return an element of a specific unmodified\ntype.", 
            "title": "interface builtin/ReadElement[A: A]"
        }, 
        {
            "location": "/builtin-ReadElement/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ReadElement/#fun-box-applyi-usize-val-a", 
            "text": "", 
            "title": "fun box  apply(i: USize val): A ?"
        }, 
        {
            "location": "/builtin-ReadSeq/", 
            "text": "interface builtin/ReadSeq[A: A]\n\n\nDefault capability\n: \nbox\n\n\nThe readable interface of a sequence.\n\n\nPublic Functions\n\n\nfun box  \napply\n(i: \nUSize\n val): this-\nA ?\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns A^, not this-\nA.\n\n\nfun box  \nsize\n(): \nUSize\n val\n\n\nReturns the number of elements in the sequence.\n\n\nfun box  \nvalues\n(): \nIterator\n[this-\nA] ref^\n\n\nReturns an iterator over the elements of the sequence. Note that this\niterates over A^, not this-\nA.", 
            "title": "interface ReadSeq"
        }, 
        {
            "location": "/builtin-ReadSeq/#interface-builtinreadseq91a-a93", 
            "text": "Default capability :  box  The readable interface of a sequence.", 
            "title": "interface builtin/ReadSeq[A: A]"
        }, 
        {
            "location": "/builtin-ReadSeq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ReadSeq/#fun-box-applyi-usize-val-this-a", 
            "text": "Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns A^, not this- A.", 
            "title": "fun box  apply(i: USize val): this-&gt;A ?"
        }, 
        {
            "location": "/builtin-ReadSeq/#fun-box-size-usize-val", 
            "text": "Returns the number of elements in the sequence.", 
            "title": "fun box  size(): USize val"
        }, 
        {
            "location": "/builtin-ReadSeq/#fun-box-values-iterator91this-a93-ref", 
            "text": "Returns an iterator over the elements of the sequence. Note that this\niterates over A^, not this- A.", 
            "title": "fun box  values(): Iterator[this-&gt;A] ref^"
        }, 
        {
            "location": "/builtin-Real/", 
            "text": "trait builtin/Real[A: \nReal\n[A val] val] is \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box, \n_ArithmeticConvertible\n val, \nComparable\n[A val] ref\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(value: A val)\n\n\nPublic Functions\n\n\nfun box  \nadd\n(y: A val): A val\n\n\nfun box  \ncompare\n(that: A val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \ndiv\n(y: A val): A val\n\n\nfun box  \ndivmod\n(y: A val): (A val , A val)\n\n\nfun box  \neq\n(y: box-\nA val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): A val\n\n\nfun box  \nge\n(y: box-\nA val): \nBool\n val\n\n\nfun box  \ngt\n(y: box-\nA val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: box-\nA val): \nBool\n val\n\n\nfun box  \nlt\n(y: box-\nA val): \nBool\n val\n\n\nfun box  \nmax\n(y: A val): A val\n\n\nfun tag  \nmax_value\n(): A val\n\n\nfun box  \nmin\n(y: A val): A val\n\n\nfun tag  \nmin_value\n(): A val\n\n\nfun box  \nmod\n(y: A val): A val\n\n\nfun box  \nmul\n(y: A val): A val\n\n\nfun box  \nne\n(y: box-\nA val): \nBool\n val\n\n\nfun box  \nneg\n(): A val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: A val): A val\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "trait Real"
        }, 
        {
            "location": "/builtin-Real/#trait-builtinreal91a-real91a-val93-val93-is-stringable91formatdefault-val-prefixdefault-val93-box-_arithmeticconvertible-val-comparable91a-val93-ref", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "trait builtin/Real[A: Real[A val] val] is Stringable[FormatDefault val, PrefixDefault val] box, _ArithmeticConvertible val, Comparable[A val] ref"
        }, 
        {
            "location": "/builtin-Real/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Real/#new-createvalue-a-val", 
            "text": "", 
            "title": "new create(value: A val)"
        }, 
        {
            "location": "/builtin-Real/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Real/#fun-box-addy-a-val-a-val", 
            "text": "", 
            "title": "fun box  add(y: A val): A val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-comparethat-a-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: A val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-Real/#fun-box-divy-a-val-a-val", 
            "text": "", 
            "title": "fun box  div(y: A val): A val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-divmody-a-val-a-val-a-val", 
            "text": "", 
            "title": "fun box  divmod(y: A val): (A val , A val)"
        }, 
        {
            "location": "/builtin-Real/#fun-box-eqy-box-a-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: box-&gt;A val): Bool val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-Real/#fun-tag-from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b-val93-val93a-b-val-a-val", 
            "text": "", 
            "title": "fun tag  from[B: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[B val] val)](a: B val): A val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-gey-box-a-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: box-&gt;A val): Bool val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-gty-box-a-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: box-&gt;A val): Bool val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-ley-box-a-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: box-&gt;A val): Bool val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-lty-box-a-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: box-&gt;A val): Bool val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-maxy-a-val-a-val", 
            "text": "", 
            "title": "fun box  max(y: A val): A val"
        }, 
        {
            "location": "/builtin-Real/#fun-tag-max_value-a-val", 
            "text": "", 
            "title": "fun tag  max_value(): A val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-miny-a-val-a-val", 
            "text": "", 
            "title": "fun box  min(y: A val): A val"
        }, 
        {
            "location": "/builtin-Real/#fun-tag-min_value-a-val", 
            "text": "", 
            "title": "fun tag  min_value(): A val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-mody-a-val-a-val", 
            "text": "", 
            "title": "fun box  mod(y: A val): A val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-muly-a-val-a-val", 
            "text": "", 
            "title": "fun box  mul(y: A val): A val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-ney-box-a-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: box-&gt;A val): Bool val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-neg-a-val", 
            "text": "", 
            "title": "fun box  neg(): A val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-prefixdefault-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[FormatDefault val, PrefixDefault val] box): String iso^"
        }, 
        {
            "location": "/builtin-Real/#fun-box-suby-a-val-a-val", 
            "text": "", 
            "title": "fun box  sub(y: A val): A val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-Real/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-Seq/", 
            "text": "interface builtin/Seq[A: A]\n\n\nDefault capability\n: \nref\n\n\nA sequence of elements.\n\n\nConstructors\n\n\nnew \ncreate\n(optional len: \nUSize\n val)\n\n\nCreate a sequence, reserving space for len elements.\n\n\nPublic Functions\n\n\nfun ref  \nappend\n(seq: (\nReadSeq\n[A] box \n \nReadElement\n[A^] box), optional offset: \nUSize\n val, optional len: \nUSize\n val): \nSeq\n[A] ref^\n\n\nAdd len elements to the end of the list, starting from the given\noffset.\n\n\nfun box  \napply\n(i: \nUSize\n val): this-\nA ?\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds.\n\n\nfun ref  \nclear\n(): \nSeq\n[A] ref^\n\n\nRemoves all elements from the sequence.\n\n\nfun ref  \nconcat\n(iter: \nIterator\n[A^] ref, optional offset: \nUSize\n val, optional len: \nUSize\n val): \nSeq\n[A] ref^\n\n\nAdd len iterated elements to the end of the list, starting from the given\noffset.\n\n\nfun ref  \npop\n(): A^ ?\n\n\nRemoves an element from the end of the sequence.\n\n\nfun ref  \npush\n(value: A): \nSeq\n[A] ref^\n\n\nAdds an element to the end of the sequence.\n\n\nfun ref  \nreserve\n(len: \nUSize\n val): \nSeq\n[A] ref^\n\n\nReserve space for len elements.\n\n\nfun ref  \nshift\n(): A^ ?\n\n\nRemoves an element from the beginning of the sequence.\n\n\nfun box  \nsize\n(): \nUSize\n val\n\n\nReturns the number of elements in the sequence.\n\n\nfun ref  \ntruncate\n(len: \nUSize\n val): \nSeq\n[A] ref^\n\n\nTruncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.\n\n\nfun ref  \nunshift\n(value: A): \nSeq\n[A] ref^\n\n\nAdds an element to the beginning of the sequence.\n\n\nfun ref  \nupdate\n(i: \nUSize\n val, value: A): A^ ?\n\n\nReplaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.\n\n\nfun box  \nvalues\n(): \nIterator\n[this-\nA] ref^\n\n\nReturns an iterator over the elements of the sequence.", 
            "title": "interface Seq"
        }, 
        {
            "location": "/builtin-Seq/#interface-builtinseq91a-a93", 
            "text": "Default capability :  ref  A sequence of elements.", 
            "title": "interface builtin/Seq[A: A]"
        }, 
        {
            "location": "/builtin-Seq/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Seq/#new-createoptional-len-usize-val", 
            "text": "Create a sequence, reserving space for len elements.", 
            "title": "new create(optional len: USize val)"
        }, 
        {
            "location": "/builtin-Seq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Seq/#fun-ref-appendseq-readseq91a93-box-readelement91a93-box-optional-offset-usize-val-optional-len-usize-val-seq91a93-ref", 
            "text": "Add len elements to the end of the list, starting from the given\noffset.", 
            "title": "fun ref  append(seq: (ReadSeq[A] box &amp; ReadElement[A^] box), optional offset: USize val, optional len: USize val): Seq[A] ref^"
        }, 
        {
            "location": "/builtin-Seq/#fun-box-applyi-usize-val-this-a", 
            "text": "Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds.", 
            "title": "fun box  apply(i: USize val): this-&gt;A ?"
        }, 
        {
            "location": "/builtin-Seq/#fun-ref-clear-seq91a93-ref", 
            "text": "Removes all elements from the sequence.", 
            "title": "fun ref  clear(): Seq[A] ref^"
        }, 
        {
            "location": "/builtin-Seq/#fun-ref-concatiter-iterator91a93-ref-optional-offset-usize-val-optional-len-usize-val-seq91a93-ref", 
            "text": "Add len iterated elements to the end of the list, starting from the given\noffset.", 
            "title": "fun ref  concat(iter: Iterator[A^] ref, optional offset: USize val, optional len: USize val): Seq[A] ref^"
        }, 
        {
            "location": "/builtin-Seq/#fun-ref-pop-a", 
            "text": "Removes an element from the end of the sequence.", 
            "title": "fun ref  pop(): A^ ?"
        }, 
        {
            "location": "/builtin-Seq/#fun-ref-pushvalue-a-seq91a93-ref", 
            "text": "Adds an element to the end of the sequence.", 
            "title": "fun ref  push(value: A): Seq[A] ref^"
        }, 
        {
            "location": "/builtin-Seq/#fun-ref-reservelen-usize-val-seq91a93-ref", 
            "text": "Reserve space for len elements.", 
            "title": "fun ref  reserve(len: USize val): Seq[A] ref^"
        }, 
        {
            "location": "/builtin-Seq/#fun-ref-shift-a", 
            "text": "Removes an element from the beginning of the sequence.", 
            "title": "fun ref  shift(): A^ ?"
        }, 
        {
            "location": "/builtin-Seq/#fun-box-size-usize-val", 
            "text": "Returns the number of elements in the sequence.", 
            "title": "fun box  size(): USize val"
        }, 
        {
            "location": "/builtin-Seq/#fun-ref-truncatelen-usize-val-seq91a93-ref", 
            "text": "Truncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.", 
            "title": "fun ref  truncate(len: USize val): Seq[A] ref^"
        }, 
        {
            "location": "/builtin-Seq/#fun-ref-unshiftvalue-a-seq91a93-ref", 
            "text": "Adds an element to the beginning of the sequence.", 
            "title": "fun ref  unshift(value: A): Seq[A] ref^"
        }, 
        {
            "location": "/builtin-Seq/#fun-ref-updatei-usize-val-value-a-a", 
            "text": "Replaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.", 
            "title": "fun ref  update(i: USize val, value: A): A^ ?"
        }, 
        {
            "location": "/builtin-Seq/#fun-box-values-iterator91this-a93-ref", 
            "text": "Returns an iterator over the elements of the sequence.", 
            "title": "fun box  values(): Iterator[this-&gt;A] ref^"
        }, 
        {
            "location": "/builtin-Signed/", 
            "text": "type builtin/Signed is ((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val)\n\n\nNo doc string provided.", 
            "title": "type Signed"
        }, 
        {
            "location": "/builtin-Signed/#type-builtinsigned-is-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val", 
            "text": "No doc string provided.", 
            "title": "type builtin/Signed is ((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val)"
        }, 
        {
            "location": "/builtin-_SignedInteger/", 
            "text": "trait builtin/_SignedInteger[A: \n_SignedInteger\n[A val, B val] val, B: \n_UnsignedInteger\n[B val] val] is \nInteger\n[A val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(value: A val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): B val\n\n\nfun box  \nadd\n(y: A val): A val\n\n\nfun box  \nbitwidth\n(): A val\n\n\nfun box  \nbswap\n(): A val\n\n\nfun box  \nclz\n(): A val\n\n\nfun box  \ncompare\n(that: A val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): A val\n\n\nfun box  \ndiv\n(y: A val): A val\n\n\nfun box  \ndivmod\n(y: A val): (A val , A val)\n\n\nfun box  \neq\n(y: A val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): A val\n\n\nfun box  \nge\n(y: A val): \nBool\n val\n\n\nfun box  \ngt\n(y: A val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: A val): \nBool\n val\n\n\nfun box  \nlt\n(y: A val): \nBool\n val\n\n\nfun box  \nmax\n(y: A val): A val\n\n\nfun tag  \nmax_value\n(): A val\n\n\nfun box  \nmin\n(y: A val): A val\n\n\nfun tag  \nmin_value\n(): A val\n\n\nfun box  \nmod\n(y: A val): A val\n\n\nfun box  \nmul\n(y: A val): A val\n\n\nfun box  \nne\n(y: A val): \nBool\n val\n\n\nfun box  \nneg\n(): A val\n\n\nfun box  \nop_and\n(y: A val): A val\n\n\nfun box  \nop_not\n(): A val\n\n\nfun box  \nop_or\n(y: A val): A val\n\n\nfun box  \nop_xor\n(y: A val): A val\n\n\nfun box  \npopcount\n(): A val\n\n\nfun box  \nrotl\n(y: A val): A val\n\n\nfun box  \nrotr\n(y: A val): A val\n\n\nfun box  \nshl\n(y: A val): A val\n\n\nfun box  \nshr\n(y: A val): A val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: A val): A val\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "trait _SignedInteger"
        }, 
        {
            "location": "/builtin-_SignedInteger/#trait-builtin_signedinteger91a-_signedinteger91a-val-b-val93-val-b-_unsignedinteger91b-val93-val93-is-integer91a-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "trait builtin/_SignedInteger[A: _SignedInteger[A val, B val] val, B: _UnsignedInteger[B val] val] is Integer[A val] val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-_SignedInteger/#new-createvalue-a-val", 
            "text": "", 
            "title": "new create(value: A val)"
        }, 
        {
            "location": "/builtin-_SignedInteger/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-abs-b-val", 
            "text": "", 
            "title": "fun box  abs(): B val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-addy-a-val-a-val", 
            "text": "", 
            "title": "fun box  add(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-bitwidth-a-val", 
            "text": "", 
            "title": "fun box  bitwidth(): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-bswap-a-val", 
            "text": "", 
            "title": "fun box  bswap(): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-clz-a-val", 
            "text": "", 
            "title": "fun box  clz(): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-comparethat-a-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: A val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-ctz-a-val", 
            "text": "", 
            "title": "fun box  ctz(): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-divy-a-val-a-val", 
            "text": "", 
            "title": "fun box  div(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-divmody-a-val-a-val-a-val", 
            "text": "", 
            "title": "fun box  divmod(y: A val): (A val , A val)"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-eqy-a-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-tag-from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b-val93-val93a-b-val-a-val", 
            "text": "", 
            "title": "fun tag  from[B: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[B val] val)](a: B val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-gey-a-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-gty-a-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-ley-a-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-lty-a-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-maxy-a-val-a-val", 
            "text": "", 
            "title": "fun box  max(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-tag-max_value-a-val", 
            "text": "", 
            "title": "fun tag  max_value(): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-miny-a-val-a-val", 
            "text": "", 
            "title": "fun box  min(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-tag-min_value-a-val", 
            "text": "", 
            "title": "fun tag  min_value(): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-mody-a-val-a-val", 
            "text": "", 
            "title": "fun box  mod(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-muly-a-val-a-val", 
            "text": "", 
            "title": "fun box  mul(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-ney-a-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-neg-a-val", 
            "text": "", 
            "title": "fun box  neg(): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-op_andy-a-val-a-val", 
            "text": "", 
            "title": "fun box  op_and(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-op_not-a-val", 
            "text": "", 
            "title": "fun box  op_not(): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-op_ory-a-val-a-val", 
            "text": "", 
            "title": "fun box  op_or(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-op_xory-a-val-a-val", 
            "text": "", 
            "title": "fun box  op_xor(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-popcount-a-val", 
            "text": "", 
            "title": "fun box  popcount(): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-rotly-a-val-a-val", 
            "text": "", 
            "title": "fun box  rotl(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-rotry-a-val-a-val", 
            "text": "", 
            "title": "fun box  rotr(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-shly-a-val-a-val", 
            "text": "", 
            "title": "fun box  shl(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-shry-a-val-a-val", 
            "text": "", 
            "title": "fun box  shr(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-suby-a-val-a-val", 
            "text": "", 
            "title": "fun box  sub(y: A val): A val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-_SignedInteger/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-SourceLoc/", 
            "text": "interface builtin/SourceLoc\n\n\nDefault capability\n: \nval\n\n\nRepresents a location in a Pony source file, as reported by \n__loc\n.\n\n\nPublic Functions\n\n\nfun box  \nfile\n(): \nString\n val\n\n\nName and path of source file.\n\n\nfun box  \nline\n(): \nUSize\n val\n\n\nLine number within file.\nLine numbers start at 1.\n\n\nfun box  \nmethod\n(): \nString\n val\n\n\nName of containing method.\n\n\nfun box  \npos\n(): \nUSize\n val\n\n\nCharacter position on line.\nCharacter positions start at 1.", 
            "title": "interface SourceLoc"
        }, 
        {
            "location": "/builtin-SourceLoc/#interface-builtinsourceloc", 
            "text": "Default capability :  val  Represents a location in a Pony source file, as reported by  __loc .", 
            "title": "interface builtin/SourceLoc"
        }, 
        {
            "location": "/builtin-SourceLoc/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-SourceLoc/#fun-box-file-string-val", 
            "text": "Name and path of source file.", 
            "title": "fun box  file(): String val"
        }, 
        {
            "location": "/builtin-SourceLoc/#fun-box-line-usize-val", 
            "text": "Line number within file.\nLine numbers start at 1.", 
            "title": "fun box  line(): USize val"
        }, 
        {
            "location": "/builtin-SourceLoc/#fun-box-method-string-val", 
            "text": "Name of containing method.", 
            "title": "fun box  method(): String val"
        }, 
        {
            "location": "/builtin-SourceLoc/#fun-box-pos-usize-val", 
            "text": "Character position on line.\nCharacter positions start at 1.", 
            "title": "fun box  pos(): USize val"
        }, 
        {
            "location": "/builtin-StdStream/", 
            "text": "actor builtin/StdStream\n\n\nDefault capability\n: \ntag\n\n\nAsynchronous access to stdout and stderr. The constructors are private to\nensure that access is provided only via an environment.\n\n\nConstructors\n\n\nnew \n_err\n()\n\n\nCreate an async stream for stderr.\n\n\nnew \n_out\n()\n\n\nCreate an async stream for stdout.\n\n\nPublic Behaviours\n\n\nbe \nprint\n(data: (\nString\n val | \nArray\n[\nU8\n val] val))\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe \nprintv\n(data: \nByteSeqIter\n val)\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe \nwrite\n(data: (\nString\n val | \nArray\n[\nU8\n val] val))\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe \nwritev\n(data: \nByteSeqIter\n val)\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nPrivate Functions\n\n\nfun ref  \n_write\n(data: (\nString\n val | \nArray\n[\nU8\n val] val)): \nNone\n val\n\n\nWrite the bytes without explicitly flushing.", 
            "title": "actor StdStream"
        }, 
        {
            "location": "/builtin-StdStream/#actor-builtinstdstream", 
            "text": "Default capability :  tag  Asynchronous access to stdout and stderr. The constructors are private to\nensure that access is provided only via an environment.", 
            "title": "actor builtin/StdStream"
        }, 
        {
            "location": "/builtin-StdStream/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-StdStream/#new-_err", 
            "text": "Create an async stream for stderr.", 
            "title": "new _err()"
        }, 
        {
            "location": "/builtin-StdStream/#new-_out", 
            "text": "Create an async stream for stdout.", 
            "title": "new _out()"
        }, 
        {
            "location": "/builtin-StdStream/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/builtin-StdStream/#be-printdata-string-val-array91u8-val93-val", 
            "text": "Print some bytes and insert a newline afterwards.", 
            "title": "be print(data: (String val | Array[U8 val] val))"
        }, 
        {
            "location": "/builtin-StdStream/#be-printvdata-byteseqiter-val", 
            "text": "Print an iterable collection of ByteSeqs.", 
            "title": "be printv(data: ByteSeqIter val)"
        }, 
        {
            "location": "/builtin-StdStream/#be-writedata-string-val-array91u8-val93-val", 
            "text": "Print some bytes without inserting a newline afterwards.", 
            "title": "be write(data: (String val | Array[U8 val] val))"
        }, 
        {
            "location": "/builtin-StdStream/#be-writevdata-byteseqiter-val", 
            "text": "Write an iterable collection of ByteSeqs.", 
            "title": "be writev(data: ByteSeqIter val)"
        }, 
        {
            "location": "/builtin-StdStream/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-StdStream/#fun-ref-_writedata-string-val-array91u8-val93-val-none-val", 
            "text": "Write the bytes without explicitly flushing.", 
            "title": "fun ref  _write(data: (String val | Array[U8 val] val)): None val"
        }, 
        {
            "location": "/builtin-Stdin/", 
            "text": "actor builtin/Stdin\n\n\nDefault capability\n: \ntag\n\n\nAsynchronous access to stdin. The constructor is private to ensure that\naccess is provided only via an environment.\n\n\nConstructors\n\n\nnew \ncreate\n(use\nevent: \nBool\n val)\n\n\nPublic Behaviours\n\n\nbe \napply\n(notify: (\nStdinNotify\n iso | \nNone\n val))\n\n\nSet the notifier.\n\n\nbe \ndispose\n()\n\n\nClear the notifier in order to shut down input.\n\n\nPrivate Behaviours\n\n\nbe \nevent\nnotify\n(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nWhen the event fires, read from stdin.\n\n\nbe \nloop\nread\n()\n\n\nIf we are able to read from stdin, schedule another read.\n\n\nbe \nread\nagain\n()\n\n\nResume reading.\n\n\nPrivate Functions\n\n\nfun ref  \nclose\nevent\n(): \nNone\n val\n\n\nClose the event.\n\n\nfun ref  \n_read\n(): \nBool\n val\n\n\nRead a chunk of data from stdin. If we read 4 kb of data, send ourself a\nresume message and stop reading, to avoid starving other actors.\n\n\nfun ref  \nset\nnotify\n(notify: (\nStdinNotify\n iso | \nNone\n val)): \nNone\n val\n\n\nSet the notifier.", 
            "title": "actor Stdin"
        }, 
        {
            "location": "/builtin-Stdin/#actor-builtinstdin", 
            "text": "Default capability :  tag  Asynchronous access to stdin. The constructor is private to ensure that\naccess is provided only via an environment.", 
            "title": "actor builtin/Stdin"
        }, 
        {
            "location": "/builtin-Stdin/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Stdin/#new-createuseevent-bool-val", 
            "text": "", 
            "title": "new create(useevent: Bool val)"
        }, 
        {
            "location": "/builtin-Stdin/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/builtin-Stdin/#be-applynotify-stdinnotify-iso-none-val", 
            "text": "Set the notifier.", 
            "title": "be apply(notify: (StdinNotify iso | None val))"
        }, 
        {
            "location": "/builtin-Stdin/#be-dispose", 
            "text": "Clear the notifier in order to shut down input.", 
            "title": "be dispose()"
        }, 
        {
            "location": "/builtin-Stdin/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/builtin-Stdin/#be-eventnotifyevent-pointer91asioevent-val93-tag-flags-u32-val-arg-u32-val", 
            "text": "When the event fires, read from stdin.", 
            "title": "be eventnotify(event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)"
        }, 
        {
            "location": "/builtin-Stdin/#be-loopread", 
            "text": "If we are able to read from stdin, schedule another read.", 
            "title": "be loopread()"
        }, 
        {
            "location": "/builtin-Stdin/#be-readagain", 
            "text": "Resume reading.", 
            "title": "be readagain()"
        }, 
        {
            "location": "/builtin-Stdin/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-Stdin/#fun-ref-closeevent-none-val", 
            "text": "Close the event.", 
            "title": "fun ref  closeevent(): None val"
        }, 
        {
            "location": "/builtin-Stdin/#fun-ref-_read-bool-val", 
            "text": "Read a chunk of data from stdin. If we read 4 kb of data, send ourself a\nresume message and stop reading, to avoid starving other actors.", 
            "title": "fun ref  _read(): Bool val"
        }, 
        {
            "location": "/builtin-Stdin/#fun-ref-setnotifynotify-stdinnotify-iso-none-val-none-val", 
            "text": "Set the notifier.", 
            "title": "fun ref  setnotify(notify: (StdinNotify iso | None val)): None val"
        }, 
        {
            "location": "/builtin-StdinNotify/", 
            "text": "interface builtin/StdinNotify\n\n\nDefault capability\n: \nref\n\n\nNotification for data arriving via stdin.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(data: \nArray\n[\nU8\n val] iso): \nNone\n val\n\n\nCalled when data is available on stdin.\n\n\nfun ref  \ndispose\n(): \nNone\n val\n\n\nCalled when no more data will arrive on stdin.", 
            "title": "interface StdinNotify"
        }, 
        {
            "location": "/builtin-StdinNotify/#interface-builtinstdinnotify", 
            "text": "Default capability :  ref  Notification for data arriving via stdin.", 
            "title": "interface builtin/StdinNotify"
        }, 
        {
            "location": "/builtin-StdinNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-StdinNotify/#fun-ref-applydata-array91u8-val93-iso-none-val", 
            "text": "Called when data is available on stdin.", 
            "title": "fun ref  apply(data: Array[U8 val] iso): None val"
        }, 
        {
            "location": "/builtin-StdinNotify/#fun-ref-dispose-none-val", 
            "text": "Called when no more data will arrive on stdin.", 
            "title": "fun ref  dispose(): None val"
        }, 
        {
            "location": "/builtin-String/", 
            "text": "class builtin/String is \nSeq\n[\nU8\n val] ref, \nComparable\n[\nString\n box] ref, \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box\n\n\nDefault capability\n: \nval\n\n\nStrings don't specify an encoding.\n\n\nConstructors\n\n\nnew \ncopy_cstring\n(str: \nPointer\n[\nU8\n val] box, optional len: \nUSize\n val)\n\n\nIf the cstring is not null terminated and a length isn't specified, this\ncan crash. This will only occur if the C-FFI has been used to craft such\na pointer.\n\n\nnew \ncreate\n(optional len: \nUSize\n val)\n\n\nAn empty string. Enough space for len bytes is reserved.\n\n\nnew \nfrom_array\n(data: \nArray\n[\nU8\n val] val)\n\n\nCreate a string from an array, reusing the underlying data pointer if the\narray is null terminated, or copying the data if it is not.\n\n\nnew \nfrom_cstring\n(str: \nPointer\n[\nU8\n val] ref, optional len: \nUSize\n val)\n\n\nThe cstring is not copied. This must be done only with C-FFI functions that\nreturn null-terminated pony_alloc'd character arrays.\n\n\nnew \nfrom_utf32\n(value: \nU32\n val)\n\n\nCreate a UTF-8 string from a single UTF-32 code point.\n\n\nPublic Functions\n\n\nfun box  \nadd\n(that: \nString\n box): \nString\n val\n\n\nReturn a string that is a concatenation of this and that.\n\n\nfun ref  \nappend\n(seq: \nReadSeq\n[\nU8\n val] box, optional offset: \nUSize\n val, optional len: \nUSize\n val): \nString\n ref^\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun box  \napply\n(i: \nUSize\n val): \nU8\n val ?\n\n\nReturns the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun val  \narray\n(): \nArray\n[\nU8\n val] val\n\n\nReturns an Array[U8] that that reuses the underlying data pointer.\n\n\nfun box  \nat\n(s: \nString\n box, optional offset: \nISize\n val): \nBool\n val\n\n\nReturns true if the substring s is present at the given offset.\n\n\nfun box  \nat_offset\n(offset: \nISize\n val): \nU8\n val ?\n\n\nReturns the byte at the given offset. Raise an error if the offset is out\nof bounds.\n\n\nfun box  \nbool\n(): \nBool\n val ?\n\n\nfun ref  \nclear\n(): \nString\n ref^\n\n\nTruncate the string to zero length.\n\n\nfun box  \nclone\n(): \nString\n iso^\n\n\nReturns a copy of the string.\n\n\nfun box  \ncodepoints\n(optional from: \nISize\n val, optional to: \nISize\n val): \nUSize\n val\n\n\nReturns the number of unicode code points in the string between the two\noffsets. Index range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun box  \ncompare\n(that: \nString\n box): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nLexically compare two strings.\n\n\nfun box  \ncompare_sub\n(that: \nString\n box, n: \nUSize\n val, optional offset: \nISize\n val, optional that_offset: \nISize\n val, optional ignore_case: \nBool\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nStarting at this + offset, compare n bytes with that + offset.\n\n\nfun ref  \nconcat\n(iter: \nIterator\n[\nU8\n val] ref, optional offset: \nUSize\n val, optional len: \nUSize\n val): \nString\n ref^\n\n\nAdd len iterated bytes to the end of the string, starting from the given\noffset. The string is returned to allow call chaining.\n\n\nfun box  \ncount\n(s: \nString\n box, optional offset: \nISize\n val): \nUSize\n val\n\n\nCounts the non-overlapping occurrences of s in the string.\n\n\nfun box  \ncstring\n(): \nPointer\n[\nU8\n val] tag\n\n\nReturns a C compatible pointer to a null terminated string.\n\n\nfun box  \ncut\n(from: \nISize\n val, optional to: \nISize\n val): \nString\n iso^\n\n\nReturns a version of the string with the given range deleted.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun ref  \ncut_in_place\n(from: \nISize\n val, optional to: \nISize\n val): \nString\n ref^\n\n\nCuts the given range out of the string.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun ref  \ndelete\n(offset: \nISize\n val, optional len: \nUSize\n val): \nString\n ref^\n\n\nDelete len bytes at the supplied offset, compacting the string in place.\n\n\nfun box  \neq\n(that: \nString\n box): \nBool\n val\n\n\nReturns true if the two strings have the same contents.\n\n\nfun box  \nf32\n(optional offset: \nISize\n val): \nF32\n val\n\n\nfun box  \nf64\n(optional offset: \nISize\n val): \nF64\n val\n\n\nfun box  \nfind\n(s: \nString\n box, optional offset: \nISize\n val, optional nth: \nUSize\n val): \nISize\n val ?\n\n\nReturn the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurence of s or s is empty.\n\n\nfun box  \nge\n(that: \nString\n box): \nBool\n val\n\n\nfun box  \ngt\n(that: \nString\n box): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(optional base: \nU8\n val): \nI128\n val ?\n\n\nfun box  \ni16\n(optional base: \nU8\n val): \nI16\n val ?\n\n\nfun box  \ni32\n(optional base: \nU8\n val): \nI32\n val ?\n\n\nfun box  \ni64\n(optional base: \nU8\n val): \nI64\n val ?\n\n\nfun box  \ni8\n(optional base: \nU8\n val): \nI8\n val ?\n\n\nfun box  \nilong\n(optional base: \nU8\n val): \nILong\n val ?\n\n\nfun box  \ninsert\n(offset: \nISize\n val, that: \nString\n val): \nString\n iso^\n\n\nReturns a version of the string with the given string inserted at the given\noffset.\n\n\nfun ref  \ninsert_byte\n(offset: \nISize\n val, value: \nU8\n val): \nString\n ref^\n\n\nInserts a byte at the given offset. Appends if the offset is out of bounds.\n\n\nfun ref  \ninsert_in_place\n(offset: \nISize\n val, that: \nString\n box): \nString\n ref^\n\n\nInserts the given string at the given offset. Appends the string if the\noffset is out of bounds.\n\n\nfun box  \nisize\n(optional base: \nU8\n val): \nISize\n val ?\n\n\nfun box  \njoin\n(data: \nReadSeq\n[\nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box] box): \nString\n iso^\n\n\nReturn a string that is a concatenation of the strings in data, using this\nas a separator.\n\n\nfun box  \nle\n(that: \nString\n box): \nBool\n val\n\n\nReturns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.\n\n\nfun box  \nlower\n(): \nString\n iso^\n\n\nReturns a lower case version of the string.\n\n\nfun ref  \nlower_in_place\n(): \nString\n ref^\n\n\nTransforms the string to lower case. Currently only knows ASCII case.\n\n\nfun ref  \nlstrip\n(optional s: \nString\n box): \nString\n ref^\n\n\nRemove all leading characters within the string that are in s. By default,\nleading whitespace is removed.\n\n\nfun box  \nlt\n(that: \nString\n box): \nBool\n val\n\n\nReturns true if this is lexically less than that. Needs to be made UTF-8\nsafe.\n\n\nfun box  \nne\n(that: \nString\n box): \nBool\n val\n\n\nfun box  \noffset_to_index\n(i: \nISize\n val): \nUSize\n val\n\n\nfun ref  \npop\n(): \nU8\n val ?\n\n\nRemove a byte from the end of the string.\n\n\nfun ref  \npush\n(value: \nU8\n val): \nString\n ref^\n\n\nAdd a byte to the end of the string.\n\n\nfun box  \nread_int\n[A: ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) \n \nInteger\n[A val] val)](optional offset: \nISize\n val, optional base: \nU8\n val): (A val , \nUSize\n val) ?\n\n\nRead an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.\n\n\nfun ref  \nrecalc\n(): \nString\n ref^\n\n\nRecalculates the string length. This is only needed if the string is\nchanged via an FFI call. If the string is not null terminated at the\nallocated length, a null is added.\n\n\nfun ref  \nremove\n(s: \nString\n box): \nUSize\n val\n\n\nRemove all instances of s from the string. Returns the count of removed\ninstances.\n\n\nfun ref  \nreplace\n(from: \nString\n box, to: \nString\n box, optional n: \nUSize\n val): \nString\n ref^\n\n\nReplace up to n occurrences of \nfrom\n in \nthis\n with \nto\n. If n is 0, all\noccurrences will be replaced.\n\n\nfun ref  \nreserve\n(len: \nUSize\n val): \nString\n ref^\n\n\nReserve space for len bytes. An additional byte will be reserved for the\nnull terminator.\n\n\nfun box  \nreverse\n(): \nString\n iso^\n\n\nReturns a reversed version of the string.\n\n\nfun ref  \nreverse_in_place\n(): \nString\n ref^\n\n\nReverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.\n\n\nfun box  \nrfind\n(s: \nString\n box, optional offset: \nISize\n val, optional nth: \nUSize\n val): \nISize\n val ?\n\n\nReturn the index of n-th instance of s in the string starting from the end.\nRaise an error if there is no n-th occurence of s or s is empty.\n\n\nfun ref  \nrstrip\n(optional s: \nString\n box): \nString\n ref^\n\n\nRemove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.\n\n\nfun box  \nrunes\n(): \nStringRunes\n ref^\n\n\nReturn an iterator over the codepoints in the string.\n\n\nfun ref  \nshift\n(): \nU8\n val ?\n\n\nRemoves a byte from the beginning of the string.\n\n\nfun box  \nsize\n(): \nUSize\n val\n\n\nReturns the length of the string data in bytes.\n\n\nfun box  \nspace\n(): \nUSize\n val\n\n\nReturns the space available for data, not including the null terminator.\n\n\nfun box  \nsplit\n(optional delim: \nString\n val, optional n: \nUSize\n val): \nArray\n[\nString\n val] iso^\n\n\nSplit the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If \nn \n 0\n, then the split count is\nlimited to n.\n\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, \n\"1,,2\".split(\",\") =\n [\"1\", \"\", \"2\"]\n.\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^\n\n\nfun ref  \nstrip\n(optional s: \nString\n box): \nString\n ref^\n\n\nRemove all leading and trailing characters from the string that are in s.\n\n\nfun box  \nsubstring\n(from: \nISize\n val, optional to: \nISize\n val): \nString\n iso^\n\n\nReturns a substring. Index range [\nfrom\n .. \nto\n) is half-open.\nReturns an empty string if nothing is in the range.\n\n\nfun ref  \ntruncate\n(len: \nUSize\n val): \nString\n ref^\n\n\nTruncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.\n\n\nfun box  \nu128\n(optional base: \nU8\n val): \nU128\n val ?\n\n\nfun box  \nu16\n(optional base: \nU8\n val): \nU16\n val ?\n\n\nfun box  \nu32\n(optional base: \nU8\n val): \nU32\n val ?\n\n\nfun box  \nu64\n(optional base: \nU8\n val): \nU64\n val ?\n\n\nfun box  \nu8\n(optional base: \nU8\n val): \nU8\n val ?\n\n\nfun box  \nulong\n(optional base: \nU8\n val): \nULong\n val ?\n\n\nfun ref  \nunshift\n(value: \nU8\n val): \nString\n ref^\n\n\nAdds a byte to the beginning of the string.\n\n\nfun ref  \nupdate\n(i: \nUSize\n val, value: \nU8\n val): \nU8\n val ?\n\n\nChange the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun ref  \nupdate_offset\n(offset: \nISize\n val, value: \nU8\n val): \nU8\n val ?\n\n\nChanges a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.\n\n\nfun box  \nupper\n(): \nString\n iso^\n\n\nReturns an upper case version of the string. Currently only knows ASCII\ncase.\n\n\nfun ref  \nupper_in_place\n(): \nString\n ref^\n\n\nTransforms the string to upper case.\n\n\nfun box  \nusize\n(optional base: \nU8\n val): \nUSize\n val ?\n\n\nfun box  \nutf32\n(offset: \nISize\n val): (\nU32\n val , \nU8\n val) ?\n\n\nReturn a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.\n\n\nfun box  \nvalues\n(): \nStringBytes\n ref^\n\n\nReturn an iterator over the bytes in the string.\n\n\nPrivate Functions\n\n\nfun iso  \n_append\n(s: \nString\n box): \nString\n iso^\n\n\nfun box  \n_cstring\n(): \nPointer\n[\nU8\n val] box\n\n\nReturns a C compatible pointer to a null terminated string.\n\n\nfun box  \nread\nint_base\n[A: ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) \n \nInteger\n[A val] val)](base: \nU8\n val, index: \nUSize\n val): (A val , \nUSize\n val)\n\n\nDetermine the base of an integer starting at the specified index.\nIf a non-0 base is given use that. If given base is 0 read the base\nspecifying prefix, if any, to detect base 2 or 16.\nIf no base is specified and no prefix is found default to decimal.\nNote that a leading 0 does NOT imply octal.\nReport the base found and the number of characters in the prefix.\n\n\nfun ref  \n_set\n(i: \nUSize\n val, value: \nU8\n val): \nU8\n val\n\n\nUnsafe update, used internally.\n\n\nfun box  \nto\nint\n[A: ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) \n \nInteger\n[A val] val)](base: \nU8\n val): A val ?\n\n\nConvert the \nwhole\n string to the specified type.\nIf there are any other characters in the string, or the integer found is\nout of range for the target type then an error is thrown.", 
            "title": "class String"
        }, 
        {
            "location": "/builtin-String/#class-builtinstring-is-seq91u8-val93-ref-comparable91string-box93-ref-stringable91formatdefault-val-prefixdefault-val93-box", 
            "text": "Default capability :  val  Strings don't specify an encoding.", 
            "title": "class builtin/String is Seq[U8 val] ref, Comparable[String box] ref, Stringable[FormatDefault val, PrefixDefault val] box"
        }, 
        {
            "location": "/builtin-String/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-String/#new-copy_cstringstr-pointer91u8-val93-box-optional-len-usize-val", 
            "text": "If the cstring is not null terminated and a length isn't specified, this\ncan crash. This will only occur if the C-FFI has been used to craft such\na pointer.", 
            "title": "new copy_cstring(str: Pointer[U8 val] box, optional len: USize val)"
        }, 
        {
            "location": "/builtin-String/#new-createoptional-len-usize-val", 
            "text": "An empty string. Enough space for len bytes is reserved.", 
            "title": "new create(optional len: USize val)"
        }, 
        {
            "location": "/builtin-String/#new-from_arraydata-array91u8-val93-val", 
            "text": "Create a string from an array, reusing the underlying data pointer if the\narray is null terminated, or copying the data if it is not.", 
            "title": "new from_array(data: Array[U8 val] val)"
        }, 
        {
            "location": "/builtin-String/#new-from_cstringstr-pointer91u8-val93-ref-optional-len-usize-val", 
            "text": "The cstring is not copied. This must be done only with C-FFI functions that\nreturn null-terminated pony_alloc'd character arrays.", 
            "title": "new from_cstring(str: Pointer[U8 val] ref, optional len: USize val)"
        }, 
        {
            "location": "/builtin-String/#new-from_utf32value-u32-val", 
            "text": "Create a UTF-8 string from a single UTF-32 code point.", 
            "title": "new from_utf32(value: U32 val)"
        }, 
        {
            "location": "/builtin-String/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-String/#fun-box-addthat-string-box-string-val", 
            "text": "Return a string that is a concatenation of this and that.", 
            "title": "fun box  add(that: String box): String val"
        }, 
        {
            "location": "/builtin-String/#fun-ref-appendseq-readseq91u8-val93-box-optional-offset-usize-val-optional-len-usize-val-string-ref", 
            "text": "Append the elements from a sequence, starting from the given offset.", 
            "title": "fun ref  append(seq: ReadSeq[U8 val] box, optional offset: USize val, optional len: USize val): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-applyi-usize-val-u8-val", 
            "text": "Returns the i-th byte. Raise an error if the index is out of bounds.", 
            "title": "fun box  apply(i: USize val): U8 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-val-array-array91u8-val93-val", 
            "text": "Returns an Array[U8] that that reuses the underlying data pointer.", 
            "title": "fun val  array(): Array[U8 val] val"
        }, 
        {
            "location": "/builtin-String/#fun-box-ats-string-box-optional-offset-isize-val-bool-val", 
            "text": "Returns true if the substring s is present at the given offset.", 
            "title": "fun box  at(s: String box, optional offset: ISize val): Bool val"
        }, 
        {
            "location": "/builtin-String/#fun-box-at_offsetoffset-isize-val-u8-val", 
            "text": "Returns the byte at the given offset. Raise an error if the offset is out\nof bounds.", 
            "title": "fun box  at_offset(offset: ISize val): U8 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-bool-bool-val", 
            "text": "", 
            "title": "fun box  bool(): Bool val ?"
        }, 
        {
            "location": "/builtin-String/#fun-ref-clear-string-ref", 
            "text": "Truncate the string to zero length.", 
            "title": "fun ref  clear(): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-clone-string-iso", 
            "text": "Returns a copy of the string.", 
            "title": "fun box  clone(): String iso^"
        }, 
        {
            "location": "/builtin-String/#fun-box-codepointsoptional-from-isize-val-optional-to-isize-val-usize-val", 
            "text": "Returns the number of unicode code points in the string between the two\noffsets. Index range [ from  ..  to ) is half-open.", 
            "title": "fun box  codepoints(optional from: ISize val, optional to: ISize val): USize val"
        }, 
        {
            "location": "/builtin-String/#fun-box-comparethat-string-box-less-val-equal-val-greater-val", 
            "text": "Lexically compare two strings.", 
            "title": "fun box  compare(that: String box): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-String/#fun-box-compare_subthat-string-box-n-usize-val-optional-offset-isize-val-optional-that_offset-isize-val-optional-ignore_case-bool-val-less-val-equal-val-greater-val", 
            "text": "Starting at this + offset, compare n bytes with that + offset.", 
            "title": "fun box  compare_sub(that: String box, n: USize val, optional offset: ISize val, optional that_offset: ISize val, optional ignore_case: Bool val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-String/#fun-ref-concatiter-iterator91u8-val93-ref-optional-offset-usize-val-optional-len-usize-val-string-ref", 
            "text": "Add len iterated bytes to the end of the string, starting from the given\noffset. The string is returned to allow call chaining.", 
            "title": "fun ref  concat(iter: Iterator[U8 val] ref, optional offset: USize val, optional len: USize val): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-counts-string-box-optional-offset-isize-val-usize-val", 
            "text": "Counts the non-overlapping occurrences of s in the string.", 
            "title": "fun box  count(s: String box, optional offset: ISize val): USize val"
        }, 
        {
            "location": "/builtin-String/#fun-box-cstring-pointer91u8-val93-tag", 
            "text": "Returns a C compatible pointer to a null terminated string.", 
            "title": "fun box  cstring(): Pointer[U8 val] tag"
        }, 
        {
            "location": "/builtin-String/#fun-box-cutfrom-isize-val-optional-to-isize-val-string-iso", 
            "text": "Returns a version of the string with the given range deleted.\nIndex range [ from  ..  to ) is half-open.", 
            "title": "fun box  cut(from: ISize val, optional to: ISize val): String iso^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-cut_in_placefrom-isize-val-optional-to-isize-val-string-ref", 
            "text": "Cuts the given range out of the string.\nIndex range [ from  ..  to ) is half-open.", 
            "title": "fun ref  cut_in_place(from: ISize val, optional to: ISize val): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-deleteoffset-isize-val-optional-len-usize-val-string-ref", 
            "text": "Delete len bytes at the supplied offset, compacting the string in place.", 
            "title": "fun ref  delete(offset: ISize val, optional len: USize val): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-eqthat-string-box-bool-val", 
            "text": "Returns true if the two strings have the same contents.", 
            "title": "fun box  eq(that: String box): Bool val"
        }, 
        {
            "location": "/builtin-String/#fun-box-f32optional-offset-isize-val-f32-val", 
            "text": "", 
            "title": "fun box  f32(optional offset: ISize val): F32 val"
        }, 
        {
            "location": "/builtin-String/#fun-box-f64optional-offset-isize-val-f64-val", 
            "text": "", 
            "title": "fun box  f64(optional offset: ISize val): F64 val"
        }, 
        {
            "location": "/builtin-String/#fun-box-finds-string-box-optional-offset-isize-val-optional-nth-usize-val-isize-val", 
            "text": "Return the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurence of s or s is empty.", 
            "title": "fun box  find(s: String box, optional offset: ISize val, optional nth: USize val): ISize val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-gethat-string-box-bool-val", 
            "text": "", 
            "title": "fun box  ge(that: String box): Bool val"
        }, 
        {
            "location": "/builtin-String/#fun-box-gtthat-string-box-bool-val", 
            "text": "", 
            "title": "fun box  gt(that: String box): Bool val"
        }, 
        {
            "location": "/builtin-String/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-String/#fun-box-i128optional-base-u8-val-i128-val", 
            "text": "", 
            "title": "fun box  i128(optional base: U8 val): I128 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-i16optional-base-u8-val-i16-val", 
            "text": "", 
            "title": "fun box  i16(optional base: U8 val): I16 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-i32optional-base-u8-val-i32-val", 
            "text": "", 
            "title": "fun box  i32(optional base: U8 val): I32 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-i64optional-base-u8-val-i64-val", 
            "text": "", 
            "title": "fun box  i64(optional base: U8 val): I64 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-i8optional-base-u8-val-i8-val", 
            "text": "", 
            "title": "fun box  i8(optional base: U8 val): I8 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-ilongoptional-base-u8-val-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(optional base: U8 val): ILong val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-insertoffset-isize-val-that-string-val-string-iso", 
            "text": "Returns a version of the string with the given string inserted at the given\noffset.", 
            "title": "fun box  insert(offset: ISize val, that: String val): String iso^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-insert_byteoffset-isize-val-value-u8-val-string-ref", 
            "text": "Inserts a byte at the given offset. Appends if the offset is out of bounds.", 
            "title": "fun ref  insert_byte(offset: ISize val, value: U8 val): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-insert_in_placeoffset-isize-val-that-string-box-string-ref", 
            "text": "Inserts the given string at the given offset. Appends the string if the\noffset is out of bounds.", 
            "title": "fun ref  insert_in_place(offset: ISize val, that: String box): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-isizeoptional-base-u8-val-isize-val", 
            "text": "", 
            "title": "fun box  isize(optional base: U8 val): ISize val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-joindata-readseq91stringable91formatdefault-val-prefixdefault-val93-box93-box-string-iso", 
            "text": "Return a string that is a concatenation of the strings in data, using this\nas a separator.", 
            "title": "fun box  join(data: ReadSeq[Stringable[FormatDefault val, PrefixDefault val] box] box): String iso^"
        }, 
        {
            "location": "/builtin-String/#fun-box-lethat-string-box-bool-val", 
            "text": "Returns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.", 
            "title": "fun box  le(that: String box): Bool val"
        }, 
        {
            "location": "/builtin-String/#fun-box-lower-string-iso", 
            "text": "Returns a lower case version of the string.", 
            "title": "fun box  lower(): String iso^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-lower_in_place-string-ref", 
            "text": "Transforms the string to lower case. Currently only knows ASCII case.", 
            "title": "fun ref  lower_in_place(): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-lstripoptional-s-string-box-string-ref", 
            "text": "Remove all leading characters within the string that are in s. By default,\nleading whitespace is removed.", 
            "title": "fun ref  lstrip(optional s: String box): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-ltthat-string-box-bool-val", 
            "text": "Returns true if this is lexically less than that. Needs to be made UTF-8\nsafe.", 
            "title": "fun box  lt(that: String box): Bool val"
        }, 
        {
            "location": "/builtin-String/#fun-box-nethat-string-box-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: String box): Bool val"
        }, 
        {
            "location": "/builtin-String/#fun-box-offset_to_indexi-isize-val-usize-val", 
            "text": "", 
            "title": "fun box  offset_to_index(i: ISize val): USize val"
        }, 
        {
            "location": "/builtin-String/#fun-ref-pop-u8-val", 
            "text": "Remove a byte from the end of the string.", 
            "title": "fun ref  pop(): U8 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-ref-pushvalue-u8-val-string-ref", 
            "text": "Add a byte to the end of the string.", 
            "title": "fun ref  push(value: U8 val): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-read_int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a-val93-val93optional-offset-isize-val-optional-base-u8-val-a-val-usize-val", 
            "text": "Read an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.", 
            "title": "fun box  read_int[A: ((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) &amp; Integer[A val] val)](optional offset: ISize val, optional base: U8 val): (A val , USize val) ?"
        }, 
        {
            "location": "/builtin-String/#fun-ref-recalc-string-ref", 
            "text": "Recalculates the string length. This is only needed if the string is\nchanged via an FFI call. If the string is not null terminated at the\nallocated length, a null is added.", 
            "title": "fun ref  recalc(): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-removes-string-box-usize-val", 
            "text": "Remove all instances of s from the string. Returns the count of removed\ninstances.", 
            "title": "fun ref  remove(s: String box): USize val"
        }, 
        {
            "location": "/builtin-String/#fun-ref-replacefrom-string-box-to-string-box-optional-n-usize-val-string-ref", 
            "text": "Replace up to n occurrences of  from  in  this  with  to . If n is 0, all\noccurrences will be replaced.", 
            "title": "fun ref  replace(from: String box, to: String box, optional n: USize val): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-reservelen-usize-val-string-ref", 
            "text": "Reserve space for len bytes. An additional byte will be reserved for the\nnull terminator.", 
            "title": "fun ref  reserve(len: USize val): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-reverse-string-iso", 
            "text": "Returns a reversed version of the string.", 
            "title": "fun box  reverse(): String iso^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-reverse_in_place-string-ref", 
            "text": "Reverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.", 
            "title": "fun ref  reverse_in_place(): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-rfinds-string-box-optional-offset-isize-val-optional-nth-usize-val-isize-val", 
            "text": "Return the index of n-th instance of s in the string starting from the end.\nRaise an error if there is no n-th occurence of s or s is empty.", 
            "title": "fun box  rfind(s: String box, optional offset: ISize val, optional nth: USize val): ISize val ?"
        }, 
        {
            "location": "/builtin-String/#fun-ref-rstripoptional-s-string-box-string-ref", 
            "text": "Remove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.", 
            "title": "fun ref  rstrip(optional s: String box): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-runes-stringrunes-ref", 
            "text": "Return an iterator over the codepoints in the string.", 
            "title": "fun box  runes(): StringRunes ref^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-shift-u8-val", 
            "text": "Removes a byte from the beginning of the string.", 
            "title": "fun ref  shift(): U8 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-size-usize-val", 
            "text": "Returns the length of the string data in bytes.", 
            "title": "fun box  size(): USize val"
        }, 
        {
            "location": "/builtin-String/#fun-box-space-usize-val", 
            "text": "Returns the space available for data, not including the null terminator.", 
            "title": "fun box  space(): USize val"
        }, 
        {
            "location": "/builtin-String/#fun-box-splitoptional-delim-string-val-optional-n-usize-val-array91string-val93-iso", 
            "text": "Split the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If  n   0 , then the split count is\nlimited to n.  Adjacent delimiters result in a zero length entry in the array. For\nexample,  \"1,,2\".split(\",\") =  [\"1\", \"\", \"2\"] .", 
            "title": "fun box  split(optional delim: String val, optional n: USize val): Array[String val] iso^"
        }, 
        {
            "location": "/builtin-String/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-prefixdefault-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[FormatDefault val, PrefixDefault val] box): String iso^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-stripoptional-s-string-box-string-ref", 
            "text": "Remove all leading and trailing characters from the string that are in s.", 
            "title": "fun ref  strip(optional s: String box): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-substringfrom-isize-val-optional-to-isize-val-string-iso", 
            "text": "Returns a substring. Index range [ from  ..  to ) is half-open.\nReturns an empty string if nothing is in the range.", 
            "title": "fun box  substring(from: ISize val, optional to: ISize val): String iso^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-truncatelen-usize-val-string-ref", 
            "text": "Truncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.", 
            "title": "fun ref  truncate(len: USize val): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-u128optional-base-u8-val-u128-val", 
            "text": "", 
            "title": "fun box  u128(optional base: U8 val): U128 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-u16optional-base-u8-val-u16-val", 
            "text": "", 
            "title": "fun box  u16(optional base: U8 val): U16 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-u32optional-base-u8-val-u32-val", 
            "text": "", 
            "title": "fun box  u32(optional base: U8 val): U32 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-u64optional-base-u8-val-u64-val", 
            "text": "", 
            "title": "fun box  u64(optional base: U8 val): U64 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-u8optional-base-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  u8(optional base: U8 val): U8 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-ulongoptional-base-u8-val-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(optional base: U8 val): ULong val ?"
        }, 
        {
            "location": "/builtin-String/#fun-ref-unshiftvalue-u8-val-string-ref", 
            "text": "Adds a byte to the beginning of the string.", 
            "title": "fun ref  unshift(value: U8 val): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-updatei-usize-val-value-u8-val-u8-val", 
            "text": "Change the i-th byte. Raise an error if the index is out of bounds.", 
            "title": "fun ref  update(i: USize val, value: U8 val): U8 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-ref-update_offsetoffset-isize-val-value-u8-val-u8-val", 
            "text": "Changes a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.", 
            "title": "fun ref  update_offset(offset: ISize val, value: U8 val): U8 val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-upper-string-iso", 
            "text": "Returns an upper case version of the string. Currently only knows ASCII\ncase.", 
            "title": "fun box  upper(): String iso^"
        }, 
        {
            "location": "/builtin-String/#fun-ref-upper_in_place-string-ref", 
            "text": "Transforms the string to upper case.", 
            "title": "fun ref  upper_in_place(): String ref^"
        }, 
        {
            "location": "/builtin-String/#fun-box-usizeoptional-base-u8-val-usize-val", 
            "text": "", 
            "title": "fun box  usize(optional base: U8 val): USize val ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-utf32offset-isize-val-u32-val-u8-val", 
            "text": "Return a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.", 
            "title": "fun box  utf32(offset: ISize val): (U32 val , U8 val) ?"
        }, 
        {
            "location": "/builtin-String/#fun-box-values-stringbytes-ref", 
            "text": "Return an iterator over the bytes in the string.", 
            "title": "fun box  values(): StringBytes ref^"
        }, 
        {
            "location": "/builtin-String/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-String/#fun-iso-_appends-string-box-string-iso", 
            "text": "", 
            "title": "fun iso  _append(s: String box): String iso^"
        }, 
        {
            "location": "/builtin-String/#fun-box-_cstring-pointer91u8-val93-box", 
            "text": "Returns a C compatible pointer to a null terminated string.", 
            "title": "fun box  _cstring(): Pointer[U8 val] box"
        }, 
        {
            "location": "/builtin-String/#fun-box-readint_base91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a-val93-val93base-u8-val-index-usize-val-a-val-usize-val", 
            "text": "Determine the base of an integer starting at the specified index.\nIf a non-0 base is given use that. If given base is 0 read the base\nspecifying prefix, if any, to detect base 2 or 16.\nIf no base is specified and no prefix is found default to decimal.\nNote that a leading 0 does NOT imply octal.\nReport the base found and the number of characters in the prefix.", 
            "title": "fun box  readint_base[A: ((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) &amp; Integer[A val] val)](base: U8 val, index: USize val): (A val , USize val)"
        }, 
        {
            "location": "/builtin-String/#fun-ref-_seti-usize-val-value-u8-val-u8-val", 
            "text": "Unsafe update, used internally.", 
            "title": "fun ref  _set(i: USize val, value: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-String/#fun-box-toint91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a-val93-val93base-u8-val-a-val", 
            "text": "Convert the  whole  string to the specified type.\nIf there are any other characters in the string, or the integer found is\nout of range for the target type then an error is thrown.", 
            "title": "fun box  toint[A: ((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) &amp; Integer[A val] val)](base: U8 val): A val ?"
        }, 
        {
            "location": "/builtin-StringBytes/", 
            "text": "class builtin/StringBytes is \nIterator\n[\nU8\n val] ref\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(string: \nString\n box)\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nfun ref  \nnext\n(): \nU8\n val ?", 
            "title": "class StringBytes"
        }, 
        {
            "location": "/builtin-StringBytes/#class-builtinstringbytes-is-iterator91u8-val93-ref", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class builtin/StringBytes is Iterator[U8 val] ref"
        }, 
        {
            "location": "/builtin-StringBytes/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-StringBytes/#new-createstring-string-box", 
            "text": "", 
            "title": "new create(string: String box)"
        }, 
        {
            "location": "/builtin-StringBytes/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-StringBytes/#fun-box-has_next-bool-val", 
            "text": "", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/builtin-StringBytes/#fun-ref-next-u8-val", 
            "text": "", 
            "title": "fun ref  next(): U8 val ?"
        }, 
        {
            "location": "/builtin-StringRunes/", 
            "text": "class builtin/StringRunes is \nIterator\n[\nU32\n val] ref\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(string: \nString\n box)\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nfun ref  \nnext\n(): \nU32\n val ?", 
            "title": "class StringRunes"
        }, 
        {
            "location": "/builtin-StringRunes/#class-builtinstringrunes-is-iterator91u32-val93-ref", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class builtin/StringRunes is Iterator[U32 val] ref"
        }, 
        {
            "location": "/builtin-StringRunes/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-StringRunes/#new-createstring-string-box", 
            "text": "", 
            "title": "new create(string: String box)"
        }, 
        {
            "location": "/builtin-StringRunes/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-StringRunes/#fun-box-has_next-bool-val", 
            "text": "", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/builtin-StringRunes/#fun-ref-next-u32-val", 
            "text": "", 
            "title": "fun ref  next(): U32 val ?"
        }, 
        {
            "location": "/builtin-Stringable/", 
            "text": "interface builtin/Stringable[optional F: \nFormatSpec\n val, optional P: \nPrefixSpec\n val]\n\n\nDefault capability\n: \nbox\n\n\nThings that can be turned into a String.\n\n\nPublic Functions\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[F val, P val] box): \nString\n iso^\n\n\nGenerate a string representation of this object.\n\n\nFormatting information may be specified by providing a \nFormatSettings\n\nobject. If no object is explicitly provided a default is used.\n\n\nWhen only fixed values are needed a primitive can be used, which means no\nstorage allocation is needed.", 
            "title": "interface Stringable"
        }, 
        {
            "location": "/builtin-Stringable/#interface-builtinstringable91optional-f-formatspec-val-optional-p-prefixspec-val93", 
            "text": "Default capability :  box  Things that can be turned into a String.", 
            "title": "interface builtin/Stringable[optional F: FormatSpec val, optional P: PrefixSpec val]"
        }, 
        {
            "location": "/builtin-Stringable/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Stringable/#fun-box-stringoptional-fmt-formatsettings91f-val-p-val93-box-string-iso", 
            "text": "Generate a string representation of this object.  Formatting information may be specified by providing a  FormatSettings \nobject. If no object is explicitly provided a default is used.  When only fixed values are needed a primitive can be used, which means no\nstorage allocation is needed.", 
            "title": "fun box  string(optional fmt: FormatSettings[F val, P val] box): String iso^"
        }, 
        {
            "location": "/builtin-_ToString/", 
            "text": "primitive builtin/_ToString\n\n\nDefault capability\n: \nval\n\n\nWorker type providing to string conversions for numbers.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_ToString\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_ToString\n val): \nBool\n val\n\n\nPrivate Functions\n\n\nfun box  \nextend\ndigits\n(s: \nString\n ref, digits: \nUSize\n val): \nNone\n val\n\n\nfun box  \n_f64\n(x: \nF64\n val, optional fmt: \nFormatSettings\n[((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nfmt\nint\n(fmt: (((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val)): (\nU32\n val , \nString\n val , \nString\n val)\n\n\nfun box  \n_large\n(): \nString\n val\n\n\nfun box  \n_pad\n(s: \nString\n ref, width: \nUSize\n val, align: ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val), fill: \nU32\n val): \nNone\n val\n\n\nfun box  \n_prefix\n(neg: \nBool\n val, prefix: ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)): \nString\n val\n\n\nfun box  \n_small\n(): \nString\n val\n\n\nfun box  \n_u128\n(x: \nU128\n val, neg: \nBool\n val, optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \n_u64\n(x: \nU64\n val, neg: \nBool\n val, optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^", 
            "title": "primitive _ToString"
        }, 
        {
            "location": "/builtin-_ToString/#primitive-builtin_tostring", 
            "text": "Default capability :  val  Worker type providing to string conversions for numbers.", 
            "title": "primitive builtin/_ToString"
        }, 
        {
            "location": "/builtin-_ToString/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-_ToString/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin-_ToString/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-_ToString/#fun-box-eqthat-_tostring-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _ToString val): Bool val"
        }, 
        {
            "location": "/builtin-_ToString/#fun-box-nethat-_tostring-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _ToString val): Bool val"
        }, 
        {
            "location": "/builtin-_ToString/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-_ToString/#fun-box-extenddigitss-string-ref-digits-usize-val-none-val", 
            "text": "", 
            "title": "fun box  extenddigits(s: String ref, digits: USize val): None val"
        }, 
        {
            "location": "/builtin-_ToString/#fun-box-_f64x-f64-val-optional-fmt-formatsettings91formatdefault-val-formatexp-val-formatexplarge-val-formatfix-val-formatfixlarge-val-formatgeneral-val-formatgenerallarge-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  _f64(x: F64 val, optional fmt: FormatSettings[((((((FormatDefault val | FormatExp val) | FormatExpLarge val) | FormatFix val) | FormatFixLarge val) | FormatGeneral val) | FormatGeneralLarge val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-_ToString/#fun-box-fmtintfmt-formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-u32-val-string-val-string-val", 
            "text": "", 
            "title": "fun box  fmtint(fmt: (((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val)): (U32 val , String val , String val)"
        }, 
        {
            "location": "/builtin-_ToString/#fun-box-_large-string-val", 
            "text": "", 
            "title": "fun box  _large(): String val"
        }, 
        {
            "location": "/builtin-_ToString/#fun-box-_pads-string-ref-width-usize-val-align-alignleft-val-alignright-val-aligncenter-val-fill-u32-val-none-val", 
            "text": "", 
            "title": "fun box  _pad(s: String ref, width: USize val, align: ((AlignLeft val | AlignRight val) | AlignCenter val), fill: U32 val): None val"
        }, 
        {
            "location": "/builtin-_ToString/#fun-box-_prefixneg-bool-val-prefix-prefixdefault-val-prefixspace-val-prefixsign-val-string-val", 
            "text": "", 
            "title": "fun box  _prefix(neg: Bool val, prefix: ((PrefixDefault val | PrefixSpace val) | PrefixSign val)): String val"
        }, 
        {
            "location": "/builtin-_ToString/#fun-box-_small-string-val", 
            "text": "", 
            "title": "fun box  _small(): String val"
        }, 
        {
            "location": "/builtin-_ToString/#fun-box-_u128x-u128-val-neg-bool-val-optional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  _u128(x: U128 val, neg: Bool val, optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-_ToString/#fun-box-_u64x-u64-val-neg-bool-val-optional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  _u64(x: U64 val, neg: Bool val, optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-U128/", 
            "text": "primitive builtin/U128 is \n_UnsignedInteger\n[\nU128\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nU128\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nU128\n val\n\n\nfun box  \nadd\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \nbitwidth\n(): \nU128\n val\n\n\nfun box  \nbswap\n(): \nU128\n val\n\n\nfun box  \nclz\n(): \nU128\n val\n\n\nfun box  \ncompare\n(that: \nU128\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nU128\n val\n\n\nfun box  \ndiv\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \ndivmod\n(y: \nU128\n val): (\nU128\n val , \nU128\n val)\n\n\nfun box  \neq\n(y: \nU128\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nU128\n val\n\n\nfun box  \nge\n(y: \nU128\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nU128\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nU128\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nU128\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nU128\n val): \nU128\n val\n\n\nfun tag  \nmax_value\n(): \nU128\n val\n\n\nfun box  \nmin\n(y: \nU128\n val): \nU128\n val\n\n\nfun tag  \nmin_value\n(): \nU128\n val\n\n\nfun box  \nmod\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \nmul\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \nne\n(y: \nU128\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nU128\n val\n\n\nfun box  \nop_and\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \nop_not\n(): \nU128\n val\n\n\nfun box  \nop_or\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \nop_xor\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \nponyint_next_pow2\n(): \nU128\n val\n\n\nfun box  \npopcount\n(): \nU128\n val\n\n\nfun box  \nrotl\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \nrotr\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \nshl\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \nshr\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nU128\n val): \nU128\n val\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive U128"
        }, 
        {
            "location": "/builtin-U128/#primitive-builtinu128-is-_unsignedinteger91u128-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/U128 is _UnsignedInteger[U128 val] val"
        }, 
        {
            "location": "/builtin-U128/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-U128/#new-createoptional-value-u128-val", 
            "text": "", 
            "title": "new create(optional value: U128 val)"
        }, 
        {
            "location": "/builtin-U128/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-U128/#fun-box-abs-u128-val", 
            "text": "", 
            "title": "fun box  abs(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-addy-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  add(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-bitwidth-u128-val", 
            "text": "", 
            "title": "fun box  bitwidth(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-bswap-u128-val", 
            "text": "", 
            "title": "fun box  bswap(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-clz-u128-val", 
            "text": "", 
            "title": "fun box  clz(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-comparethat-u128-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: U128 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-U128/#fun-box-ctz-u128-val", 
            "text": "", 
            "title": "fun box  ctz(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-divy-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  div(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-divmody-u128-val-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  divmod(y: U128 val): (U128 val , U128 val)"
        }, 
        {
            "location": "/builtin-U128/#fun-box-eqy-u128-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: U128 val): Bool val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-U128/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-u128-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-gey-u128-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: U128 val): Bool val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-gty-u128-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: U128 val): Bool val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-ley-u128-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: U128 val): Bool val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-lty-u128-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: U128 val): Bool val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-maxy-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  max(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-tag-max_value-u128-val", 
            "text": "", 
            "title": "fun tag  max_value(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-miny-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  min(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-tag-min_value-u128-val", 
            "text": "", 
            "title": "fun tag  min_value(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-mody-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  mod(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-muly-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  mul(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-ney-u128-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: U128 val): Bool val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-neg-u128-val", 
            "text": "", 
            "title": "fun box  neg(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-op_andy-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  op_and(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-op_not-u128-val", 
            "text": "", 
            "title": "fun box  op_not(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-op_ory-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  op_or(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-op_xory-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  op_xor(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-ponyint_next_pow2-u128-val", 
            "text": "", 
            "title": "fun box  ponyint_next_pow2(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-popcount-u128-val", 
            "text": "", 
            "title": "fun box  popcount(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-rotly-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  rotl(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-rotry-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  rotr(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-shly-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  shl(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-shry-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  shr(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-U128/#fun-box-suby-u128-val-u128-val", 
            "text": "", 
            "title": "fun box  sub(y: U128 val): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-U128/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-U16/", 
            "text": "primitive builtin/U16 is \n_UnsignedInteger\n[\nU16\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nU16\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nU16\n val\n\n\nfun box  \nadd\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \naddc\n(y: \nU16\n val): (\nU16\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nU16\n val\n\n\nfun box  \nbswap\n(): \nU16\n val\n\n\nfun box  \nclz\n(): \nU16\n val\n\n\nfun box  \ncompare\n(that: \nU16\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nU16\n val\n\n\nfun box  \ndiv\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \ndivmod\n(y: \nU16\n val): (\nU16\n val , \nU16\n val)\n\n\nfun box  \neq\n(y: \nU16\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nU16\n val\n\n\nfun box  \nge\n(y: \nU16\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nU16\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nU16\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nU16\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nU16\n val): \nU16\n val\n\n\nfun tag  \nmax_value\n(): \nU16\n val\n\n\nfun box  \nmin\n(y: \nU16\n val): \nU16\n val\n\n\nfun tag  \nmin_value\n(): \nU16\n val\n\n\nfun box  \nmod\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \nmul\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \nmulc\n(y: \nU16\n val): (\nU16\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nU16\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nU16\n val\n\n\nfun box  \nop_and\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \nop_not\n(): \nU16\n val\n\n\nfun box  \nop_or\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \nop_xor\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \nponyint_next_pow2\n(): \nU16\n val\n\n\nfun box  \npopcount\n(): \nU16\n val\n\n\nfun box  \nrotl\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \nrotr\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \nshl\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \nshr\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nU16\n val): \nU16\n val\n\n\nfun box  \nsubc\n(y: \nU16\n val): (\nU16\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive U16"
        }, 
        {
            "location": "/builtin-U16/#primitive-builtinu16-is-_unsignedinteger91u16-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/U16 is _UnsignedInteger[U16 val] val"
        }, 
        {
            "location": "/builtin-U16/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-U16/#new-createoptional-value-u16-val", 
            "text": "", 
            "title": "new create(optional value: U16 val)"
        }, 
        {
            "location": "/builtin-U16/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-U16/#fun-box-abs-u16-val", 
            "text": "", 
            "title": "fun box  abs(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-addy-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  add(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-addcy-u16-val-u16-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: U16 val): (U16 val , Bool val)"
        }, 
        {
            "location": "/builtin-U16/#fun-box-bitwidth-u16-val", 
            "text": "", 
            "title": "fun box  bitwidth(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-bswap-u16-val", 
            "text": "", 
            "title": "fun box  bswap(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-clz-u16-val", 
            "text": "", 
            "title": "fun box  clz(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-comparethat-u16-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: U16 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-U16/#fun-box-ctz-u16-val", 
            "text": "", 
            "title": "fun box  ctz(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-divy-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  div(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-divmody-u16-val-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  divmod(y: U16 val): (U16 val , U16 val)"
        }, 
        {
            "location": "/builtin-U16/#fun-box-eqy-u16-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: U16 val): Bool val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-U16/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-u16-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-gey-u16-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: U16 val): Bool val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-gty-u16-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: U16 val): Bool val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-ley-u16-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: U16 val): Bool val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-lty-u16-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: U16 val): Bool val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-maxy-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  max(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-tag-max_value-u16-val", 
            "text": "", 
            "title": "fun tag  max_value(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-miny-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  min(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-tag-min_value-u16-val", 
            "text": "", 
            "title": "fun tag  min_value(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-mody-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  mod(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-muly-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  mul(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-mulcy-u16-val-u16-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: U16 val): (U16 val , Bool val)"
        }, 
        {
            "location": "/builtin-U16/#fun-box-ney-u16-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: U16 val): Bool val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-neg-u16-val", 
            "text": "", 
            "title": "fun box  neg(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-op_andy-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  op_and(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-op_not-u16-val", 
            "text": "", 
            "title": "fun box  op_not(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-op_ory-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  op_or(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-op_xory-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  op_xor(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-ponyint_next_pow2-u16-val", 
            "text": "", 
            "title": "fun box  ponyint_next_pow2(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-popcount-u16-val", 
            "text": "", 
            "title": "fun box  popcount(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-rotly-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  rotl(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-rotry-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  rotr(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-shly-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  shl(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-shry-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  shr(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-U16/#fun-box-suby-u16-val-u16-val", 
            "text": "", 
            "title": "fun box  sub(y: U16 val): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-subcy-u16-val-u16-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: U16 val): (U16 val , Bool val)"
        }, 
        {
            "location": "/builtin-U16/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-U16/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-U32/", 
            "text": "primitive builtin/U32 is \n_UnsignedInteger\n[\nU32\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nU32\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nU32\n val\n\n\nfun box  \nadd\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \naddc\n(y: \nU32\n val): (\nU32\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nU32\n val\n\n\nfun box  \nbswap\n(): \nU32\n val\n\n\nfun box  \nclz\n(): \nU32\n val\n\n\nfun box  \ncompare\n(that: \nU32\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nU32\n val\n\n\nfun box  \ndiv\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \ndivmod\n(y: \nU32\n val): (\nU32\n val , \nU32\n val)\n\n\nfun box  \neq\n(y: \nU32\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nU32\n val\n\n\nfun box  \nge\n(y: \nU32\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nU32\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nU32\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nU32\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nU32\n val): \nU32\n val\n\n\nfun tag  \nmax_value\n(): \nU32\n val\n\n\nfun box  \nmin\n(y: \nU32\n val): \nU32\n val\n\n\nfun tag  \nmin_value\n(): \nU32\n val\n\n\nfun box  \nmod\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \nmul\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \nmulc\n(y: \nU32\n val): (\nU32\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nU32\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nU32\n val\n\n\nfun box  \nop_and\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \nop_not\n(): \nU32\n val\n\n\nfun box  \nop_or\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \nop_xor\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \nponyint_next_pow2\n(): \nU32\n val\n\n\nfun box  \npopcount\n(): \nU32\n val\n\n\nfun box  \nrotl\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \nrotr\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \nshl\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \nshr\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nU32\n val): \nU32\n val\n\n\nfun box  \nsubc\n(y: \nU32\n val): (\nU32\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive U32"
        }, 
        {
            "location": "/builtin-U32/#primitive-builtinu32-is-_unsignedinteger91u32-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/U32 is _UnsignedInteger[U32 val] val"
        }, 
        {
            "location": "/builtin-U32/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-U32/#new-createoptional-value-u32-val", 
            "text": "", 
            "title": "new create(optional value: U32 val)"
        }, 
        {
            "location": "/builtin-U32/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-U32/#fun-box-abs-u32-val", 
            "text": "", 
            "title": "fun box  abs(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-addy-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  add(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-addcy-u32-val-u32-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: U32 val): (U32 val , Bool val)"
        }, 
        {
            "location": "/builtin-U32/#fun-box-bitwidth-u32-val", 
            "text": "", 
            "title": "fun box  bitwidth(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-bswap-u32-val", 
            "text": "", 
            "title": "fun box  bswap(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-clz-u32-val", 
            "text": "", 
            "title": "fun box  clz(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-comparethat-u32-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: U32 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-U32/#fun-box-ctz-u32-val", 
            "text": "", 
            "title": "fun box  ctz(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-divy-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  div(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-divmody-u32-val-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  divmod(y: U32 val): (U32 val , U32 val)"
        }, 
        {
            "location": "/builtin-U32/#fun-box-eqy-u32-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: U32 val): Bool val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-U32/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-u32-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-gey-u32-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: U32 val): Bool val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-gty-u32-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: U32 val): Bool val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-ley-u32-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: U32 val): Bool val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-lty-u32-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: U32 val): Bool val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-maxy-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  max(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-tag-max_value-u32-val", 
            "text": "", 
            "title": "fun tag  max_value(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-miny-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  min(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-tag-min_value-u32-val", 
            "text": "", 
            "title": "fun tag  min_value(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-mody-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  mod(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-muly-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  mul(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-mulcy-u32-val-u32-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: U32 val): (U32 val , Bool val)"
        }, 
        {
            "location": "/builtin-U32/#fun-box-ney-u32-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: U32 val): Bool val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-neg-u32-val", 
            "text": "", 
            "title": "fun box  neg(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-op_andy-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  op_and(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-op_not-u32-val", 
            "text": "", 
            "title": "fun box  op_not(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-op_ory-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  op_or(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-op_xory-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  op_xor(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-ponyint_next_pow2-u32-val", 
            "text": "", 
            "title": "fun box  ponyint_next_pow2(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-popcount-u32-val", 
            "text": "", 
            "title": "fun box  popcount(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-rotly-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  rotl(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-rotry-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  rotr(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-shly-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  shl(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-shry-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  shr(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-U32/#fun-box-suby-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  sub(y: U32 val): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-subcy-u32-val-u32-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: U32 val): (U32 val , Bool val)"
        }, 
        {
            "location": "/builtin-U32/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-U32/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-U64/", 
            "text": "primitive builtin/U64 is \n_UnsignedInteger\n[\nU64\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nU64\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nU64\n val\n\n\nfun box  \nadd\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \naddc\n(y: \nU64\n val): (\nU64\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nU64\n val\n\n\nfun box  \nbswap\n(): \nU64\n val\n\n\nfun box  \nclz\n(): \nU64\n val\n\n\nfun box  \ncompare\n(that: \nU64\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nU64\n val\n\n\nfun box  \ndiv\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \ndivmod\n(y: \nU64\n val): (\nU64\n val , \nU64\n val)\n\n\nfun box  \neq\n(y: \nU64\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nU64\n val\n\n\nfun box  \nge\n(y: \nU64\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nU64\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nU64\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nU64\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nU64\n val): \nU64\n val\n\n\nfun tag  \nmax_value\n(): \nU64\n val\n\n\nfun box  \nmin\n(y: \nU64\n val): \nU64\n val\n\n\nfun tag  \nmin_value\n(): \nU64\n val\n\n\nfun box  \nmod\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \nmul\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \nmulc\n(y: \nU64\n val): (\nU64\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nU64\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nU64\n val\n\n\nfun box  \nop_and\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \nop_not\n(): \nU64\n val\n\n\nfun box  \nop_or\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \nop_xor\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \nponyint_next_pow2\n(): \nU64\n val\n\n\nfun box  \npopcount\n(): \nU64\n val\n\n\nfun box  \nrotl\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \nrotr\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \nshl\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \nshr\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nU64\n val): \nU64\n val\n\n\nfun box  \nsubc\n(y: \nU64\n val): (\nU64\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive U64"
        }, 
        {
            "location": "/builtin-U64/#primitive-builtinu64-is-_unsignedinteger91u64-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/U64 is _UnsignedInteger[U64 val] val"
        }, 
        {
            "location": "/builtin-U64/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-U64/#new-createoptional-value-u64-val", 
            "text": "", 
            "title": "new create(optional value: U64 val)"
        }, 
        {
            "location": "/builtin-U64/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-U64/#fun-box-abs-u64-val", 
            "text": "", 
            "title": "fun box  abs(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-addy-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  add(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-addcy-u64-val-u64-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: U64 val): (U64 val , Bool val)"
        }, 
        {
            "location": "/builtin-U64/#fun-box-bitwidth-u64-val", 
            "text": "", 
            "title": "fun box  bitwidth(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-bswap-u64-val", 
            "text": "", 
            "title": "fun box  bswap(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-clz-u64-val", 
            "text": "", 
            "title": "fun box  clz(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-comparethat-u64-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: U64 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-U64/#fun-box-ctz-u64-val", 
            "text": "", 
            "title": "fun box  ctz(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-divy-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  div(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-divmody-u64-val-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  divmod(y: U64 val): (U64 val , U64 val)"
        }, 
        {
            "location": "/builtin-U64/#fun-box-eqy-u64-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: U64 val): Bool val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-u64-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-gey-u64-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: U64 val): Bool val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-gty-u64-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: U64 val): Bool val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-ley-u64-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: U64 val): Bool val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-lty-u64-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: U64 val): Bool val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-maxy-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  max(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-tag-max_value-u64-val", 
            "text": "", 
            "title": "fun tag  max_value(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-miny-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  min(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-tag-min_value-u64-val", 
            "text": "", 
            "title": "fun tag  min_value(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-mody-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  mod(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-muly-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  mul(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-mulcy-u64-val-u64-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: U64 val): (U64 val , Bool val)"
        }, 
        {
            "location": "/builtin-U64/#fun-box-ney-u64-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: U64 val): Bool val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-neg-u64-val", 
            "text": "", 
            "title": "fun box  neg(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-op_andy-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  op_and(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-op_not-u64-val", 
            "text": "", 
            "title": "fun box  op_not(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-op_ory-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  op_or(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-op_xory-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  op_xor(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-ponyint_next_pow2-u64-val", 
            "text": "", 
            "title": "fun box  ponyint_next_pow2(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-popcount-u64-val", 
            "text": "", 
            "title": "fun box  popcount(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-rotly-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  rotl(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-rotry-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  rotr(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-shly-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  shl(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-shry-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  shr(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-U64/#fun-box-suby-u64-val-u64-val", 
            "text": "", 
            "title": "fun box  sub(y: U64 val): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-subcy-u64-val-u64-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: U64 val): (U64 val , Bool val)"
        }, 
        {
            "location": "/builtin-U64/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-U64/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-U8/", 
            "text": "primitive builtin/U8 is \n_UnsignedInteger\n[\nU8\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nU8\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nU8\n val\n\n\nfun box  \nadd\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \naddc\n(y: \nU8\n val): (\nU8\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nU8\n val\n\n\nfun box  \nbswap\n(): \nU8\n val\n\n\nfun box  \nclz\n(): \nU8\n val\n\n\nfun box  \ncompare\n(that: \nU8\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nU8\n val\n\n\nfun box  \ndiv\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \ndivmod\n(y: \nU8\n val): (\nU8\n val , \nU8\n val)\n\n\nfun box  \neq\n(y: \nU8\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): \nU8\n val\n\n\nfun box  \nge\n(y: \nU8\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nU8\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nU8\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nU8\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nU8\n val): \nU8\n val\n\n\nfun tag  \nmax_value\n(): \nU8\n val\n\n\nfun box  \nmin\n(y: \nU8\n val): \nU8\n val\n\n\nfun tag  \nmin_value\n(): \nU8\n val\n\n\nfun box  \nmod\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \nmul\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \nmulc\n(y: \nU8\n val): (\nU8\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nU8\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nU8\n val\n\n\nfun box  \nop_and\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \nop_not\n(): \nU8\n val\n\n\nfun box  \nop_or\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \nop_xor\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \nponyint_next_pow2\n(): \nU8\n val\n\n\nfun box  \npopcount\n(): \nU8\n val\n\n\nfun box  \nrotl\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \nrotr\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \nshl\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \nshr\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nU8\n val): \nU8\n val\n\n\nfun box  \nsubc\n(y: \nU8\n val): (\nU8\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive U8"
        }, 
        {
            "location": "/builtin-U8/#primitive-builtinu8-is-_unsignedinteger91u8-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/U8 is _UnsignedInteger[U8 val] val"
        }, 
        {
            "location": "/builtin-U8/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-U8/#new-createoptional-value-u8-val", 
            "text": "", 
            "title": "new create(optional value: U8 val)"
        }, 
        {
            "location": "/builtin-U8/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-U8/#fun-box-abs-u8-val", 
            "text": "", 
            "title": "fun box  abs(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-addy-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  add(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-addcy-u8-val-u8-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: U8 val): (U8 val , Bool val)"
        }, 
        {
            "location": "/builtin-U8/#fun-box-bitwidth-u8-val", 
            "text": "", 
            "title": "fun box  bitwidth(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-bswap-u8-val", 
            "text": "", 
            "title": "fun box  bswap(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-clz-u8-val", 
            "text": "", 
            "title": "fun box  clz(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-comparethat-u8-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: U8 val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-U8/#fun-box-ctz-u8-val", 
            "text": "", 
            "title": "fun box  ctz(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-divy-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  div(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-divmody-u8-val-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  divmod(y: U8 val): (U8 val , U8 val)"
        }, 
        {
            "location": "/builtin-U8/#fun-box-eqy-u8-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: U8 val): Bool val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-U8/#fun-tag-from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b-val93-val93a-b-val-u8-val", 
            "text": "", 
            "title": "fun tag  from[B: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[B val] val)](a: B val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-gey-u8-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: U8 val): Bool val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-gty-u8-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: U8 val): Bool val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-ley-u8-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: U8 val): Bool val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-lty-u8-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: U8 val): Bool val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-maxy-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  max(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-tag-max_value-u8-val", 
            "text": "", 
            "title": "fun tag  max_value(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-miny-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  min(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-tag-min_value-u8-val", 
            "text": "", 
            "title": "fun tag  min_value(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-mody-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  mod(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-muly-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  mul(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-mulcy-u8-val-u8-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: U8 val): (U8 val , Bool val)"
        }, 
        {
            "location": "/builtin-U8/#fun-box-ney-u8-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: U8 val): Bool val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-neg-u8-val", 
            "text": "", 
            "title": "fun box  neg(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-op_andy-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  op_and(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-op_not-u8-val", 
            "text": "", 
            "title": "fun box  op_not(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-op_ory-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  op_or(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-op_xory-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  op_xor(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-ponyint_next_pow2-u8-val", 
            "text": "", 
            "title": "fun box  ponyint_next_pow2(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-popcount-u8-val", 
            "text": "", 
            "title": "fun box  popcount(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-rotly-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  rotl(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-rotry-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  rotr(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-shly-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  shl(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-shry-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  shr(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-U8/#fun-box-suby-u8-val-u8-val", 
            "text": "", 
            "title": "fun box  sub(y: U8 val): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-subcy-u8-val-u8-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: U8 val): (U8 val , Bool val)"
        }, 
        {
            "location": "/builtin-U8/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-U8/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-ULong/", 
            "text": "primitive builtin/ULong is \n_UnsignedInteger\n[\nULong\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nULong\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nULong\n val\n\n\nfun box  \nadd\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \naddc\n(y: \nULong\n val): (\nULong\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nULong\n val\n\n\nfun box  \nbswap\n(): \nULong\n val\n\n\nfun box  \nclz\n(): \nULong\n val\n\n\nfun box  \ncompare\n(that: \nULong\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nULong\n val\n\n\nfun box  \ndiv\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \ndivmod\n(y: \nULong\n val): (\nULong\n val , \nULong\n val)\n\n\nfun box  \neq\n(y: \nULong\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nULong\n val\n\n\nfun box  \nge\n(y: \nULong\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nULong\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nULong\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nULong\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nULong\n val): \nULong\n val\n\n\nfun tag  \nmax_value\n(): \nULong\n val\n\n\nfun box  \nmin\n(y: \nULong\n val): \nULong\n val\n\n\nfun tag  \nmin_value\n(): \nULong\n val\n\n\nfun box  \nmod\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \nmul\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \nmulc\n(y: \nULong\n val): (\nULong\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nULong\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nULong\n val\n\n\nfun box  \nop_and\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \nop_not\n(): \nULong\n val\n\n\nfun box  \nop_or\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \nop_xor\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \nponyint_next_pow2\n(): \nULong\n val\n\n\nfun box  \npopcount\n(): \nULong\n val\n\n\nfun box  \nrotl\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \nrotr\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \nshl\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \nshr\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nULong\n val): \nULong\n val\n\n\nfun box  \nsubc\n(y: \nULong\n val): (\nULong\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive ULong"
        }, 
        {
            "location": "/builtin-ULong/#primitive-builtinulong-is-_unsignedinteger91ulong-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/ULong is _UnsignedInteger[ULong val] val"
        }, 
        {
            "location": "/builtin-ULong/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ULong/#new-createoptional-value-ulong-val", 
            "text": "", 
            "title": "new create(optional value: ULong val)"
        }, 
        {
            "location": "/builtin-ULong/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-abs-ulong-val", 
            "text": "", 
            "title": "fun box  abs(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-addy-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  add(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-addcy-ulong-val-ulong-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: ULong val): (ULong val , Bool val)"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-bitwidth-ulong-val", 
            "text": "", 
            "title": "fun box  bitwidth(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-bswap-ulong-val", 
            "text": "", 
            "title": "fun box  bswap(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-clz-ulong-val", 
            "text": "", 
            "title": "fun box  clz(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-comparethat-ulong-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: ULong val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-ctz-ulong-val", 
            "text": "", 
            "title": "fun box  ctz(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-divy-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  div(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-divmody-ulong-val-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  divmod(y: ULong val): (ULong val , ULong val)"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-eqy-ulong-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: ULong val): Bool val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-ulong-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-gey-ulong-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: ULong val): Bool val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-gty-ulong-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: ULong val): Bool val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-ley-ulong-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: ULong val): Bool val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-lty-ulong-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: ULong val): Bool val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-maxy-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  max(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-tag-max_value-ulong-val", 
            "text": "", 
            "title": "fun tag  max_value(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-miny-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  min(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-tag-min_value-ulong-val", 
            "text": "", 
            "title": "fun tag  min_value(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-mody-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  mod(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-muly-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  mul(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-mulcy-ulong-val-ulong-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: ULong val): (ULong val , Bool val)"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-ney-ulong-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: ULong val): Bool val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-neg-ulong-val", 
            "text": "", 
            "title": "fun box  neg(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-op_andy-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  op_and(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-op_not-ulong-val", 
            "text": "", 
            "title": "fun box  op_not(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-op_ory-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  op_or(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-op_xory-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  op_xor(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-ponyint_next_pow2-ulong-val", 
            "text": "", 
            "title": "fun box  ponyint_next_pow2(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-popcount-ulong-val", 
            "text": "", 
            "title": "fun box  popcount(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-rotly-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  rotl(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-rotry-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  rotr(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-shly-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  shl(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-shry-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  shr(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-suby-ulong-val-ulong-val", 
            "text": "", 
            "title": "fun box  sub(y: ULong val): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-subcy-ulong-val-ulong-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: ULong val): (ULong val , Bool val)"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-ULong/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-USize/", 
            "text": "primitive builtin/USize is \n_UnsignedInteger\n[\nUSize\n val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(optional value: \nUSize\n val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): \nUSize\n val\n\n\nfun box  \nadd\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \naddc\n(y: \nUSize\n val): (\nUSize\n val , \nBool\n val)\n\n\nfun box  \nbitwidth\n(): \nUSize\n val\n\n\nfun box  \nbswap\n(): \nUSize\n val\n\n\nfun box  \nclz\n(): \nUSize\n val\n\n\nfun box  \ncompare\n(that: \nUSize\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): \nUSize\n val\n\n\nfun box  \ndiv\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \ndivmod\n(y: \nUSize\n val): (\nUSize\n val , \nUSize\n val)\n\n\nfun box  \neq\n(y: \nUSize\n val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nUSize\n val\n\n\nfun box  \nge\n(y: \nUSize\n val): \nBool\n val\n\n\nfun box  \ngt\n(y: \nUSize\n val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: \nUSize\n val): \nBool\n val\n\n\nfun box  \nlt\n(y: \nUSize\n val): \nBool\n val\n\n\nfun box  \nmax\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun tag  \nmax_value\n(): \nUSize\n val\n\n\nfun box  \nmin\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun tag  \nmin_value\n(): \nUSize\n val\n\n\nfun box  \nmod\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \nmul\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \nmulc\n(y: \nUSize\n val): (\nUSize\n val , \nBool\n val)\n\n\nfun box  \nne\n(y: \nUSize\n val): \nBool\n val\n\n\nfun box  \nneg\n(): \nUSize\n val\n\n\nfun box  \nop_and\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \nop_not\n(): \nUSize\n val\n\n\nfun box  \nop_or\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \nop_xor\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \nponyint_next_pow2\n(): \nUSize\n val\n\n\nfun box  \npopcount\n(): \nUSize\n val\n\n\nfun box  \nrotl\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \nrotr\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \nshl\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \nshr\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: \nUSize\n val): \nUSize\n val\n\n\nfun box  \nsubc\n(y: \nUSize\n val): (\nUSize\n val , \nBool\n val)\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "primitive USize"
        }, 
        {
            "location": "/builtin-USize/#primitive-builtinusize-is-_unsignedinteger91usize-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive builtin/USize is _UnsignedInteger[USize val] val"
        }, 
        {
            "location": "/builtin-USize/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-USize/#new-createoptional-value-usize-val", 
            "text": "", 
            "title": "new create(optional value: USize val)"
        }, 
        {
            "location": "/builtin-USize/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-USize/#fun-box-abs-usize-val", 
            "text": "", 
            "title": "fun box  abs(): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-addy-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  add(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-addcy-usize-val-usize-val-bool-val", 
            "text": "", 
            "title": "fun box  addc(y: USize val): (USize val , Bool val)"
        }, 
        {
            "location": "/builtin-USize/#fun-box-bitwidth-usize-val", 
            "text": "", 
            "title": "fun box  bitwidth(): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-bswap-usize-val", 
            "text": "", 
            "title": "fun box  bswap(): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-clz-usize-val", 
            "text": "", 
            "title": "fun box  clz(): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-comparethat-usize-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: USize val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-USize/#fun-box-ctz-usize-val", 
            "text": "", 
            "title": "fun box  ctz(): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-divy-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  div(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-divmody-usize-val-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  divmod(y: USize val): (USize val , USize val)"
        }, 
        {
            "location": "/builtin-USize/#fun-box-eqy-usize-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: USize val): Bool val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-USize/#fun-tag-from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a-val93-val93a-a-val-usize-val", 
            "text": "", 
            "title": "fun tag  from[A: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[A val] val)](a: A val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-gey-usize-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: USize val): Bool val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-gty-usize-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: USize val): Bool val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-ley-usize-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: USize val): Bool val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-lty-usize-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: USize val): Bool val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-maxy-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  max(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-tag-max_value-usize-val", 
            "text": "", 
            "title": "fun tag  max_value(): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-miny-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  min(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-tag-min_value-usize-val", 
            "text": "", 
            "title": "fun tag  min_value(): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-mody-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  mod(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-muly-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  mul(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-mulcy-usize-val-usize-val-bool-val", 
            "text": "", 
            "title": "fun box  mulc(y: USize val): (USize val , Bool val)"
        }, 
        {
            "location": "/builtin-USize/#fun-box-ney-usize-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: USize val): Bool val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-neg-usize-val", 
            "text": "", 
            "title": "fun box  neg(): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-op_andy-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  op_and(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-op_not-usize-val", 
            "text": "", 
            "title": "fun box  op_not(): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-op_ory-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  op_or(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-op_xory-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  op_xor(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-ponyint_next_pow2-usize-val", 
            "text": "", 
            "title": "fun box  ponyint_next_pow2(): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-popcount-usize-val", 
            "text": "", 
            "title": "fun box  popcount(): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-rotly-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  rotl(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-rotry-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  rotr(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-shly-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  shl(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-shry-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  shr(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-USize/#fun-box-suby-usize-val-usize-val", 
            "text": "", 
            "title": "fun box  sub(y: USize val): USize val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-subcy-usize-val-usize-val-bool-val", 
            "text": "", 
            "title": "fun box  subc(y: USize val): (USize val , Bool val)"
        }, 
        {
            "location": "/builtin-USize/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-USize/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin-Unsigned/", 
            "text": "type builtin/Unsigned is ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)\n\n\nNo doc string provided.", 
            "title": "type Unsigned"
        }, 
        {
            "location": "/builtin-Unsigned/#type-builtinunsigned-is-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val", 
            "text": "No doc string provided.", 
            "title": "type builtin/Unsigned is ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/", 
            "text": "trait builtin/_UnsignedInteger[A: \n_UnsignedInteger\n[A val] val] is \nInteger\n[A val] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(value: A val)\n\n\nPublic Functions\n\n\nfun box  \nabs\n(): A val\n\n\nfun box  \nadd\n(y: A val): A val\n\n\nfun box  \nbitwidth\n(): A val\n\n\nfun box  \nbswap\n(): A val\n\n\nfun box  \nclz\n(): A val\n\n\nfun box  \ncompare\n(that: A val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun box  \nctz\n(): A val\n\n\nfun box  \ndiv\n(y: A val): A val\n\n\nfun box  \ndivmod\n(y: A val): (A val , A val)\n\n\nfun box  \neq\n(y: A val): \nBool\n val\n\n\nfun box  \nf32\n(): \nF32\n val\n\n\nfun box  \nf64\n(): \nF64\n val\n\n\nfun tag  \nfrom\n[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): A val\n\n\nfun box  \nge\n(y: A val): \nBool\n val\n\n\nfun box  \ngt\n(y: A val): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \ni128\n(): \nI128\n val\n\n\nfun box  \ni16\n(): \nI16\n val\n\n\nfun box  \ni32\n(): \nI32\n val\n\n\nfun box  \ni64\n(): \nI64\n val\n\n\nfun box  \ni8\n(): \nI8\n val\n\n\nfun box  \nilong\n(): \nILong\n val\n\n\nfun box  \nisize\n(): \nISize\n val\n\n\nfun box  \nle\n(y: A val): \nBool\n val\n\n\nfun box  \nlt\n(y: A val): \nBool\n val\n\n\nfun box  \nmax\n(y: A val): A val\n\n\nfun tag  \nmax_value\n(): A val\n\n\nfun box  \nmin\n(y: A val): A val\n\n\nfun tag  \nmin_value\n(): A val\n\n\nfun box  \nmod\n(y: A val): A val\n\n\nfun box  \nmul\n(y: A val): A val\n\n\nfun box  \nne\n(y: A val): \nBool\n val\n\n\nfun box  \nneg\n(): A val\n\n\nfun box  \nop_and\n(y: A val): A val\n\n\nfun box  \nop_not\n(): A val\n\n\nfun box  \nop_or\n(y: A val): A val\n\n\nfun box  \nop_xor\n(y: A val): A val\n\n\nfun box  \npopcount\n(): A val\n\n\nfun box  \nrotl\n(y: A val): A val\n\n\nfun box  \nrotr\n(y: A val): A val\n\n\nfun box  \nshl\n(y: A val): A val\n\n\nfun box  \nshr\n(y: A val): A val\n\n\nfun box  \nstring\n(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nfun box  \nsub\n(y: A val): A val\n\n\nfun box  \nu128\n(): \nU128\n val\n\n\nfun box  \nu16\n(): \nU16\n val\n\n\nfun box  \nu32\n(): \nU32\n val\n\n\nfun box  \nu64\n(): \nU64\n val\n\n\nfun box  \nu8\n(): \nU8\n val\n\n\nfun box  \nulong\n(): \nULong\n val\n\n\nfun box  \nusize\n(): \nUSize\n val", 
            "title": "trait _UnsignedInteger"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#trait-builtin_unsignedinteger91a-_unsignedinteger91a-val93-val93-is-integer91a-val93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "trait builtin/_UnsignedInteger[A: _UnsignedInteger[A val] val] is Integer[A val] val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#new-createvalue-a-val", 
            "text": "", 
            "title": "new create(value: A val)"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-abs-a-val", 
            "text": "", 
            "title": "fun box  abs(): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-addy-a-val-a-val", 
            "text": "", 
            "title": "fun box  add(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-bitwidth-a-val", 
            "text": "", 
            "title": "fun box  bitwidth(): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-bswap-a-val", 
            "text": "", 
            "title": "fun box  bswap(): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-clz-a-val", 
            "text": "", 
            "title": "fun box  clz(): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-comparethat-a-val-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: A val): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-ctz-a-val", 
            "text": "", 
            "title": "fun box  ctz(): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-divy-a-val-a-val", 
            "text": "", 
            "title": "fun box  div(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-divmody-a-val-a-val-a-val", 
            "text": "", 
            "title": "fun box  divmod(y: A val): (A val , A val)"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-eqy-a-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-f32-f32-val", 
            "text": "", 
            "title": "fun box  f32(): F32 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-f64-f64-val", 
            "text": "", 
            "title": "fun box  f64(): F64 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-tag-from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b-val93-val93a-b-val-a-val", 
            "text": "", 
            "title": "fun tag  from[B: (((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)) &amp; Real[B val] val)](a: B val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-gey-a-val-bool-val", 
            "text": "", 
            "title": "fun box  ge(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-gty-a-val-bool-val", 
            "text": "", 
            "title": "fun box  gt(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-i128-i128-val", 
            "text": "", 
            "title": "fun box  i128(): I128 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-i16-i16-val", 
            "text": "", 
            "title": "fun box  i16(): I16 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-i32-i32-val", 
            "text": "", 
            "title": "fun box  i32(): I32 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-i64-i64-val", 
            "text": "", 
            "title": "fun box  i64(): I64 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-i8-i8-val", 
            "text": "", 
            "title": "fun box  i8(): I8 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-ilong-ilong-val", 
            "text": "", 
            "title": "fun box  ilong(): ILong val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-isize-isize-val", 
            "text": "", 
            "title": "fun box  isize(): ISize val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-ley-a-val-bool-val", 
            "text": "", 
            "title": "fun box  le(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-lty-a-val-bool-val", 
            "text": "", 
            "title": "fun box  lt(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-maxy-a-val-a-val", 
            "text": "", 
            "title": "fun box  max(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-tag-max_value-a-val", 
            "text": "", 
            "title": "fun tag  max_value(): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-miny-a-val-a-val", 
            "text": "", 
            "title": "fun box  min(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-tag-min_value-a-val", 
            "text": "", 
            "title": "fun tag  min_value(): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-mody-a-val-a-val", 
            "text": "", 
            "title": "fun box  mod(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-muly-a-val-a-val", 
            "text": "", 
            "title": "fun box  mul(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-ney-a-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(y: A val): Bool val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-neg-a-val", 
            "text": "", 
            "title": "fun box  neg(): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-op_andy-a-val-a-val", 
            "text": "", 
            "title": "fun box  op_and(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-op_not-a-val", 
            "text": "", 
            "title": "fun box  op_not(): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-op_ory-a-val-a-val", 
            "text": "", 
            "title": "fun box  op_or(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-op_xory-a-val-a-val", 
            "text": "", 
            "title": "fun box  op_xor(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-popcount-a-val", 
            "text": "", 
            "title": "fun box  popcount(): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-rotly-a-val-a-val", 
            "text": "", 
            "title": "fun box  rotl(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-rotry-a-val-a-val", 
            "text": "", 
            "title": "fun box  rotr(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-shly-a-val-a-val", 
            "text": "", 
            "title": "fun box  shl(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-shry-a-val-a-val", 
            "text": "", 
            "title": "fun box  shr(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-stringoptional-fmt-formatsettings91formatdefault-val-formatutf32-val-formatbinary-val-formatbinarybare-val-formatoctal-val-formatoctalbare-val-formathex-val-formathexbare-val-formathexsmall-val-formathexsmallbare-val-prefixdefault-val-prefixspace-val-prefixsign-val93-box-string-iso", 
            "text": "", 
            "title": "fun box  string(optional fmt: FormatSettings[(((((((((FormatDefault val | FormatUTF32 val) | FormatBinary val) | FormatBinaryBare val) | FormatOctal val) | FormatOctalBare val) | FormatHex val) | FormatHexBare val) | FormatHexSmall val) | FormatHexSmallBare val), ((PrefixDefault val | PrefixSpace val) | PrefixSign val)] box): String iso^"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-suby-a-val-a-val", 
            "text": "", 
            "title": "fun box  sub(y: A val): A val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-u128-u128-val", 
            "text": "", 
            "title": "fun box  u128(): U128 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-u16-u16-val", 
            "text": "", 
            "title": "fun box  u16(): U16 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-u32-u32-val", 
            "text": "", 
            "title": "fun box  u32(): U32 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-u64-u64-val", 
            "text": "", 
            "title": "fun box  u64(): U64 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-u8-u8-val", 
            "text": "", 
            "title": "fun box  u8(): U8 val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-ulong-ulong-val", 
            "text": "", 
            "title": "fun box  ulong(): ULong val"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#fun-box-usize-usize-val", 
            "text": "", 
            "title": "fun box  usize(): USize val"
        }, 
        {
            "location": "/builtin_test--index/", 
            "text": "Builtin Tests\n\n\nThis package contains the unit tests for the \nbuiltin\n package. These are here\nso \nbuiltin\n doesn't have to depend on the \nPonyTest\n package.\n\n\nEntities\n\n\n\n\nclass Callback\n\n\nactor Main\n\n\nclass _TestAbs\n\n\nclass _TestArrayInsert\n\n\nclass _TestArraySlice\n\n\nclass _TestCCallback\n\n\nclass _TestDivMod\n\n\nclass _TestFloatToString\n\n\nclass _TestIntToString\n\n\nclass _TestMath128\n\n\nclass _TestMaybePointer\n\n\nclass _TestSpecialValuesF32\n\n\nclass _TestSpecialValuesF64\n\n\nclass _TestStringCompare\n\n\nclass _TestStringCount\n\n\nclass _TestStringCut\n\n\nclass _TestStringJoin\n\n\nclass _TestStringLstrip\n\n\nclass _TestStringRemove\n\n\nclass _TestStringReplace\n\n\nclass _TestStringRstrip\n\n\nclass _TestStringRunes\n\n\nclass _TestStringSplit\n\n\nclass _TestStringStrip\n\n\nclass _TestStringSubstring\n\n\nclass _TestStringToBool\n\n\nclass _TestStringToFloat\n\n\nclass _TestStringToI8\n\n\nclass _TestStringToIntLarge\n\n\nclass _TestStringToU8\n\n\nstruct _TestStruct\n\n\nclass _TestValtrace\n\n\nactor _Valtrace", 
            "title": "Package"
        }, 
        {
            "location": "/builtin_test--index/#builtin-tests", 
            "text": "This package contains the unit tests for the  builtin  package. These are here\nso  builtin  doesn't have to depend on the  PonyTest  package.", 
            "title": "Builtin Tests"
        }, 
        {
            "location": "/builtin_test--index/#entities", 
            "text": "class Callback  actor Main  class _TestAbs  class _TestArrayInsert  class _TestArraySlice  class _TestCCallback  class _TestDivMod  class _TestFloatToString  class _TestIntToString  class _TestMath128  class _TestMaybePointer  class _TestSpecialValuesF32  class _TestSpecialValuesF64  class _TestStringCompare  class _TestStringCount  class _TestStringCut  class _TestStringJoin  class _TestStringLstrip  class _TestStringRemove  class _TestStringReplace  class _TestStringRstrip  class _TestStringRunes  class _TestStringSplit  class _TestStringStrip  class _TestStringSubstring  class _TestStringToBool  class _TestStringToFloat  class _TestStringToI8  class _TestStringToIntLarge  class _TestStringToU8  struct _TestStruct  class _TestValtrace  actor _Valtrace", 
            "title": "Entities"
        }, 
        {
            "location": "/builtin_test-Callback/", 
            "text": "class builtin_test/Callback\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(value: \nI32\n val): \nI32\n val", 
            "title": "class Callback"
        }, 
        {
            "location": "/builtin_test-Callback/#class-builtin_testcallback", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class builtin_test/Callback"
        }, 
        {
            "location": "/builtin_test-Callback/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-Callback/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-Callback/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-Callback/#fun-box-applyvalue-i32-val-i32-val", 
            "text": "", 
            "title": "fun box  apply(value: I32 val): I32 val"
        }, 
        {
            "location": "/builtin_test-Main/", 
            "text": "actor builtin_test/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/builtin_test-Main/#actor-builtin_testmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor builtin_test/Main is TestList ref"
        }, 
        {
            "location": "/builtin_test-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/builtin_test-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/builtin_test-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/builtin_test-_TestAbs/", 
            "text": "class builtin_test/_TestAbs is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest abs function\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestAbs"
        }, 
        {
            "location": "/builtin_test-_TestAbs/#class-builtin_test_testabs-is-unittest-ref", 
            "text": "Default capability :  iso  Test abs function", 
            "title": "class builtin_test/_TestAbs is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestAbs/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestAbs/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestAbs/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestAbs/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestAbs/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestAbs/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestAbs/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestAbs/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestArrayInsert/", 
            "text": "class builtin_test/_TestArrayInsert is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest inserting new element into array\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestArrayInsert"
        }, 
        {
            "location": "/builtin_test-_TestArrayInsert/#class-builtin_test_testarrayinsert-is-unittest-ref", 
            "text": "Default capability :  iso  Test inserting new element into array", 
            "title": "class builtin_test/_TestArrayInsert is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestArrayInsert/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestArrayInsert/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestArrayInsert/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestArrayInsert/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/builtin_test-_TestArrayInsert/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestArrayInsert/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestArrayInsert/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestArrayInsert/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestArraySlice/", 
            "text": "class builtin_test/_TestArraySlice is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest slicing arrays.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestArraySlice"
        }, 
        {
            "location": "/builtin_test-_TestArraySlice/#class-builtin_test_testarrayslice-is-unittest-ref", 
            "text": "Default capability :  iso  Test slicing arrays.", 
            "title": "class builtin_test/_TestArraySlice is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestArraySlice/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestArraySlice/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestArraySlice/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestArraySlice/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/builtin_test-_TestArraySlice/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestArraySlice/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestArraySlice/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestArraySlice/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestCCallback/", 
            "text": "class builtin_test/_TestCCallback is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest C callbacks.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestCCallback"
        }, 
        {
            "location": "/builtin_test-_TestCCallback/#class-builtin_test_testccallback-is-unittest-ref", 
            "text": "Default capability :  iso  Test C callbacks.", 
            "title": "class builtin_test/_TestCCallback is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestCCallback/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestCCallback/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestCCallback/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestCCallback/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestCCallback/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestCCallback/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestCCallback/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestCCallback/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestDivMod/", 
            "text": "class builtin_test/_TestDivMod is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest divmod on various bit widths.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestDivMod"
        }, 
        {
            "location": "/builtin_test-_TestDivMod/#class-builtin_test_testdivmod-is-unittest-ref", 
            "text": "Default capability :  iso  Test divmod on various bit widths.", 
            "title": "class builtin_test/_TestDivMod is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestDivMod/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestDivMod/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestDivMod/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestDivMod/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestDivMod/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestDivMod/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestDivMod/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestDivMod/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestFloatToString/", 
            "text": "class builtin_test/_TestFloatToString is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest converting floats to strings.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestFloatToString"
        }, 
        {
            "location": "/builtin_test-_TestFloatToString/#class-builtin_test_testfloattostring-is-unittest-ref", 
            "text": "Default capability :  iso  Test converting floats to strings.", 
            "title": "class builtin_test/_TestFloatToString is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestFloatToString/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestFloatToString/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestFloatToString/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestFloatToString/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestFloatToString/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestFloatToString/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestFloatToString/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestFloatToString/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestIntToString/", 
            "text": "class builtin_test/_TestIntToString is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest converting integers to strings.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestIntToString"
        }, 
        {
            "location": "/builtin_test-_TestIntToString/#class-builtin_test_testinttostring-is-unittest-ref", 
            "text": "Default capability :  iso  Test converting integers to strings.", 
            "title": "class builtin_test/_TestIntToString is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestIntToString/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestIntToString/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestIntToString/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestIntToString/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestIntToString/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestIntToString/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestIntToString/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestIntToString/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestMath128/", 
            "text": "class builtin_test/_TestMath128 is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest 128 bit integer math.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestMath128"
        }, 
        {
            "location": "/builtin_test-_TestMath128/#class-builtin_test_testmath128-is-unittest-ref", 
            "text": "Default capability :  iso  Test 128 bit integer math.", 
            "title": "class builtin_test/_TestMath128 is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestMath128/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestMath128/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestMath128/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestMath128/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestMath128/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestMath128/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestMath128/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestMath128/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestMaybePointer/", 
            "text": "class builtin_test/_TestMaybePointer is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest the MaybePointer type.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestMaybePointer"
        }, 
        {
            "location": "/builtin_test-_TestMaybePointer/#class-builtin_test_testmaybepointer-is-unittest-ref", 
            "text": "Default capability :  iso  Test the MaybePointer type.", 
            "title": "class builtin_test/_TestMaybePointer is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestMaybePointer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestMaybePointer/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestMaybePointer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestMaybePointer/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/builtin_test-_TestMaybePointer/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestMaybePointer/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestMaybePointer/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestMaybePointer/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF32/", 
            "text": "class builtin_test/_TestSpecialValuesF32 is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest whether a F32 is infinite or NaN.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestSpecialValuesF32"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#class-builtin_test_testspecialvaluesf32-is-unittest-ref", 
            "text": "Default capability :  iso  Test whether a F32 is infinite or NaN.", 
            "title": "class builtin_test/_TestSpecialValuesF32 is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF64/", 
            "text": "class builtin_test/_TestSpecialValuesF64 is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest whether a F64 is infinite or NaN.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestSpecialValuesF64"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#class-builtin_test_testspecialvaluesf64-is-unittest-ref", 
            "text": "Default capability :  iso  Test whether a F64 is infinite or NaN.", 
            "title": "class builtin_test/_TestSpecialValuesF64 is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringCompare/", 
            "text": "class builtin_test/_TestStringCompare is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest comparing strings.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringCompare"
        }, 
        {
            "location": "/builtin_test-_TestStringCompare/#class-builtin_test_teststringcompare-is-unittest-ref", 
            "text": "Default capability :  iso  Test comparing strings.", 
            "title": "class builtin_test/_TestStringCompare is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringCompare/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringCompare/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringCompare/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringCompare/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringCompare/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringCompare/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringCompare/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringCompare/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringCount/", 
            "text": "class builtin_test/_TestStringCount is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest String.count\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringCount"
        }, 
        {
            "location": "/builtin_test-_TestStringCount/#class-builtin_test_teststringcount-is-unittest-ref", 
            "text": "Default capability :  iso  Test String.count", 
            "title": "class builtin_test/_TestStringCount is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringCount/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringCount/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringCount/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringCount/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringCount/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringCount/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringCount/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringCount/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringCut/", 
            "text": "class builtin_test/_TestStringCut is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest cutting part of a string\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringCut"
        }, 
        {
            "location": "/builtin_test-_TestStringCut/#class-builtin_test_teststringcut-is-unittest-ref", 
            "text": "Default capability :  iso  Test cutting part of a string", 
            "title": "class builtin_test/_TestStringCut is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringCut/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringCut/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringCut/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringCut/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringCut/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringCut/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringCut/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringCut/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringJoin/", 
            "text": "class builtin_test/_TestStringJoin is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest String.join\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringJoin"
        }, 
        {
            "location": "/builtin_test-_TestStringJoin/#class-builtin_test_teststringjoin-is-unittest-ref", 
            "text": "Default capability :  iso  Test String.join", 
            "title": "class builtin_test/_TestStringJoin is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringJoin/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringJoin/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringJoin/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringJoin/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringJoin/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringJoin/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringJoin/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringJoin/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringLstrip/", 
            "text": "class builtin_test/_TestStringLstrip is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest stripping leading characters from a string.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringLstrip"
        }, 
        {
            "location": "/builtin_test-_TestStringLstrip/#class-builtin_test_teststringlstrip-is-unittest-ref", 
            "text": "Default capability :  iso  Test stripping leading characters from a string.", 
            "title": "class builtin_test/_TestStringLstrip is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringLstrip/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringLstrip/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringLstrip/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringLstrip/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringLstrip/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringLstrip/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringLstrip/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringLstrip/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringRemove/", 
            "text": "class builtin_test/_TestStringRemove is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest removing characters from a string (independent of leading or trailing).\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringRemove"
        }, 
        {
            "location": "/builtin_test-_TestStringRemove/#class-builtin_test_teststringremove-is-unittest-ref", 
            "text": "Default capability :  iso  Test removing characters from a string (independent of leading or trailing).", 
            "title": "class builtin_test/_TestStringRemove is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringRemove/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringRemove/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringRemove/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringRemove/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringRemove/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringRemove/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringRemove/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringRemove/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringReplace/", 
            "text": "class builtin_test/_TestStringReplace is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest String.replace\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringReplace"
        }, 
        {
            "location": "/builtin_test-_TestStringReplace/#class-builtin_test_teststringreplace-is-unittest-ref", 
            "text": "Default capability :  iso  Test String.replace", 
            "title": "class builtin_test/_TestStringReplace is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringReplace/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringReplace/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringReplace/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringReplace/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringReplace/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringReplace/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringReplace/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringReplace/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringRstrip/", 
            "text": "class builtin_test/_TestStringRstrip is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest stripping trailing characters from a string.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringRstrip"
        }, 
        {
            "location": "/builtin_test-_TestStringRstrip/#class-builtin_test_teststringrstrip-is-unittest-ref", 
            "text": "Default capability :  iso  Test stripping trailing characters from a string.", 
            "title": "class builtin_test/_TestStringRstrip is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringRstrip/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringRstrip/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringRstrip/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringRstrip/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringRstrip/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringRstrip/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringRstrip/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringRstrip/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringRunes/", 
            "text": "class builtin_test/_TestStringRunes is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest iterating over the unicode codepoints in a string.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringRunes"
        }, 
        {
            "location": "/builtin_test-_TestStringRunes/#class-builtin_test_teststringrunes-is-unittest-ref", 
            "text": "Default capability :  iso  Test iterating over the unicode codepoints in a string.", 
            "title": "class builtin_test/_TestStringRunes is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringRunes/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringRunes/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringRunes/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringRunes/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/builtin_test-_TestStringRunes/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringRunes/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringRunes/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringRunes/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringSplit/", 
            "text": "class builtin_test/_TestStringSplit is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest String.split\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringSplit"
        }, 
        {
            "location": "/builtin_test-_TestStringSplit/#class-builtin_test_teststringsplit-is-unittest-ref", 
            "text": "Default capability :  iso  Test String.split", 
            "title": "class builtin_test/_TestStringSplit is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringSplit/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringSplit/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringSplit/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringSplit/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/builtin_test-_TestStringSplit/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringSplit/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringSplit/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringSplit/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringStrip/", 
            "text": "class builtin_test/_TestStringStrip is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest stripping leading and trailing characters from a string.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringStrip"
        }, 
        {
            "location": "/builtin_test-_TestStringStrip/#class-builtin_test_teststringstrip-is-unittest-ref", 
            "text": "Default capability :  iso  Test stripping leading and trailing characters from a string.", 
            "title": "class builtin_test/_TestStringStrip is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringStrip/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringStrip/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringStrip/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringStrip/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringStrip/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringStrip/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringStrip/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringStrip/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringSubstring/", 
            "text": "class builtin_test/_TestStringSubstring is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest copying range of characters.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringSubstring"
        }, 
        {
            "location": "/builtin_test-_TestStringSubstring/#class-builtin_test_teststringsubstring-is-unittest-ref", 
            "text": "Default capability :  iso  Test copying range of characters.", 
            "title": "class builtin_test/_TestStringSubstring is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringSubstring/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringSubstring/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringSubstring/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringSubstring/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringSubstring/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringSubstring/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringSubstring/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringSubstring/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringToBool/", 
            "text": "class builtin_test/_TestStringToBool is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest converting strings to Bools.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringToBool"
        }, 
        {
            "location": "/builtin_test-_TestStringToBool/#class-builtin_test_teststringtobool-is-unittest-ref", 
            "text": "Default capability :  iso  Test converting strings to Bools.", 
            "title": "class builtin_test/_TestStringToBool is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringToBool/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringToBool/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringToBool/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringToBool/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/builtin_test-_TestStringToBool/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringToBool/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringToBool/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringToBool/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringToFloat/", 
            "text": "class builtin_test/_TestStringToFloat is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest converting strings to floats.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringToFloat"
        }, 
        {
            "location": "/builtin_test-_TestStringToFloat/#class-builtin_test_teststringtofloat-is-unittest-ref", 
            "text": "Default capability :  iso  Test converting strings to floats.", 
            "title": "class builtin_test/_TestStringToFloat is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringToFloat/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringToFloat/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringToFloat/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringToFloat/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringToFloat/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringToFloat/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringToFloat/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringToFloat/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringToI8/", 
            "text": "class builtin_test/_TestStringToI8 is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest converting strings to I8s.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringToI8"
        }, 
        {
            "location": "/builtin_test-_TestStringToI8/#class-builtin_test_teststringtoi8-is-unittest-ref", 
            "text": "Default capability :  iso  Test converting strings to I8s.", 
            "title": "class builtin_test/_TestStringToI8 is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringToI8/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringToI8/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringToI8/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringToI8/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/builtin_test-_TestStringToI8/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringToI8/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringToI8/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringToI8/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringToIntLarge/", 
            "text": "class builtin_test/_TestStringToIntLarge is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest converting strings to I\n and U\n types bigger than 8 bit.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringToIntLarge"
        }, 
        {
            "location": "/builtin_test-_TestStringToIntLarge/#class-builtin_test_teststringtointlarge-is-unittest-ref", 
            "text": "Default capability :  iso  Test converting strings to I  and U  types bigger than 8 bit.", 
            "title": "class builtin_test/_TestStringToIntLarge is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringToIntLarge/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringToIntLarge/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringToIntLarge/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringToIntLarge/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/builtin_test-_TestStringToIntLarge/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringToIntLarge/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringToIntLarge/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringToIntLarge/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringToU8/", 
            "text": "class builtin_test/_TestStringToU8 is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest converting strings to U8s.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringToU8"
        }, 
        {
            "location": "/builtin_test-_TestStringToU8/#class-builtin_test_teststringtou8-is-unittest-ref", 
            "text": "Default capability :  iso  Test converting strings to U8s.", 
            "title": "class builtin_test/_TestStringToU8 is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestStringToU8/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStringToU8/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestStringToU8/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestStringToU8/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/builtin_test-_TestStringToU8/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringToU8/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestStringToU8/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStringToU8/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestStruct/", 
            "text": "struct builtin_test/_TestStruct\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nPublic fields\n\n\n\n\nvar i: \nU32\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n()", 
            "title": "struct _TestStruct"
        }, 
        {
            "location": "/builtin_test-_TestStruct/#struct-builtin_test_teststruct", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "struct builtin_test/_TestStruct"
        }, 
        {
            "location": "/builtin_test-_TestStruct/#public-fields", 
            "text": "var i:  U32  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/builtin_test-_TestStruct/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestStruct/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestValtrace/", 
            "text": "class builtin_test/_TestValtrace is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest val trace optimisation\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestValtrace"
        }, 
        {
            "location": "/builtin_test-_TestValtrace/#class-builtin_test_testvaltrace-is-unittest-ref", 
            "text": "Default capability :  iso  Test val trace optimisation", 
            "title": "class builtin_test/_TestValtrace is UnitTest ref"
        }, 
        {
            "location": "/builtin_test-_TestValtrace/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_TestValtrace/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_TestValtrace/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin_test-_TestValtrace/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestValtrace/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/builtin_test-_TestValtrace/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/builtin_test-_TestValtrace/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_TestValtrace/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/builtin_test-_Valtrace/", 
            "text": "actor builtin_test/_Valtrace\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nPublic fields\n\n\n\n\nvar count: \nU32\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Behaviours\n\n\nbe \ndone\n(h: \nTestHelper\n val)\n\n\nbe \nfour\n(a1: \n_Valtrace\n tag, a2: \n_Valtrace\n tag, a3: \n_Valtrace\n tag, h: \nTestHelper\n val, s: \nString\n val)\n\n\nAsk all actors to test the string.\n\n\nbe \ngc\n(a: \n_Valtrace\n tag, h: \nTestHelper\n val, s: \nString\n val)\n\n\nbe \none\n(h: \nTestHelper\n val)\n\n\nCreate a String iso, send it to a new actor.\n\n\nbe \nthree\n(a1: \n_Valtrace\n tag, a2: \n_Valtrace\n tag, h: \nTestHelper\n val, s: \nString\n val)\n\n\nReceive a String that was an iso that passed through another actor.\n\n\nbe \ntwo\n(a1: \n_Valtrace\n tag, h: \nTestHelper\n val, s: \nString\n iso)\n\n\nReceive a String iso allocated by a different actor.\nAppend to it.\nSend it as a val to a third actor.", 
            "title": "actor _Valtrace"
        }, 
        {
            "location": "/builtin_test-_Valtrace/#actor-builtin_test_valtrace", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor builtin_test/_Valtrace"
        }, 
        {
            "location": "/builtin_test-_Valtrace/#public-fields", 
            "text": "var count:  U32  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/builtin_test-_Valtrace/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin_test-_Valtrace/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/builtin_test-_Valtrace/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/builtin_test-_Valtrace/#be-doneh-testhelper-val", 
            "text": "", 
            "title": "be done(h: TestHelper val)"
        }, 
        {
            "location": "/builtin_test-_Valtrace/#be-foura1-_valtrace-tag-a2-_valtrace-tag-a3-_valtrace-tag-h-testhelper-val-s-string-val", 
            "text": "Ask all actors to test the string.", 
            "title": "be four(a1: _Valtrace tag, a2: _Valtrace tag, a3: _Valtrace tag, h: TestHelper val, s: String val)"
        }, 
        {
            "location": "/builtin_test-_Valtrace/#be-gca-_valtrace-tag-h-testhelper-val-s-string-val", 
            "text": "", 
            "title": "be gc(a: _Valtrace tag, h: TestHelper val, s: String val)"
        }, 
        {
            "location": "/builtin_test-_Valtrace/#be-oneh-testhelper-val", 
            "text": "Create a String iso, send it to a new actor.", 
            "title": "be one(h: TestHelper val)"
        }, 
        {
            "location": "/builtin_test-_Valtrace/#be-threea1-_valtrace-tag-a2-_valtrace-tag-h-testhelper-val-s-string-val", 
            "text": "Receive a String that was an iso that passed through another actor.", 
            "title": "be three(a1: _Valtrace tag, a2: _Valtrace tag, h: TestHelper val, s: String val)"
        }, 
        {
            "location": "/builtin_test-_Valtrace/#be-twoa1-_valtrace-tag-h-testhelper-val-s-string-iso", 
            "text": "Receive a String iso allocated by a different actor.\nAppend to it.\nSend it as a val to a third actor.", 
            "title": "be two(a1: _Valtrace tag, h: TestHelper val, s: String iso)"
        }, 
        {
            "location": "/bureaucracy--index/", 
            "text": "Bureaucracy package\n\n\nIt happens to almost every program. It starts small, tiny if you will, like a\nvillage where every actor knows every other actor and shutdown is easy. One day\nyou realize your program is no longer a cute seaside hamlet, its a bustling\nmetropolis and you are doing way too much work to keep track of everything. What\ndo you do? Call for a little bureaucracy.\n\n\nThe bureaucracy contains objects designed to ease your bookkeeping burdens. Need\nto shutdown a number of actors together? Check out \nCustodian\n. Need to keep\ntrack of a lot of stuff and be able to look it up by name? Check out \nRegistrar\n.\n\n\nPut bureaucracy to use today and before long, you're sprawling metropolis of a\ncode base will be manageable again in no time.\n\n\nEntities\n\n\n\n\nactor Custodian\n\n\nactor Main\n\n\nactor Registrar\n\n\nclass _TestCustodian\n\n\nactor _TestDisposable\n\n\nclass _TestRegistrar", 
            "title": "Package"
        }, 
        {
            "location": "/bureaucracy--index/#bureaucracy-package", 
            "text": "It happens to almost every program. It starts small, tiny if you will, like a\nvillage where every actor knows every other actor and shutdown is easy. One day\nyou realize your program is no longer a cute seaside hamlet, its a bustling\nmetropolis and you are doing way too much work to keep track of everything. What\ndo you do? Call for a little bureaucracy.  The bureaucracy contains objects designed to ease your bookkeeping burdens. Need\nto shutdown a number of actors together? Check out  Custodian . Need to keep\ntrack of a lot of stuff and be able to look it up by name? Check out  Registrar .  Put bureaucracy to use today and before long, you're sprawling metropolis of a\ncode base will be manageable again in no time.", 
            "title": "Bureaucracy package"
        }, 
        {
            "location": "/bureaucracy--index/#entities", 
            "text": "actor Custodian  actor Main  actor Registrar  class _TestCustodian  actor _TestDisposable  class _TestRegistrar", 
            "title": "Entities"
        }, 
        {
            "location": "/bureaucracy-Custodian/", 
            "text": "actor bureaucracy/Custodian\n\n\nDefault capability\n: \ntag\n\n\nA Custodian keeps a set of actors to dispose. When the Custodian is disposed,\nit disposes of the actors in its set and then clears the set.\n\n\nExample program\n\n\nImagine you have a program with 3 actors that you need to shutdown when it\nreceives a TERM signal. We can set up a Custodian that knows about each\nof our actors and when a TERM signal is received, is disposed of.\n\n\nuse \nbureaucracy\n\nuse \nsignals\n\n\nactor Main\n  new create(env: Env) =\n\n    let actor1 = Actor1\n    let actor2 = Actor2\n    let actor3 = Actor3\n\n    let custodian = Custodian\n    custodian(actor1)(actor2)(actor3)\n\n    SignalHandler(TermHandler(custodian), Sig.term())\n\nclass TermHandler is SignalNotify\n  let _custodian: Custodian\n\n  new iso create(custodian: Custodian) =\n\n    _custodian = custodian\n\n  fun ref apply(count: U32): Bool =\n\n    _custodian.dispose()\n    true\n\n\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Behaviours\n\n\nbe \napply\n(worker: \nDisposableActor\n tag)\n\n\nAdd an actor to be disposed of.\n\n\nbe \ndispose\n()\n\n\nDispose of the actors in the set and then clear the set.\n\n\nbe \nremove\n(worker: \nDisposableActor\n tag)\n\n\nRemoves an actor from the set of things to be disposed.", 
            "title": "actor Custodian"
        }, 
        {
            "location": "/bureaucracy-Custodian/#actor-bureaucracycustodian", 
            "text": "Default capability :  tag  A Custodian keeps a set of actors to dispose. When the Custodian is disposed,\nit disposes of the actors in its set and then clears the set.", 
            "title": "actor bureaucracy/Custodian"
        }, 
        {
            "location": "/bureaucracy-Custodian/#example-program", 
            "text": "Imagine you have a program with 3 actors that you need to shutdown when it\nreceives a TERM signal. We can set up a Custodian that knows about each\nof our actors and when a TERM signal is received, is disposed of.  use  bureaucracy \nuse  signals \n\nactor Main\n  new create(env: Env) = \n    let actor1 = Actor1\n    let actor2 = Actor2\n    let actor3 = Actor3\n\n    let custodian = Custodian\n    custodian(actor1)(actor2)(actor3)\n\n    SignalHandler(TermHandler(custodian), Sig.term())\n\nclass TermHandler is SignalNotify\n  let _custodian: Custodian\n\n  new iso create(custodian: Custodian) = \n    _custodian = custodian\n\n  fun ref apply(count: U32): Bool = \n    _custodian.dispose()\n    true", 
            "title": "Example program"
        }, 
        {
            "location": "/bureaucracy-Custodian/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/bureaucracy-Custodian/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/bureaucracy-Custodian/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/bureaucracy-Custodian/#be-applyworker-disposableactor-tag", 
            "text": "Add an actor to be disposed of.", 
            "title": "be apply(worker: DisposableActor tag)"
        }, 
        {
            "location": "/bureaucracy-Custodian/#be-dispose", 
            "text": "Dispose of the actors in the set and then clear the set.", 
            "title": "be dispose()"
        }, 
        {
            "location": "/bureaucracy-Custodian/#be-removeworker-disposableactor-tag", 
            "text": "Removes an actor from the set of things to be disposed.", 
            "title": "be remove(worker: DisposableActor tag)"
        }, 
        {
            "location": "/bureaucracy-Main/", 
            "text": "actor bureaucracy/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/bureaucracy-Main/#actor-bureaucracymain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor bureaucracy/Main is TestList ref"
        }, 
        {
            "location": "/bureaucracy-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/bureaucracy-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/bureaucracy-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/bureaucracy-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/bureaucracy-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/bureaucracy-Registrar/", 
            "text": "actor bureaucracy/Registrar\n\n\nDefault capability\n: \ntag\n\n\nA Registrar keeps a map of lookup string to anything. Generally, this is used\nto keep a directory of long-lived service-providing actors that can be\nlooked up name.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Behaviours\n\n\nbe \nremove\n(key: \nString\n val, value: \nAny\n tag)\n\n\nRemove a mapping. This only takes effect if provided key currently maps to\nthe provided value. If the key maps to some other value (perhaps after\nupdating), the mapping won't be removed.\n\n\nbe \nupdate\n(key: \nString\n val, value: \nAny\n tag)\n\n\nAdd, or change, a lookup mapping.\n\n\nPublic Functions\n\n\nfun tag  \napply\n[optional A: \nAny\n tag](key: \nString\n val): \nPromise\n[A tag] tag\n\n\nLookup by name. Returns a promise that will be fulfilled with the mapped\nvalue if it exists and is a subtype of A. Otherwise, the promise will be\nrejected.\n\n\nPrivate Behaviours\n\n\nbe \n_fetch\n[A: \nAny\n tag](key: \nString\n val, promise: \nPromise\n[A tag] tag)\n\n\nFulfills or rejects the promise.", 
            "title": "actor Registrar"
        }, 
        {
            "location": "/bureaucracy-Registrar/#actor-bureaucracyregistrar", 
            "text": "Default capability :  tag  A Registrar keeps a map of lookup string to anything. Generally, this is used\nto keep a directory of long-lived service-providing actors that can be\nlooked up name.", 
            "title": "actor bureaucracy/Registrar"
        }, 
        {
            "location": "/bureaucracy-Registrar/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/bureaucracy-Registrar/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/bureaucracy-Registrar/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/bureaucracy-Registrar/#be-removekey-string-val-value-any-tag", 
            "text": "Remove a mapping. This only takes effect if provided key currently maps to\nthe provided value. If the key maps to some other value (perhaps after\nupdating), the mapping won't be removed.", 
            "title": "be remove(key: String val, value: Any tag)"
        }, 
        {
            "location": "/bureaucracy-Registrar/#be-updatekey-string-val-value-any-tag", 
            "text": "Add, or change, a lookup mapping.", 
            "title": "be update(key: String val, value: Any tag)"
        }, 
        {
            "location": "/bureaucracy-Registrar/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/bureaucracy-Registrar/#fun-tag-apply91optional-a-any-tag93key-string-val-promise91a-tag93-tag", 
            "text": "Lookup by name. Returns a promise that will be fulfilled with the mapped\nvalue if it exists and is a subtype of A. Otherwise, the promise will be\nrejected.", 
            "title": "fun tag  apply[optional A: Any tag](key: String val): Promise[A tag] tag"
        }, 
        {
            "location": "/bureaucracy-Registrar/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/bureaucracy-Registrar/#be-_fetch91a-any-tag93key-string-val-promise-promise91a-tag93-tag", 
            "text": "Fulfills or rejects the promise.", 
            "title": "be _fetch[A: Any tag](key: String val, promise: Promise[A tag] tag)"
        }, 
        {
            "location": "/bureaucracy-_TestCustodian/", 
            "text": "class bureaucracy/_TestCustodian is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nDispose of an actor using a Custodian.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun ref  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestCustodian"
        }, 
        {
            "location": "/bureaucracy-_TestCustodian/#class-bureaucracy_testcustodian-is-unittest-ref", 
            "text": "Default capability :  iso  Dispose of an actor using a Custodian.", 
            "title": "class bureaucracy/_TestCustodian is UnitTest ref"
        }, 
        {
            "location": "/bureaucracy-_TestCustodian/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/bureaucracy-_TestCustodian/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/bureaucracy-_TestCustodian/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/bureaucracy-_TestCustodian/#fun-ref-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/bureaucracy-_TestCustodian/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/bureaucracy-_TestCustodian/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/bureaucracy-_TestCustodian/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/bureaucracy-_TestCustodian/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/bureaucracy-_TestDisposable/", 
            "text": "actor bureaucracy/_TestDisposable\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(h: \nTestHelper\n val)\n\n\nPublic Behaviours\n\n\nbe \ndispose\n()", 
            "title": "actor _TestDisposable"
        }, 
        {
            "location": "/bureaucracy-_TestDisposable/#actor-bureaucracy_testdisposable", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor bureaucracy/_TestDisposable"
        }, 
        {
            "location": "/bureaucracy-_TestDisposable/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/bureaucracy-_TestDisposable/#new-createh-testhelper-val", 
            "text": "", 
            "title": "new create(h: TestHelper val)"
        }, 
        {
            "location": "/bureaucracy-_TestDisposable/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/bureaucracy-_TestDisposable/#be-dispose", 
            "text": "", 
            "title": "be dispose()"
        }, 
        {
            "location": "/bureaucracy-_TestRegistrar/", 
            "text": "class bureaucracy/_TestRegistrar is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nRegister an actor and retrieve it.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun ref  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestRegistrar"
        }, 
        {
            "location": "/bureaucracy-_TestRegistrar/#class-bureaucracy_testregistrar-is-unittest-ref", 
            "text": "Default capability :  iso  Register an actor and retrieve it.", 
            "title": "class bureaucracy/_TestRegistrar is UnitTest ref"
        }, 
        {
            "location": "/bureaucracy-_TestRegistrar/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/bureaucracy-_TestRegistrar/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/bureaucracy-_TestRegistrar/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/bureaucracy-_TestRegistrar/#fun-ref-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/bureaucracy-_TestRegistrar/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/bureaucracy-_TestRegistrar/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/bureaucracy-_TestRegistrar/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/bureaucracy-_TestRegistrar/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/capsicum--index/", 
            "text": "No package doc string provided for capsicum.\n\n\nEntities\n\n\n\n\nprimitive Cap\n\n\ntype CapRights\n\n\nclass CapRights0", 
            "title": "Package"
        }, 
        {
            "location": "/capsicum--index/#entities", 
            "text": "primitive Cap  type CapRights  class CapRights0", 
            "title": "Entities"
        }, 
        {
            "location": "/capsicum-Cap/", 
            "text": "primitive capsicum/Cap\n\n\nDefault capability\n: \nval\n\n\nThe Capsicum rights.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \naccept\n(): \nU64\n val\n\n\nfun box  \nacl_check\n(): \nU64\n val\n\n\nfun box  \nacl_delete\n(): \nU64\n val\n\n\nfun box  \nacl_get\n(): \nU64\n val\n\n\nfun box  \nacl_set\n(): \nU64\n val\n\n\nfun box  \nbind\n(): \nU64\n val\n\n\nfun box  \nbindat\n(): \nU64\n val\n\n\nfun box  \nchflagsat\n(): \nU64\n val\n\n\nfun box  \nconnect\n(): \nU64\n val\n\n\nfun box  \nconnectat\n(): \nU64\n val\n\n\nfun box  \ncreat\n(): \nU64\n val\n\n\nfun box  \nenter\n(): \nBool\n val\n\n\nThis places the current process into capability mode, a mode of execution\nin which processes may only issue system calls operating on file\ndescriptors or reading limited global system state. Access to global name\nspaces, such as file system or IPC name spaces, is prevented.\n\n\nfun box  \neq\n(that: \nCap\n val): \nBool\n val\n\n\nfun box  \nevent\n(): \nU64\n val\n\n\nfun box  \nexattr_delete\n(): \nU64\n val\n\n\nfun box  \nexattr_get\n(): \nU64\n val\n\n\nfun box  \nexattr_list\n(): \nU64\n val\n\n\nfun box  \nexattr_set\n(): \nU64\n val\n\n\nfun box  \nfchdir\n(): \nU64\n val\n\n\nfun box  \nfchflags\n(): \nU64\n val\n\n\nfun box  \nfchmod\n(): \nU64\n val\n\n\nfun box  \nfchmodat\n(): \nU64\n val\n\n\nfun box  \nfchown\n(): \nU64\n val\n\n\nfun box  \nfchownat\n(): \nU64\n val\n\n\nfun box  \nfcntl\n(): \nU64\n val\n\n\nfun box  \nfexecve\n(): \nU64\n val\n\n\nfun box  \nflock\n(): \nU64\n val\n\n\nfun box  \nfpathconf\n(): \nU64\n val\n\n\nfun box  \nfsck\n(): \nU64\n val\n\n\nfun box  \nfstat\n(): \nU64\n val\n\n\nfun box  \nfstatat\n(): \nU64\n val\n\n\nfun box  \nfstatfs\n(): \nU64\n val\n\n\nfun box  \nfsync\n(): \nU64\n val\n\n\nfun box  \nftruncate\n(): \nU64\n val\n\n\nfun box  \nfutimes\n(): \nU64\n val\n\n\nfun box  \nfutimesat\n(): \nU64\n val\n\n\nfun box  \ngetpeername\n(): \nU64\n val\n\n\nfun box  \ngetsockname\n(): \nU64\n val\n\n\nfun box  \ngetsockopt\n(): \nU64\n val\n\n\nfun box  \nioctl\n(): \nU64\n val\n\n\nfun box  \nkqueue\n(): \nU64\n val\n\n\nfun box  \nkqueue_change\n(): \nU64\n val\n\n\nfun box  \nkqueue_event\n(): \nU64\n val\n\n\nfun box  \nlinkat\n(): \nU64\n val\n\n\nfun box  \nlisten\n(): \nU64\n val\n\n\nfun box  \nlookup\n(): \nU64\n val\n\n\nfun box  \nmac_get\n(): \nU64\n val\n\n\nfun box  \nmac_set\n(): \nU64\n val\n\n\nfun box  \nmkdirat\n(): \nU64\n val\n\n\nfun box  \nmkfifoat\n(): \nU64\n val\n\n\nfun box  \nmknodat\n(): \nU64\n val\n\n\nfun box  \nmmap\n(): \nU64\n val\n\n\nfun box  \nmmap_r\n(): \nU64\n val\n\n\nfun box  \nmmap_rw\n(): \nU64\n val\n\n\nfun box  \nmmap_rwx\n(): \nU64\n val\n\n\nfun box  \nmmap_rx\n(): \nU64\n val\n\n\nfun box  \nmmap_w\n(): \nU64\n val\n\n\nfun box  \nmmap_wx\n(): \nU64\n val\n\n\nfun box  \nmmap_x\n(): \nU64\n val\n\n\nfun box  \nne\n(that: \nCap\n val): \nBool\n val\n\n\nfun box  \npdgetpid\n(): \nU64\n val\n\n\nfun box  \npdkill\n(): \nU64\n val\n\n\nfun box  \npdwait\n(): \nU64\n val\n\n\nfun box  \npeeloff\n(): \nU64\n val\n\n\nfun box  \npread\n(): \nU64\n val\n\n\nfun box  \npwrite\n(): \nU64\n val\n\n\nfun box  \nread\n(): \nU64\n val\n\n\nfun box  \nrecv\n(): \nU64\n val\n\n\nfun box  \nrenameat\n(): \nU64\n val\n\n\nfun box  \nseek\n(): \nU64\n val\n\n\nfun box  \nseek_tell\n(): \nU64\n val\n\n\nfun box  \nsem_getvalue\n(): \nU64\n val\n\n\nfun box  \nsem_post\n(): \nU64\n val\n\n\nfun box  \nsem_wait\n(): \nU64\n val\n\n\nfun box  \nsend\n(): \nU64\n val\n\n\nfun box  \nsetsockopt\n(): \nU64\n val\n\n\nfun box  \nshutdown\n(): \nU64\n val\n\n\nfun box  \nsock_client\n(): \nU64\n val\n\n\nfun box  \nsock_server\n(): \nU64\n val\n\n\nfun box  \nsymlinkat\n(): \nU64\n val\n\n\nfun box  \nttyhook\n(): \nU64\n val\n\n\nfun box  \nunlinkat\n(): \nU64\n val\n\n\nfun box  \nwrite\n(): \nU64\n val\n\n\nPrivate Functions\n\n\nfun box  \n_id\n(idx: \nU64\n val, bit: \nU64\n val): \nU64\n val\n\n\nBuild a Capsicum ID from an index and a bit position.", 
            "title": "primitive Cap"
        }, 
        {
            "location": "/capsicum-Cap/#primitive-capsicumcap", 
            "text": "Default capability :  val  The Capsicum rights.", 
            "title": "primitive capsicum/Cap"
        }, 
        {
            "location": "/capsicum-Cap/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/capsicum-Cap/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/capsicum-Cap/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-accept-u64-val", 
            "text": "", 
            "title": "fun box  accept(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-acl_check-u64-val", 
            "text": "", 
            "title": "fun box  acl_check(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-acl_delete-u64-val", 
            "text": "", 
            "title": "fun box  acl_delete(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-acl_get-u64-val", 
            "text": "", 
            "title": "fun box  acl_get(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-acl_set-u64-val", 
            "text": "", 
            "title": "fun box  acl_set(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-bind-u64-val", 
            "text": "", 
            "title": "fun box  bind(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-bindat-u64-val", 
            "text": "", 
            "title": "fun box  bindat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-chflagsat-u64-val", 
            "text": "", 
            "title": "fun box  chflagsat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-connect-u64-val", 
            "text": "", 
            "title": "fun box  connect(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-connectat-u64-val", 
            "text": "", 
            "title": "fun box  connectat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-creat-u64-val", 
            "text": "", 
            "title": "fun box  creat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-enter-bool-val", 
            "text": "This places the current process into capability mode, a mode of execution\nin which processes may only issue system calls operating on file\ndescriptors or reading limited global system state. Access to global name\nspaces, such as file system or IPC name spaces, is prevented.", 
            "title": "fun box  enter(): Bool val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-eqthat-cap-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Cap val): Bool val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-event-u64-val", 
            "text": "", 
            "title": "fun box  event(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-exattr_delete-u64-val", 
            "text": "", 
            "title": "fun box  exattr_delete(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-exattr_get-u64-val", 
            "text": "", 
            "title": "fun box  exattr_get(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-exattr_list-u64-val", 
            "text": "", 
            "title": "fun box  exattr_list(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-exattr_set-u64-val", 
            "text": "", 
            "title": "fun box  exattr_set(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fchdir-u64-val", 
            "text": "", 
            "title": "fun box  fchdir(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fchflags-u64-val", 
            "text": "", 
            "title": "fun box  fchflags(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fchmod-u64-val", 
            "text": "", 
            "title": "fun box  fchmod(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fchmodat-u64-val", 
            "text": "", 
            "title": "fun box  fchmodat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fchown-u64-val", 
            "text": "", 
            "title": "fun box  fchown(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fchownat-u64-val", 
            "text": "", 
            "title": "fun box  fchownat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fcntl-u64-val", 
            "text": "", 
            "title": "fun box  fcntl(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fexecve-u64-val", 
            "text": "", 
            "title": "fun box  fexecve(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-flock-u64-val", 
            "text": "", 
            "title": "fun box  flock(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fpathconf-u64-val", 
            "text": "", 
            "title": "fun box  fpathconf(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fsck-u64-val", 
            "text": "", 
            "title": "fun box  fsck(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fstat-u64-val", 
            "text": "", 
            "title": "fun box  fstat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fstatat-u64-val", 
            "text": "", 
            "title": "fun box  fstatat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fstatfs-u64-val", 
            "text": "", 
            "title": "fun box  fstatfs(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-fsync-u64-val", 
            "text": "", 
            "title": "fun box  fsync(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-ftruncate-u64-val", 
            "text": "", 
            "title": "fun box  ftruncate(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-futimes-u64-val", 
            "text": "", 
            "title": "fun box  futimes(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-futimesat-u64-val", 
            "text": "", 
            "title": "fun box  futimesat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-getpeername-u64-val", 
            "text": "", 
            "title": "fun box  getpeername(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-getsockname-u64-val", 
            "text": "", 
            "title": "fun box  getsockname(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-getsockopt-u64-val", 
            "text": "", 
            "title": "fun box  getsockopt(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-ioctl-u64-val", 
            "text": "", 
            "title": "fun box  ioctl(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-kqueue-u64-val", 
            "text": "", 
            "title": "fun box  kqueue(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-kqueue_change-u64-val", 
            "text": "", 
            "title": "fun box  kqueue_change(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-kqueue_event-u64-val", 
            "text": "", 
            "title": "fun box  kqueue_event(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-linkat-u64-val", 
            "text": "", 
            "title": "fun box  linkat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-listen-u64-val", 
            "text": "", 
            "title": "fun box  listen(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-lookup-u64-val", 
            "text": "", 
            "title": "fun box  lookup(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mac_get-u64-val", 
            "text": "", 
            "title": "fun box  mac_get(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mac_set-u64-val", 
            "text": "", 
            "title": "fun box  mac_set(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mkdirat-u64-val", 
            "text": "", 
            "title": "fun box  mkdirat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mkfifoat-u64-val", 
            "text": "", 
            "title": "fun box  mkfifoat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mknodat-u64-val", 
            "text": "", 
            "title": "fun box  mknodat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mmap-u64-val", 
            "text": "", 
            "title": "fun box  mmap(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mmap_r-u64-val", 
            "text": "", 
            "title": "fun box  mmap_r(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mmap_rw-u64-val", 
            "text": "", 
            "title": "fun box  mmap_rw(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mmap_rwx-u64-val", 
            "text": "", 
            "title": "fun box  mmap_rwx(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mmap_rx-u64-val", 
            "text": "", 
            "title": "fun box  mmap_rx(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mmap_w-u64-val", 
            "text": "", 
            "title": "fun box  mmap_w(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mmap_wx-u64-val", 
            "text": "", 
            "title": "fun box  mmap_wx(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-mmap_x-u64-val", 
            "text": "", 
            "title": "fun box  mmap_x(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-nethat-cap-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Cap val): Bool val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-pdgetpid-u64-val", 
            "text": "", 
            "title": "fun box  pdgetpid(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-pdkill-u64-val", 
            "text": "", 
            "title": "fun box  pdkill(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-pdwait-u64-val", 
            "text": "", 
            "title": "fun box  pdwait(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-peeloff-u64-val", 
            "text": "", 
            "title": "fun box  peeloff(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-pread-u64-val", 
            "text": "", 
            "title": "fun box  pread(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-pwrite-u64-val", 
            "text": "", 
            "title": "fun box  pwrite(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-read-u64-val", 
            "text": "", 
            "title": "fun box  read(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-recv-u64-val", 
            "text": "", 
            "title": "fun box  recv(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-renameat-u64-val", 
            "text": "", 
            "title": "fun box  renameat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-seek-u64-val", 
            "text": "", 
            "title": "fun box  seek(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-seek_tell-u64-val", 
            "text": "", 
            "title": "fun box  seek_tell(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-sem_getvalue-u64-val", 
            "text": "", 
            "title": "fun box  sem_getvalue(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-sem_post-u64-val", 
            "text": "", 
            "title": "fun box  sem_post(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-sem_wait-u64-val", 
            "text": "", 
            "title": "fun box  sem_wait(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-send-u64-val", 
            "text": "", 
            "title": "fun box  send(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-setsockopt-u64-val", 
            "text": "", 
            "title": "fun box  setsockopt(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-shutdown-u64-val", 
            "text": "", 
            "title": "fun box  shutdown(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-sock_client-u64-val", 
            "text": "", 
            "title": "fun box  sock_client(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-sock_server-u64-val", 
            "text": "", 
            "title": "fun box  sock_server(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-symlinkat-u64-val", 
            "text": "", 
            "title": "fun box  symlinkat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-ttyhook-u64-val", 
            "text": "", 
            "title": "fun box  ttyhook(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-unlinkat-u64-val", 
            "text": "", 
            "title": "fun box  unlinkat(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-write-u64-val", 
            "text": "", 
            "title": "fun box  write(): U64 val"
        }, 
        {
            "location": "/capsicum-Cap/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/capsicum-Cap/#fun-box-_ididx-u64-val-bit-u64-val-u64-val", 
            "text": "Build a Capsicum ID from an index and a bit position.", 
            "title": "fun box  _id(idx: U64 val, bit: U64 val): U64 val"
        }, 
        {
            "location": "/capsicum-CapRights/", 
            "text": "type capsicum/CapRights is \nCapRights0\n ref\n\n\nNo doc string provided.", 
            "title": "type CapRights"
        }, 
        {
            "location": "/capsicum-CapRights/#type-capsicumcaprights-is-caprights0-ref", 
            "text": "No doc string provided.", 
            "title": "type capsicum/CapRights is CapRights0 ref"
        }, 
        {
            "location": "/capsicum-CapRights0/", 
            "text": "class capsicum/CapRights0\n\n\nDefault capability\n: \nref\n\n\nVersion 0 of the capsicum cap_rights_t structure.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nnew \ndescriptor\n(fd: \nI32\n val)\n\n\nnew \nfrom\n(caps: \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] box)\n\n\nPublic Functions\n\n\nfun ref  \nclear\n(): \nNone\n val\n\n\nClear all rights.\n\n\nfun box  \ncontains\n(that: \nCapRights0\n ref): \nBool\n val\n\n\nCheck that this is a superset of the rights in that.\n\n\nfun box  \nlimit\n(fd: \nI32\n val): \nBool\n val\n\n\nLimits the fd to the encoded rights.\n\n\nfun ref  \nmerge\n(that: \nCapRights0\n ref): \nNone\n val\n\n\nMerge the rights in that into this.\n\n\nfun ref  \nremove\n(that: \nCapRights0\n ref): \nNone\n val\n\n\nRemove the rights in that from this.\n\n\nfun ref  \nset\n(cap: \nU64\n val): \nCapRights0\n ref^\n\n\nfun ref  \nunset\n(cap: \nU64\n val): \nCapRights0\n ref^\n\n\nPrivate Functions\n\n\nfun box  \n_version\n(): \nI32\n val", 
            "title": "class CapRights0"
        }, 
        {
            "location": "/capsicum-CapRights0/#class-capsicumcaprights0", 
            "text": "Default capability :  ref  Version 0 of the capsicum cap_rights_t structure.", 
            "title": "class capsicum/CapRights0"
        }, 
        {
            "location": "/capsicum-CapRights0/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/capsicum-CapRights0/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/capsicum-CapRights0/#new-descriptorfd-i32-val", 
            "text": "", 
            "title": "new descriptor(fd: I32 val)"
        }, 
        {
            "location": "/capsicum-CapRights0/#new-fromcaps-flags91filecreate-val-filechmod-val-filechown-val-filelink-val-filelookup-val-filemkdir-val-fileread-val-fileremove-val-filerename-val-fileseek-val-filestat-val-filesync-val-filetime-val-filetruncate-val-filewrite-val-u32-val93-box", 
            "text": "", 
            "title": "new from(caps: Flags[((((((((((((((FileCreate val | FileChmod val) | FileChown val) | FileLink val) | FileLookup val) | FileMkdir val) | FileRead val) | FileRemove val) | FileRename val) | FileSeek val) | FileStat val) | FileSync val) | FileTime val) | FileTruncate val) | FileWrite val), U32 val] box)"
        }, 
        {
            "location": "/capsicum-CapRights0/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/capsicum-CapRights0/#fun-ref-clear-none-val", 
            "text": "Clear all rights.", 
            "title": "fun ref  clear(): None val"
        }, 
        {
            "location": "/capsicum-CapRights0/#fun-box-containsthat-caprights0-ref-bool-val", 
            "text": "Check that this is a superset of the rights in that.", 
            "title": "fun box  contains(that: CapRights0 ref): Bool val"
        }, 
        {
            "location": "/capsicum-CapRights0/#fun-box-limitfd-i32-val-bool-val", 
            "text": "Limits the fd to the encoded rights.", 
            "title": "fun box  limit(fd: I32 val): Bool val"
        }, 
        {
            "location": "/capsicum-CapRights0/#fun-ref-mergethat-caprights0-ref-none-val", 
            "text": "Merge the rights in that into this.", 
            "title": "fun ref  merge(that: CapRights0 ref): None val"
        }, 
        {
            "location": "/capsicum-CapRights0/#fun-ref-removethat-caprights0-ref-none-val", 
            "text": "Remove the rights in that from this.", 
            "title": "fun ref  remove(that: CapRights0 ref): None val"
        }, 
        {
            "location": "/capsicum-CapRights0/#fun-ref-setcap-u64-val-caprights0-ref", 
            "text": "", 
            "title": "fun ref  set(cap: U64 val): CapRights0 ref^"
        }, 
        {
            "location": "/capsicum-CapRights0/#fun-ref-unsetcap-u64-val-caprights0-ref", 
            "text": "", 
            "title": "fun ref  unset(cap: U64 val): CapRights0 ref^"
        }, 
        {
            "location": "/capsicum-CapRights0/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/capsicum-CapRights0/#fun-box-_version-i32-val", 
            "text": "", 
            "title": "fun box  _version(): I32 val"
        }, 
        {
            "location": "/collections--index/", 
            "text": "No package doc string provided for collections.\n\n\nEntities\n\n\n\n\ninterface Flag\n\n\nclass Flags\n\n\nprimitive HashByteSeq\n\n\nprimitive HashEq\n\n\ninterface HashFunction\n\n\nprimitive HashIs\n\n\nclass HashMap\n\n\nclass HashSet\n\n\ninterface Hashable\n\n\nclass List\n\n\nclass ListNode\n\n\nclass ListNodes\n\n\nclass ListValues\n\n\nactor Main\n\n\ntype Map\n\n\nprimitive _MapDeleted\n\n\nprimitive _MapEmpty\n\n\ntype MapIs\n\n\nclass MapKeys\n\n\nclass MapPairs\n\n\nclass MapValues\n\n\nclass Range\n\n\nclass Reverse\n\n\nclass RingBuffer\n\n\ntype Set\n\n\ntype SetIs\n\n\nclass SetValues\n\n\nclass _TestList\n\n\nclass _TestListsContains\n\n\nclass _TestListsDrop\n\n\nclass _TestListsEvery\n\n\nclass _TestListsExists\n\n\nclass _TestListsFilter\n\n\nclass _TestListsFlatMap\n\n\nclass _TestListsFold\n\n\nclass _TestListsFrom\n\n\nclass _TestListsMap\n\n\nclass _TestListsPartition\n\n\nclass _TestListsReverse\n\n\nclass _TestListsTake\n\n\nclass _TestListsTakeWhile\n\n\nclass _TestMap\n\n\nclass _TestRing", 
            "title": "Package"
        }, 
        {
            "location": "/collections--index/#entities", 
            "text": "interface Flag  class Flags  primitive HashByteSeq  primitive HashEq  interface HashFunction  primitive HashIs  class HashMap  class HashSet  interface Hashable  class List  class ListNode  class ListNodes  class ListValues  actor Main  type Map  primitive _MapDeleted  primitive _MapEmpty  type MapIs  class MapKeys  class MapPairs  class MapValues  class Range  class Reverse  class RingBuffer  type Set  type SetIs  class SetValues  class _TestList  class _TestListsContains  class _TestListsDrop  class _TestListsEvery  class _TestListsExists  class _TestListsFilter  class _TestListsFlatMap  class _TestListsFold  class _TestListsFrom  class _TestListsMap  class _TestListsPartition  class _TestListsReverse  class _TestListsTake  class _TestListsTakeWhile  class _TestMap  class _TestRing", 
            "title": "Entities"
        }, 
        {
            "location": "/collections-Flag/", 
            "text": "interface collections/Flag[A: (((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val) \n \nInteger\n[A val] val)]\n\n\nDefault capability\n: \nval\n\n\nA flag should be a primitive with a value method that returns the bits that\nrepresent the flag. This allows a flag to encode a single bit, or any\ncombination of bits.\n\n\nPublic Functions\n\n\nfun box  \nvalue\n(): A val", 
            "title": "interface Flag"
        }, 
        {
            "location": "/collections-Flag/#interface-collectionsflag91a-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a-val93-val93", 
            "text": "Default capability :  val  A flag should be a primitive with a value method that returns the bits that\nrepresent the flag. This allows a flag to encode a single bit, or any\ncombination of bits.", 
            "title": "interface collections/Flag[A: (((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val) &amp; Integer[A val] val)]"
        }, 
        {
            "location": "/collections-Flag/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Flag/#fun-box-value-a-val", 
            "text": "", 
            "title": "fun box  value(): A val"
        }, 
        {
            "location": "/collections-Flags/", 
            "text": "class collections/Flags[A: \nFlag\n[B val] val, optional B: (((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val) \n \nInteger\n[B val] val)] is \nComparable\n[\nFlags\n[A val, B val] box] ref\n\n\nDefault capability\n: \nref\n\n\nFlags is a set of flags. The flags that are recognised should be passed as\na union type for type parameter A. For example:\n\n\nprimitive SSE\n  fun value(): U64 =\n 1\n\n\nprimitive AVX\n  fun value(): U64 =\n 2\n\n\nprimitive RDTSCP\n  fun value(): U64 =\n 4\n\n\ntype Features is Flags[(SSE | AVX | RDTSCP)]\n\n\nType parameter B is the unlying field used to store the flags.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \nadd\n(flag: A val): \nFlags\n[A val, B val] iso^\n\n\nThis with the flag set.\n\n\nfun ref  \nall\n(): \nFlags\n[A val, B val] ref^\n\n\nSets all bits, including undefined flags.\n\n\nfun box  \napply\n(flag: A val): \nBool\n val\n\n\nReturns true if the flag is set.\n\n\nfun ref  \nclear\n(): \nFlags\n[A val, B val] ref^\n\n\nUnsets all flags.\n\n\nfun box  \nclone\n(): \nFlags\n[A val, B val] iso^\n\n\nCreate a clone.\n\n\nfun box  \ncompare\n(that: \nFlags\n[A val, B val] box): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun ref  \ndifference\n(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] ref^\n\n\nThe symmetric difference of this and that.\n\n\nfun box  \neq\n(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nReturns true if this has the same flags set as that.\n\n\nfun ref  \nflip\n(flag: A val): \nFlags\n[A val, B val] ref^\n\n\nSets the flag if it is unset, unsets the flag if it is set.\n\n\nfun box  \nge\n(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nReturns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.\n\n\nfun box  \ngt\n(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nReturns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.\n\n\nfun ref  \nintersect\n(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] ref^\n\n\nThe intersection of this and that.\n\n\nfun box  \nle\n(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nReturns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.\n\n\nfun box  \nlt\n(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nReturns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.\n\n\nfun box  \nne\n(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nfun box  \nop_and\n(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] iso^\n\n\nThe intersection of this and that.\n\n\nfun box  \nop_or\n(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] iso^\n\n\nThe union of this and that.\n\n\nfun box  \nop_xor\n(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] iso^\n\n\nThe symmetric difference of this and that.\n\n\nfun ref  \nremove\n(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] ref^\n\n\nUnset flags that are set in that.\n\n\nfun ref  \nset\n(flag: A val): \nFlags\n[A val, B val] ref^\n\n\nSets the flag.\n\n\nfun box  \nsub\n(flag: A val): \nFlags\n[A val, B val] iso^\n\n\nThis with the flag unset.\n\n\nfun ref  \nunion\n(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] ref^\n\n\nThe union of this and that.\n\n\nfun ref  \nunset\n(flag: A val): \nFlags\n[A val, B val] ref^\n\n\nUnsets the flag.\n\n\nfun box  \nvalue\n(): B val\n\n\nReturns the bit encoding of the set flags.\n\n\nfun box  \nwithout\n(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] iso^\n\n\nThe flags in this that are not in that.", 
            "title": "class Flags"
        }, 
        {
            "location": "/collections-Flags/#class-collectionsflags91a-flag91b-val93-val-optional-b-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91b-val93-val93-is-comparable91flags91a-val-b-val93-box93-ref", 
            "text": "Default capability :  ref  Flags is a set of flags. The flags that are recognised should be passed as\na union type for type parameter A. For example:  primitive SSE\n  fun value(): U64 =  1  primitive AVX\n  fun value(): U64 =  2  primitive RDTSCP\n  fun value(): U64 =  4  type Features is Flags[(SSE | AVX | RDTSCP)]  Type parameter B is the unlying field used to store the flags.", 
            "title": "class collections/Flags[A: Flag[B val] val, optional B: (((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val) &amp; Integer[B val] val)] is Comparable[Flags[A val, B val] box] ref"
        }, 
        {
            "location": "/collections-Flags/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-Flags/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-Flags/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Flags/#fun-box-addflag-a-val-flags91a-val-b-val93-iso", 
            "text": "This with the flag set.", 
            "title": "fun box  add(flag: A val): Flags[A val, B val] iso^"
        }, 
        {
            "location": "/collections-Flags/#fun-ref-all-flags91a-val-b-val93-ref", 
            "text": "Sets all bits, including undefined flags.", 
            "title": "fun ref  all(): Flags[A val, B val] ref^"
        }, 
        {
            "location": "/collections-Flags/#fun-box-applyflag-a-val-bool-val", 
            "text": "Returns true if the flag is set.", 
            "title": "fun box  apply(flag: A val): Bool val"
        }, 
        {
            "location": "/collections-Flags/#fun-ref-clear-flags91a-val-b-val93-ref", 
            "text": "Unsets all flags.", 
            "title": "fun ref  clear(): Flags[A val, B val] ref^"
        }, 
        {
            "location": "/collections-Flags/#fun-box-clone-flags91a-val-b-val93-iso", 
            "text": "Create a clone.", 
            "title": "fun box  clone(): Flags[A val, B val] iso^"
        }, 
        {
            "location": "/collections-Flags/#fun-box-comparethat-flags91a-val-b-val93-box-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: Flags[A val, B val] box): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/collections-Flags/#fun-ref-differencethat-flags91a-val-b-val93-box-flags91a-val-b-val93-ref", 
            "text": "The symmetric difference of this and that.", 
            "title": "fun ref  difference(that: Flags[A val, B val] box): Flags[A val, B val] ref^"
        }, 
        {
            "location": "/collections-Flags/#fun-box-eqthat-flags91a-val-b-val93-box-bool-val", 
            "text": "Returns true if this has the same flags set as that.", 
            "title": "fun box  eq(that: Flags[A val, B val] box): Bool val"
        }, 
        {
            "location": "/collections-Flags/#fun-ref-flipflag-a-val-flags91a-val-b-val93-ref", 
            "text": "Sets the flag if it is unset, unsets the flag if it is set.", 
            "title": "fun ref  flip(flag: A val): Flags[A val, B val] ref^"
        }, 
        {
            "location": "/collections-Flags/#fun-box-gethat-flags91a-val-b-val93-box-bool-val", 
            "text": "Returns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.", 
            "title": "fun box  ge(that: Flags[A val, B val] box): Bool val"
        }, 
        {
            "location": "/collections-Flags/#fun-box-gtthat-flags91a-val-b-val93-box-bool-val", 
            "text": "Returns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.", 
            "title": "fun box  gt(that: Flags[A val, B val] box): Bool val"
        }, 
        {
            "location": "/collections-Flags/#fun-ref-intersectthat-flags91a-val-b-val93-box-flags91a-val-b-val93-ref", 
            "text": "The intersection of this and that.", 
            "title": "fun ref  intersect(that: Flags[A val, B val] box): Flags[A val, B val] ref^"
        }, 
        {
            "location": "/collections-Flags/#fun-box-lethat-flags91a-val-b-val93-box-bool-val", 
            "text": "Returns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.", 
            "title": "fun box  le(that: Flags[A val, B val] box): Bool val"
        }, 
        {
            "location": "/collections-Flags/#fun-box-ltthat-flags91a-val-b-val93-box-bool-val", 
            "text": "Returns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.", 
            "title": "fun box  lt(that: Flags[A val, B val] box): Bool val"
        }, 
        {
            "location": "/collections-Flags/#fun-box-nethat-flags91a-val-b-val93-box-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Flags[A val, B val] box): Bool val"
        }, 
        {
            "location": "/collections-Flags/#fun-box-op_andthat-flags91a-val-b-val93-box-flags91a-val-b-val93-iso", 
            "text": "The intersection of this and that.", 
            "title": "fun box  op_and(that: Flags[A val, B val] box): Flags[A val, B val] iso^"
        }, 
        {
            "location": "/collections-Flags/#fun-box-op_orthat-flags91a-val-b-val93-box-flags91a-val-b-val93-iso", 
            "text": "The union of this and that.", 
            "title": "fun box  op_or(that: Flags[A val, B val] box): Flags[A val, B val] iso^"
        }, 
        {
            "location": "/collections-Flags/#fun-box-op_xorthat-flags91a-val-b-val93-box-flags91a-val-b-val93-iso", 
            "text": "The symmetric difference of this and that.", 
            "title": "fun box  op_xor(that: Flags[A val, B val] box): Flags[A val, B val] iso^"
        }, 
        {
            "location": "/collections-Flags/#fun-ref-removethat-flags91a-val-b-val93-box-flags91a-val-b-val93-ref", 
            "text": "Unset flags that are set in that.", 
            "title": "fun ref  remove(that: Flags[A val, B val] box): Flags[A val, B val] ref^"
        }, 
        {
            "location": "/collections-Flags/#fun-ref-setflag-a-val-flags91a-val-b-val93-ref", 
            "text": "Sets the flag.", 
            "title": "fun ref  set(flag: A val): Flags[A val, B val] ref^"
        }, 
        {
            "location": "/collections-Flags/#fun-box-subflag-a-val-flags91a-val-b-val93-iso", 
            "text": "This with the flag unset.", 
            "title": "fun box  sub(flag: A val): Flags[A val, B val] iso^"
        }, 
        {
            "location": "/collections-Flags/#fun-ref-unionthat-flags91a-val-b-val93-box-flags91a-val-b-val93-ref", 
            "text": "The union of this and that.", 
            "title": "fun ref  union(that: Flags[A val, B val] box): Flags[A val, B val] ref^"
        }, 
        {
            "location": "/collections-Flags/#fun-ref-unsetflag-a-val-flags91a-val-b-val93-ref", 
            "text": "Unsets the flag.", 
            "title": "fun ref  unset(flag: A val): Flags[A val, B val] ref^"
        }, 
        {
            "location": "/collections-Flags/#fun-box-value-b-val", 
            "text": "Returns the bit encoding of the set flags.", 
            "title": "fun box  value(): B val"
        }, 
        {
            "location": "/collections-Flags/#fun-box-withoutthat-flags91a-val-b-val93-box-flags91a-val-b-val93-iso", 
            "text": "The flags in this that are not in that.", 
            "title": "fun box  without(that: Flags[A val, B val] box): Flags[A val, B val] iso^"
        }, 
        {
            "location": "/collections-HashByteSeq/", 
            "text": "primitive collections/HashByteSeq\n\n\nDefault capability\n: \nval\n\n\nHash and equality functions for arbitrary ByteSeq.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(x: (\nString\n box | \nArray\n[\nU8\n val] box), y: (\nString\n box | \nArray\n[\nU8\n val] box)): \nBool\n val\n\n\nfun box  \nhash\n(x: (\nString\n box | \nArray\n[\nU8\n val] box)): \nU64\n val\n\n\nfun box  \nne\n(that: \nHashByteSeq\n val): \nBool\n val", 
            "title": "primitive HashByteSeq"
        }, 
        {
            "location": "/collections-HashByteSeq/#primitive-collectionshashbyteseq", 
            "text": "Default capability :  val  Hash and equality functions for arbitrary ByteSeq.", 
            "title": "primitive collections/HashByteSeq"
        }, 
        {
            "location": "/collections-HashByteSeq/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashByteSeq/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-HashByteSeq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashByteSeq/#fun-box-eqx-string-box-array91u8-val93-box-y-string-box-array91u8-val93-box-bool-val", 
            "text": "", 
            "title": "fun box  eq(x: (String box | Array[U8 val] box), y: (String box | Array[U8 val] box)): Bool val"
        }, 
        {
            "location": "/collections-HashByteSeq/#fun-box-hashx-string-box-array91u8-val93-box-u64-val", 
            "text": "", 
            "title": "fun box  hash(x: (String box | Array[U8 val] box)): U64 val"
        }, 
        {
            "location": "/collections-HashByteSeq/#fun-box-nethat-hashbyteseq-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: HashByteSeq val): Bool val"
        }, 
        {
            "location": "/collections-HashEq/", 
            "text": "primitive collections/HashEq[A: (\nHashable\n #read \n \nEquatable\n[A #read] #read)] is \nHashFunction\n[A #read] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(x: box-\nA #read, y: box-\nA #read): \nBool\n val\n\n\nUse the structural equality function from the type parameter.\n\n\nfun box  \nhash\n(x: box-\nA #read): \nU64\n val\n\n\nUse the hash function from the type parameter.\n\n\nfun box  \nne\n(that: \nHashEq\n[A #read] val): \nBool\n val", 
            "title": "primitive HashEq"
        }, 
        {
            "location": "/collections-HashEq/#primitive-collectionshasheq91a-hashable-read-equatable91a-read93-read93-is-hashfunction91a-read93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive collections/HashEq[A: (Hashable #read &amp; Equatable[A #read] #read)] is HashFunction[A #read] val"
        }, 
        {
            "location": "/collections-HashEq/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashEq/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-HashEq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashEq/#fun-box-eqx-box-a-read-y-box-a-read-bool-val", 
            "text": "Use the structural equality function from the type parameter.", 
            "title": "fun box  eq(x: box-&gt;A #read, y: box-&gt;A #read): Bool val"
        }, 
        {
            "location": "/collections-HashEq/#fun-box-hashx-box-a-read-u64-val", 
            "text": "Use the hash function from the type parameter.", 
            "title": "fun box  hash(x: box-&gt;A #read): U64 val"
        }, 
        {
            "location": "/collections-HashEq/#fun-box-nethat-hasheq91a-read93-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: HashEq[A #read] val): Bool val"
        }, 
        {
            "location": "/collections-HashFunction/", 
            "text": "interface collections/HashFunction[A: A]\n\n\nDefault capability\n: \nval\n\n\nA pluggable hash function.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nData structures create instances internally. Use a primitive if possible.\n\n\nPublic Functions\n\n\nfun box  \neq\n(x: box-\nA!, y: box-\nA!): \nBool\n val\n\n\nDetermine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.\n\n\nfun box  \nhash\n(x: box-\nA!): \nU64\n val\n\n\nCalculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.", 
            "title": "interface HashFunction"
        }, 
        {
            "location": "/collections-HashFunction/#interface-collectionshashfunction91a-a93", 
            "text": "Default capability :  val  A pluggable hash function.", 
            "title": "interface collections/HashFunction[A: A]"
        }, 
        {
            "location": "/collections-HashFunction/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashFunction/#new-create", 
            "text": "Data structures create instances internally. Use a primitive if possible.", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-HashFunction/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashFunction/#fun-box-eqx-box-a-y-box-a-bool-val", 
            "text": "Determine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.", 
            "title": "fun box  eq(x: box-&gt;A!, y: box-&gt;A!): Bool val"
        }, 
        {
            "location": "/collections-HashFunction/#fun-box-hashx-box-a-u64-val", 
            "text": "Calculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.", 
            "title": "fun box  hash(x: box-&gt;A!): U64 val"
        }, 
        {
            "location": "/collections-HashIs/", 
            "text": "primitive collections/HashIs[A: A] is \nHashFunction\n[A] val\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(x: box-\nA!, y: box-\nA!): \nBool\n val\n\n\nDetermine equality by identity rather than structurally.\n\n\nfun box  \nhash\n(x: box-\nA!): \nU64\n val\n\n\nHash the identity rather than the contents.\n\n\nfun box  \nne\n(that: \nHashIs\n[A] val): \nBool\n val", 
            "title": "primitive HashIs"
        }, 
        {
            "location": "/collections-HashIs/#primitive-collectionshashis91a-a93-is-hashfunction91a93-val", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive collections/HashIs[A: A] is HashFunction[A] val"
        }, 
        {
            "location": "/collections-HashIs/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashIs/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-HashIs/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashIs/#fun-box-eqx-box-a-y-box-a-bool-val", 
            "text": "Determine equality by identity rather than structurally.", 
            "title": "fun box  eq(x: box-&gt;A!, y: box-&gt;A!): Bool val"
        }, 
        {
            "location": "/collections-HashIs/#fun-box-hashx-box-a-u64-val", 
            "text": "Hash the identity rather than the contents.", 
            "title": "fun box  hash(x: box-&gt;A!): U64 val"
        }, 
        {
            "location": "/collections-HashIs/#fun-box-nethat-hashis91a93-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: HashIs[A] val): Bool val"
        }, 
        {
            "location": "/collections-HashMap/", 
            "text": "class collections/HashMap[K: K, V: V, H: \nHashFunction\n[K] val]\n\n\nDefault capability\n: \nref\n\n\nA quadratic probing hash map. Resize occurs at a load factor of 0.75. A\nresized map has 2 times the space. The hash function can be plugged in to the\ntype to create different kinds of maps.\n\n\nConstructors\n\n\nnew \ncreate\n(optional prealloc: \nUSize\n val)\n\n\nPublic Functions\n\n\nfun box  \nadd\n[optional H2: \nHashFunction\n[this-\nK!] val](key: this-\nK!, value: this-\nV!): \nHashMap\n[this-\nK!, this-\nV!, H2 val] ref^\n\n\nThis with the new (key, value) mapping.\n\n\nfun box  \napply\n(key: box-\nK!): this-\nV ?\n\n\nGets a value from the map. Raises an error if no such item exists.\n\n\nfun ref  \nclear\n(): \nHashMap\n[K, V, H val] ref^\n\n\nRemove all entries.\n\n\nfun box  \nclone\n[optional H2: \nHashFunction\n[this-\nK!] val](): \nHashMap\n[this-\nK!, this-\nV!, H2 val] ref^\n\n\nCreate a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.\n\n\nfun ref  \ncompact\n(): \nHashMap\n[K, V, H val] ref^\n\n\nMinimise the memory used for the map.\n\n\nfun ref  \nconcat\n(iter: \nIterator\n[(K^ , V^)] ref): \nNone\n val\n\n\nAdd K, V pairs from the iterator to the map.\n\n\nfun box  \nindex\n(i: \nUSize\n val): (this-\nK , this-\nV) ?\n\n\nReturns the key and value at a given index.\nRaise an error if the index is not populated.\n\n\nfun ref  \ninsert\n(key: K, value: V): V ?\n\n\nSet a value in the map. Returns the new value, allowing reuse.\n\n\nfun box  \nkeys\n(): \nMapKeys\n[K, V, H val, this-\nHashMap\n[K, V, H val] ref] ref^\n\n\nReturn an iterator over the keys.\n\n\nfun box  \nnext_index\n(optional prev: \nUSize\n val): \nUSize\n val ?\n\n\nGiven an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.\n\n\nfun box  \npairs\n(): \nMapPairs\n[K, V, H val, this-\nHashMap\n[K, V, H val] ref] ref^\n\n\nReturn an iterator over the keys and values.\n\n\nfun ref  \nremove\n(key: box-\nK!): (K^ , V^) ?\n\n\nDelete a value from the map and return it. Raises an error if there was no\nvalue for the given key.\n\n\nfun box  \nsize\n(): \nUSize\n val\n\n\nThe number of items in the map.\n\n\nfun box  \nspace\n(): \nUSize\n val\n\n\nThe available space in the map. Resize will happen when\nsize / space \n= 0.75.\n\n\nfun box  \nsub\n[optional H2: \nHashFunction\n[this-\nK!] val](key: this-\nK!, value: this-\nV!): \nHashMap\n[this-\nK!, this-\nV!, H2 val] ref^\n\n\nThis without the given key.\n\n\nfun ref  \nupdate\n(key: K, value: V): (V^ | \nNone\n val)\n\n\nSets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.\n\n\nfun box  \nvalues\n(): \nMapValues\n[K, V, H val, this-\nHashMap\n[K, V, H val] ref] ref^\n\n\nReturn an iterator over the values.\n\n\nPrivate Functions\n\n\nfun ref  \n_resize\n(len: \nUSize\n val): \nNone\n val\n\n\nChange the available space.\n\n\nfun box  \n_search\n(key: box-\nK!): (\nUSize\n val , \nBool\n val)\n\n\nReturn a slot number and whether or not it's currently occupied.", 
            "title": "class HashMap"
        }, 
        {
            "location": "/collections-HashMap/#class-collectionshashmap91k-k-v-v-h-hashfunction91k93-val93", 
            "text": "Default capability :  ref  A quadratic probing hash map. Resize occurs at a load factor of 0.75. A\nresized map has 2 times the space. The hash function can be plugged in to the\ntype to create different kinds of maps.", 
            "title": "class collections/HashMap[K: K, V: V, H: HashFunction[K] val]"
        }, 
        {
            "location": "/collections-HashMap/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashMap/#new-createoptional-prealloc-usize-val", 
            "text": "", 
            "title": "new create(optional prealloc: USize val)"
        }, 
        {
            "location": "/collections-HashMap/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-add91optional-h2-hashfunction91this-k93-val93key-this-k-value-this-v-hashmap91this-k-this-v-h2-val93-ref", 
            "text": "This with the new (key, value) mapping.", 
            "title": "fun box  add[optional H2: HashFunction[this-&gt;K!] val](key: this-&gt;K!, value: this-&gt;V!): HashMap[this-&gt;K!, this-&gt;V!, H2 val] ref^"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-applykey-box-k-this-v", 
            "text": "Gets a value from the map. Raises an error if no such item exists.", 
            "title": "fun box  apply(key: box-&gt;K!): this-&gt;V ?"
        }, 
        {
            "location": "/collections-HashMap/#fun-ref-clear-hashmap91k-v-h-val93-ref", 
            "text": "Remove all entries.", 
            "title": "fun ref  clear(): HashMap[K, V, H val] ref^"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-clone91optional-h2-hashfunction91this-k93-val93-hashmap91this-k-this-v-h2-val93-ref", 
            "text": "Create a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.", 
            "title": "fun box  clone[optional H2: HashFunction[this-&gt;K!] val](): HashMap[this-&gt;K!, this-&gt;V!, H2 val] ref^"
        }, 
        {
            "location": "/collections-HashMap/#fun-ref-compact-hashmap91k-v-h-val93-ref", 
            "text": "Minimise the memory used for the map.", 
            "title": "fun ref  compact(): HashMap[K, V, H val] ref^"
        }, 
        {
            "location": "/collections-HashMap/#fun-ref-concatiter-iterator91k-v93-ref-none-val", 
            "text": "Add K, V pairs from the iterator to the map.", 
            "title": "fun ref  concat(iter: Iterator[(K^ , V^)] ref): None val"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-indexi-usize-val-this-k-this-v", 
            "text": "Returns the key and value at a given index.\nRaise an error if the index is not populated.", 
            "title": "fun box  index(i: USize val): (this-&gt;K , this-&gt;V) ?"
        }, 
        {
            "location": "/collections-HashMap/#fun-ref-insertkey-k-value-v-v", 
            "text": "Set a value in the map. Returns the new value, allowing reuse.", 
            "title": "fun ref  insert(key: K, value: V): V ?"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-keys-mapkeys91k-v-h-val-this-hashmap91k-v-h-val93-ref93-ref", 
            "text": "Return an iterator over the keys.", 
            "title": "fun box  keys(): MapKeys[K, V, H val, this-&gt;HashMap[K, V, H val] ref] ref^"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-next_indexoptional-prev-usize-val-usize-val", 
            "text": "Given an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.", 
            "title": "fun box  next_index(optional prev: USize val): USize val ?"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-pairs-mappairs91k-v-h-val-this-hashmap91k-v-h-val93-ref93-ref", 
            "text": "Return an iterator over the keys and values.", 
            "title": "fun box  pairs(): MapPairs[K, V, H val, this-&gt;HashMap[K, V, H val] ref] ref^"
        }, 
        {
            "location": "/collections-HashMap/#fun-ref-removekey-box-k-k-v", 
            "text": "Delete a value from the map and return it. Raises an error if there was no\nvalue for the given key.", 
            "title": "fun ref  remove(key: box-&gt;K!): (K^ , V^) ?"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-size-usize-val", 
            "text": "The number of items in the map.", 
            "title": "fun box  size(): USize val"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-space-usize-val", 
            "text": "The available space in the map. Resize will happen when\nsize / space  = 0.75.", 
            "title": "fun box  space(): USize val"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-sub91optional-h2-hashfunction91this-k93-val93key-this-k-value-this-v-hashmap91this-k-this-v-h2-val93-ref", 
            "text": "This without the given key.", 
            "title": "fun box  sub[optional H2: HashFunction[this-&gt;K!] val](key: this-&gt;K!, value: this-&gt;V!): HashMap[this-&gt;K!, this-&gt;V!, H2 val] ref^"
        }, 
        {
            "location": "/collections-HashMap/#fun-ref-updatekey-k-value-v-v-none-val", 
            "text": "Sets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.", 
            "title": "fun ref  update(key: K, value: V): (V^ | None val)"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-values-mapvalues91k-v-h-val-this-hashmap91k-v-h-val93-ref93-ref", 
            "text": "Return an iterator over the values.", 
            "title": "fun box  values(): MapValues[K, V, H val, this-&gt;HashMap[K, V, H val] ref] ref^"
        }, 
        {
            "location": "/collections-HashMap/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-HashMap/#fun-ref-_resizelen-usize-val-none-val", 
            "text": "Change the available space.", 
            "title": "fun ref  _resize(len: USize val): None val"
        }, 
        {
            "location": "/collections-HashMap/#fun-box-_searchkey-box-k-usize-val-bool-val", 
            "text": "Return a slot number and whether or not it's currently occupied.", 
            "title": "fun box  _search(key: box-&gt;K!): (USize val , Bool val)"
        }, 
        {
            "location": "/collections-HashSet/", 
            "text": "class collections/HashSet[A: A, H: \nHashFunction\n[A!] val] is \nComparable\n[\nHashSet\n[A, H val] box] ref\n\n\nDefault capability\n: \nref\n\n\nA set, built on top of a HashMap. This is implemented as map of an alias of\na type to itself\n\n\nConstructors\n\n\nnew \ncreate\n(optional prealloc: \nUSize\n val)\n\n\nDefaults to a prealloc of 8.\n\n\nPublic Functions\n\n\nfun box  \nadd\n[optional K: \nHashFunction\n[this-\nA!] val](value: this-\nA!): \nHashSet\n[this-\nA!, K val] ref^\n\n\nAdd a value to the set.\n\n\nfun box  \napply\n(value: box-\nA!): this-\nA ?\n\n\nReturn the value if its in the set, otherwise raise an error.\n\n\nfun ref  \nclear\n(): \nHashSet\n[A, H val] ref^\n\n\nRemove all elements from the set.\n\n\nfun box  \nclone\n[optional K: \nHashFunction\n[this-\nA!] val](): \nHashSet\n[this-\nA!, K val] ref^\n\n\nCreate a clone. The element type may be different due to aliasing and\nviewpoint adaptation.\n\n\nfun box  \ncompare\n(that: \nHashSet\n[A, H val] box): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nfun ref  \ndifference\n(that: \nIterator\n[A^] ref): \nHashSet\n[A, H val] ref^\n\n\nRemove elements in this which are also in that. Add elements in that which\nare not in this.\n\n\nfun box  \neq\n(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nReturns true if the sets contain the same elements.\n\n\nfun ref  \nextract\n(value: box-\nA!): A^ ?\n\n\nRemove a value from the set and return it. Raises an error if the value\nwasn't in the set.\n\n\nfun box  \nge\n(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nReturns true if every element in that is also in this.\n\n\nfun box  \ngt\n(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nReturns true if every element in that is also in this, and this has more\nelements than that.\n\n\nfun box  \nindex\n(i: \nUSize\n val): this-\nA ?\n\n\nReturns the value at a given index. Raise an error if the index is not\npopulated.\n\n\nfun ref  \nintersect\n[optional K: \nHashFunction\n[box-\nA!] val](that: \nHashSet\n[box-\nA!, K val] ref): \nHashSet\n[A, H val] ref^\n\n\nRemove everything that isn't in that.\n\n\nfun box  \nle\n(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nReturns true if every element in this is also in that.\n\n\nfun box  \nlt\n(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nReturns true if every element in this is also in that, and this has fewer\nelements than that.\n\n\nfun box  \nne\n(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nReturns false if the sets contain the same elements.\n\n\nfun box  \nnext_index\n(optional prev: \nUSize\n val): \nUSize\n val ?\n\n\nGiven an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.\n\n\nfun box  \nop_and\n[optional K: \nHashFunction\n[this-\nA!] val](that: this-\nHashSet\n[A, H val] ref): \nHashSet\n[this-\nA!, K val] ref^\n\n\nCreate a set with the elements that are in both this and that.\n\n\nfun box  \nop_or\n[optional K: \nHashFunction\n[this-\nA!] val](that: this-\nHashSet\n[A, H val] ref): \nHashSet\n[this-\nA!, K val] ref^\n\n\nCreate a set with the elements of both this and that.\n\n\nfun box  \nop_xor\n[optional K: \nHashFunction\n[this-\nA!] val](that: this-\nHashSet\n[A, H val] ref): \nHashSet\n[this-\nA!, K val] ref^\n\n\nCreate a set with the elements that are in either set but not both.\n\n\nfun ref  \nremove\n(that: \nIterator\n[box-\nA!] ref): \nHashSet\n[A, H val] ref^\n\n\nRemove everything that is in that.\n\n\nfun ref  \nset\n(value: A): \nHashSet\n[A, H val] ref^\n\n\nAdd a value to the set.\n\n\nfun box  \nsize\n(): \nUSize\n val\n\n\nThe number of items in the set.\n\n\nfun box  \nspace\n(): \nUSize\n val\n\n\nThe available space in the set.\n\n\nfun box  \nsub\n[optional K: \nHashFunction\n[this-\nA!] val](value: box-\nthis-\nA!): \nHashSet\n[this-\nA!, K val] ref^\n\n\nRemove a value from the set.\n\n\nfun ref  \nunion\n(that: \nIterator\n[A^] ref): \nHashSet\n[A, H val] ref^\n\n\nAdd everything in that to the set.\n\n\nfun ref  \nunset\n(value: box-\nA!): \nHashSet\n[A, H val] ref^\n\n\nRemove a value from the set.\n\n\nfun box  \nvalues\n(): \nSetValues\n[A, H val, this-\nHashSet\n[A, H val] ref] ref^\n\n\nReturn an iterator over the values.\n\n\nfun box  \nwithout\n[optional K: \nHashFunction\n[this-\nA!] val](that: this-\nHashSet\n[A, H val] ref): \nHashSet\n[this-\nA!, K val] ref^\n\n\nCreate a set with the elements of this that are not in that.", 
            "title": "class HashSet"
        }, 
        {
            "location": "/collections-HashSet/#class-collectionshashset91a-a-h-hashfunction91a93-val93-is-comparable91hashset91a-h-val93-box93-ref", 
            "text": "Default capability :  ref  A set, built on top of a HashMap. This is implemented as map of an alias of\na type to itself", 
            "title": "class collections/HashSet[A: A, H: HashFunction[A!] val] is Comparable[HashSet[A, H val] box] ref"
        }, 
        {
            "location": "/collections-HashSet/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashSet/#new-createoptional-prealloc-usize-val", 
            "text": "Defaults to a prealloc of 8.", 
            "title": "new create(optional prealloc: USize val)"
        }, 
        {
            "location": "/collections-HashSet/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-add91optional-k-hashfunction91this-a93-val93value-this-a-hashset91this-a-k-val93-ref", 
            "text": "Add a value to the set.", 
            "title": "fun box  add[optional K: HashFunction[this-&gt;A!] val](value: this-&gt;A!): HashSet[this-&gt;A!, K val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-applyvalue-box-a-this-a", 
            "text": "Return the value if its in the set, otherwise raise an error.", 
            "title": "fun box  apply(value: box-&gt;A!): this-&gt;A ?"
        }, 
        {
            "location": "/collections-HashSet/#fun-ref-clear-hashset91a-h-val93-ref", 
            "text": "Remove all elements from the set.", 
            "title": "fun ref  clear(): HashSet[A, H val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-clone91optional-k-hashfunction91this-a93-val93-hashset91this-a-k-val93-ref", 
            "text": "Create a clone. The element type may be different due to aliasing and\nviewpoint adaptation.", 
            "title": "fun box  clone[optional K: HashFunction[this-&gt;A!] val](): HashSet[this-&gt;A!, K val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-comparethat-hashset91a-h-val93-box-less-val-equal-val-greater-val", 
            "text": "", 
            "title": "fun box  compare(that: HashSet[A, H val] box): ((Less val | Equal val) | Greater val)"
        }, 
        {
            "location": "/collections-HashSet/#fun-ref-differencethat-iterator91a93-ref-hashset91a-h-val93-ref", 
            "text": "Remove elements in this which are also in that. Add elements in that which\nare not in this.", 
            "title": "fun ref  difference(that: Iterator[A^] ref): HashSet[A, H val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-eqthat-hashset91a-h-val93-box-bool-val", 
            "text": "Returns true if the sets contain the same elements.", 
            "title": "fun box  eq(that: HashSet[A, H val] box): Bool val"
        }, 
        {
            "location": "/collections-HashSet/#fun-ref-extractvalue-box-a-a", 
            "text": "Remove a value from the set and return it. Raises an error if the value\nwasn't in the set.", 
            "title": "fun ref  extract(value: box-&gt;A!): A^ ?"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-gethat-hashset91a-h-val93-box-bool-val", 
            "text": "Returns true if every element in that is also in this.", 
            "title": "fun box  ge(that: HashSet[A, H val] box): Bool val"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-gtthat-hashset91a-h-val93-box-bool-val", 
            "text": "Returns true if every element in that is also in this, and this has more\nelements than that.", 
            "title": "fun box  gt(that: HashSet[A, H val] box): Bool val"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-indexi-usize-val-this-a", 
            "text": "Returns the value at a given index. Raise an error if the index is not\npopulated.", 
            "title": "fun box  index(i: USize val): this-&gt;A ?"
        }, 
        {
            "location": "/collections-HashSet/#fun-ref-intersect91optional-k-hashfunction91box-a93-val93that-hashset91box-a-k-val93-ref-hashset91a-h-val93-ref", 
            "text": "Remove everything that isn't in that.", 
            "title": "fun ref  intersect[optional K: HashFunction[box-&gt;A!] val](that: HashSet[box-&gt;A!, K val] ref): HashSet[A, H val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-lethat-hashset91a-h-val93-box-bool-val", 
            "text": "Returns true if every element in this is also in that.", 
            "title": "fun box  le(that: HashSet[A, H val] box): Bool val"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-ltthat-hashset91a-h-val93-box-bool-val", 
            "text": "Returns true if every element in this is also in that, and this has fewer\nelements than that.", 
            "title": "fun box  lt(that: HashSet[A, H val] box): Bool val"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-nethat-hashset91a-h-val93-box-bool-val", 
            "text": "Returns false if the sets contain the same elements.", 
            "title": "fun box  ne(that: HashSet[A, H val] box): Bool val"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-next_indexoptional-prev-usize-val-usize-val", 
            "text": "Given an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.", 
            "title": "fun box  next_index(optional prev: USize val): USize val ?"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-op_and91optional-k-hashfunction91this-a93-val93that-this-hashset91a-h-val93-ref-hashset91this-a-k-val93-ref", 
            "text": "Create a set with the elements that are in both this and that.", 
            "title": "fun box  op_and[optional K: HashFunction[this-&gt;A!] val](that: this-&gt;HashSet[A, H val] ref): HashSet[this-&gt;A!, K val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-op_or91optional-k-hashfunction91this-a93-val93that-this-hashset91a-h-val93-ref-hashset91this-a-k-val93-ref", 
            "text": "Create a set with the elements of both this and that.", 
            "title": "fun box  op_or[optional K: HashFunction[this-&gt;A!] val](that: this-&gt;HashSet[A, H val] ref): HashSet[this-&gt;A!, K val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-op_xor91optional-k-hashfunction91this-a93-val93that-this-hashset91a-h-val93-ref-hashset91this-a-k-val93-ref", 
            "text": "Create a set with the elements that are in either set but not both.", 
            "title": "fun box  op_xor[optional K: HashFunction[this-&gt;A!] val](that: this-&gt;HashSet[A, H val] ref): HashSet[this-&gt;A!, K val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-ref-removethat-iterator91box-a93-ref-hashset91a-h-val93-ref", 
            "text": "Remove everything that is in that.", 
            "title": "fun ref  remove(that: Iterator[box-&gt;A!] ref): HashSet[A, H val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-ref-setvalue-a-hashset91a-h-val93-ref", 
            "text": "Add a value to the set.", 
            "title": "fun ref  set(value: A): HashSet[A, H val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-size-usize-val", 
            "text": "The number of items in the set.", 
            "title": "fun box  size(): USize val"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-space-usize-val", 
            "text": "The available space in the set.", 
            "title": "fun box  space(): USize val"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-sub91optional-k-hashfunction91this-a93-val93value-box-this-a-hashset91this-a-k-val93-ref", 
            "text": "Remove a value from the set.", 
            "title": "fun box  sub[optional K: HashFunction[this-&gt;A!] val](value: box-&gt;this-&gt;A!): HashSet[this-&gt;A!, K val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-ref-unionthat-iterator91a93-ref-hashset91a-h-val93-ref", 
            "text": "Add everything in that to the set.", 
            "title": "fun ref  union(that: Iterator[A^] ref): HashSet[A, H val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-ref-unsetvalue-box-a-hashset91a-h-val93-ref", 
            "text": "Remove a value from the set.", 
            "title": "fun ref  unset(value: box-&gt;A!): HashSet[A, H val] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-values-setvalues91a-h-val-this-hashset91a-h-val93-ref93-ref", 
            "text": "Return an iterator over the values.", 
            "title": "fun box  values(): SetValues[A, H val, this-&gt;HashSet[A, H val] ref] ref^"
        }, 
        {
            "location": "/collections-HashSet/#fun-box-without91optional-k-hashfunction91this-a93-val93that-this-hashset91a-h-val93-ref-hashset91this-a-k-val93-ref", 
            "text": "Create a set with the elements of this that are not in that.", 
            "title": "fun box  without[optional K: HashFunction[this-&gt;A!] val](that: this-&gt;HashSet[A, H val] ref): HashSet[this-&gt;A!, K val] ref^"
        }, 
        {
            "location": "/collections-Hashable/", 
            "text": "interface collections/Hashable\n\n\nDefault capability\n: \nref\n\n\nAnything with a hash method is hashable.\n\n\nPublic Functions\n\n\nfun box  \nhash\n(): \nU64\n val", 
            "title": "interface Hashable"
        }, 
        {
            "location": "/collections-Hashable/#interface-collectionshashable", 
            "text": "Default capability :  ref  Anything with a hash method is hashable.", 
            "title": "interface collections/Hashable"
        }, 
        {
            "location": "/collections-Hashable/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Hashable/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/collections-List/", 
            "text": "class collections/List[A: A] is \nSeq\n[A] ref\n\n\nDefault capability\n: \nref\n\n\nA doubly linked list.\n\n\nConstructors\n\n\nnew \ncreate\n(optional len: \nUSize\n val)\n\n\nnew \nfrom\n(seq: \nArray\n[A^] ref)\n\n\nnew \nunit\n(a: A)\n\n\nPublic Functions\n\n\nfun ref  \nappend\n(seq: (\nReadSeq\n[A] box \n \nReadElement\n[A^] box), optional offset: \nUSize\n val, optional len: \nUSize\n val): \nList\n[A] ref^\n\n\nAppend len elements from a sequence, starting from the given offset.\n\n\nfun ref  \nappend_list\n(that: \nList\n[A] ref): \nList\n[A] ref^\n\n\nRemove all nodes from that and append them to this.\n\n\nfun ref  \nappend_node\n(node: \nListNode\n[A] ref): \nList\n[A] ref^\n\n\nAdds a node to the tail of the list.\n\n\nfun box  \napply\n(optional i: \nUSize\n val): this-\nA ?\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun ref  \nclear\n(): \nList\n[A] ref^\n\n\nEmpties the list.\n\n\nfun box  \nclone\n(): \nList\n[this-\nA!] ref^\n\n\nClone the list.\n\n\nfun ref  \nconcat\n(iter: \nIterator\n[A^] ref, optional offset: \nUSize\n val, optional len: \nUSize\n val): \nList\n[A] ref^\n\n\nAdd len iterated elements to the end of the list, starting from the given\noffset.\n\n\nfun box  \ncontains\n[optional B: (A \n \nHasEq\n[A!] #read)](a: box-\nB #read): \nBool\n val\n\n\nReturns true if the list contains the provided element, false otherwise.\n\n\nfun box  \ndrop\n(n: \nUSize\n val): \nList\n[this-\nA!] ref^\n\n\nBuilds a list by dropping the first n elements.\n\n\nfun box  \nevery\n(f: \n$4$43\n[A] box): \nBool\n val\n\n\nReturns true if every element satisfies the provided predicate, false\notherwise.\n\n\nfun box  \nexists\n(f: \n$4$46\n[A] box): \nBool\n val\n\n\nReturns true if at least one element satisfies the provided predicate,\nfalse otherwise.\n\n\nfun box  \nfilter\n(f: \n$4$37\n[A] box): \nList\n[this-\nA!] ref^\n\n\nBuilds a new list with those elements that satisfy a provided predicate.\n\n\nfun box  \nflat_map\n[B: B](f: \n$4$34\n[A, B] box): \nList\n[B] ref^\n\n\nBuilds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.\n\n\nfun box  \nfold\n[B: B](f: \n$4$40\n[A, B] box, acc: B): B\n\n\nFolds the elements of the list using the supplied function.\n\n\nfun box  \nhead\n(): this-\nListNode\n[A] ref ?\n\n\nGet the head of the list.\n\n\nfun box  \nindex\n(i: \nUSize\n val): this-\nListNode\n[A] ref ?\n\n\nGets the i-th node, raising an error if the index is out of bounds.\n\n\nfun box  \nmap\n[B: B](f: \n$4$31\n[A, B] box): \nList\n[B] ref^\n\n\nBuilds a new list by applying a function to every member of the list.\n\n\nfun box  \nnodes\n(): \nListNodes\n[A, this-\nListNode\n[A] ref] ref^\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun box  \npartition\n(f: \n$4$49\n[A] box): (\nList\n[this-\nA!] ref^ , \nList\n[this-\nA!] ref^)\n\n\nBuilds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.\n\n\nfun ref  \npop\n(): A^ ?\n\n\nRemoves a value from the tail of the list.\n\n\nfun ref  \nprepend_list\n(that: \nList\n[A] ref): \nList\n[A] ref^\n\n\nRemove all nodes from that and prepend them to this.\n\n\nfun ref  \nprepend_node\n(node: \nListNode\n[A] ref): \nList\n[A] ref^\n\n\nAdds a node to the head of the list.\n\n\nfun ref  \npush\n(a: A): \nList\n[A] ref^\n\n\nAdds a value to the tail of the list.\n\n\nfun ref  \nremove\n(i: \nUSize\n val): \nList\n[A] ref^ ?\n\n\nRemove the i-th node, raising an error if the index is out of bounds.\n\n\nfun ref  \nreserve\n(len: \nUSize\n val): \nList\n[A] ref^\n\n\nDo nothing, but be compatible with Seq.\n\n\nfun box  \nreverse\n(): \nList\n[this-\nA!] ref^\n\n\nBuilds a new list by reversing the elements in the list.\n\n\nfun box  \nrnodes\n(): \nListNodes\n[A, this-\nListNode\n[A] ref] ref^\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun box  \nrvalues\n(): \nListValues\n[A, this-\nListNode\n[A] ref] ref^\n\n\nReturn an iterator on the values in the list.\n\n\nfun ref  \nshift\n(): A^ ?\n\n\nRemoves a value from the head of the list.\n\n\nfun box  \nsize\n(): \nUSize\n val\n\n\nReturns the number of items in the list.\n\n\nfun box  \ntail\n(): this-\nListNode\n[A] ref ?\n\n\nGet the tail of the list.\n\n\nfun box  \ntake\n(n: \nUSize\n val): \nList\n[this-\nA!] ref\n\n\nBuilds a list of the first n elements.\n\n\nfun box  \ntake_while\n(f: \n$4$55\n[A] box): \nList\n[this-\nA!] ref^\n\n\nBuilds a list of elements satisfying the provided predicate until one does\nnot.\n\n\nfun ref  \ntruncate\n(len: \nUSize\n val): \nList\n[A] ref^\n\n\nTruncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.\n\n\nfun ref  \nunshift\n(a: A): \nList\n[A] ref^\n\n\nAdds a value to the head of the list.\n\n\nfun ref  \nupdate\n(i: \nUSize\n val, value: A): A^ ?\n\n\nChange the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.\n\n\nfun box  \nvalues\n(): \nListValues\n[A, this-\nListNode\n[A] ref] ref^\n\n\nReturn an iterator on the values in the list.\n\n\nPrivate Functions\n\n\nfun box  \n_contains\n[optional B: (A \n \nHasEq\n[A!] #read)](ln: this-\nListNode\n[A] ref, a: box-\nB #read): \nBool\n val\n\n\nPrivate helper for contains, recursively working with ListNodes.\n\n\nfun ref  \n_decrement\n(): \nNone\n val\n\n\nfun box  \n_every\n(ln: this-\nListNode\n[A] ref, f: \n$4$44\n[A] box): \nBool\n val\n\n\nPrivate helper for every, recursively working with ListNodes.\n\n\nfun box  \n_exists\n(ln: this-\nListNode\n[A] ref, f: \n$4$47\n[A] box): \nBool\n val\n\n\nPrivate helper for exists, recursively working with ListNodes.\n\n\nfun box  \n_filter\n(ln: this-\nListNode\n[A] ref, f: \n$4$38\n[A] box, acc: \nList\n[this-\nA!] ref): \nList\n[this-\nA!] ref\n\n\nPrivate helper for filter, recursively working with ListNodes.\n\n\nfun box  \nflat\nmap\n[B: B](ln: this-\nListNode\n[A] ref, f: \n$4$35\n[A, B] box, acc: \nList\n[B] ref): \nList\n[B] ref^\n\n\nPrivate helper for flat_map, recursively working with ListNodes.\n\n\nfun box  \n_fold\n[B: B](ln: this-\nListNode\n[A] ref, f: \n$4$41\n[A, B] box, acc: B): B\n\n\nPrivate helper for fold, recursively working with ListNodes.\n\n\nfun ref  \n_increment\n(): \nNone\n val\n\n\nfun box  \n_map\n[B: B](ln: this-\nListNode\n[A] ref, f: \n$4$32\n[A, B] box, acc: \nList\n[B] ref): \nList\n[B] ref^\n\n\nPrivate helper for map, recursively working with ListNodes.\n\n\nfun box  \n_reverse\n(ln: this-\nListNode\n[A] ref, acc: \nList\n[this-\nA!] ref): \nList\n[this-\nA!] ref^\n\n\nPrivate helper for reverse, recursively working with ListNodes.\n\n\nfun ref  \nset\nboth\n(node: \nListNode\n[A] ref): \nNone\n val\n\n\nfun ref  \nset\nhead\n(head': (\nListNode\n[A] ref | \nNone\n val)): \nNone\n val\n\n\nfun ref  \nset\ntail\n(tail': (\nListNode\n[A] ref | \nNone\n val)): \nNone\n val", 
            "title": "class List"
        }, 
        {
            "location": "/collections-List/#class-collectionslist91a-a93-is-seq91a93-ref", 
            "text": "Default capability :  ref  A doubly linked list.", 
            "title": "class collections/List[A: A] is Seq[A] ref"
        }, 
        {
            "location": "/collections-List/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-List/#new-createoptional-len-usize-val", 
            "text": "", 
            "title": "new create(optional len: USize val)"
        }, 
        {
            "location": "/collections-List/#new-fromseq-array91a93-ref", 
            "text": "", 
            "title": "new from(seq: Array[A^] ref)"
        }, 
        {
            "location": "/collections-List/#new-unita-a", 
            "text": "", 
            "title": "new unit(a: A)"
        }, 
        {
            "location": "/collections-List/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-List/#fun-ref-appendseq-readseq91a93-box-readelement91a93-box-optional-offset-usize-val-optional-len-usize-val-list91a93-ref", 
            "text": "Append len elements from a sequence, starting from the given offset.", 
            "title": "fun ref  append(seq: (ReadSeq[A] box &amp; ReadElement[A^] box), optional offset: USize val, optional len: USize val): List[A] ref^"
        }, 
        {
            "location": "/collections-List/#fun-ref-append_listthat-list91a93-ref-list91a93-ref", 
            "text": "Remove all nodes from that and append them to this.", 
            "title": "fun ref  append_list(that: List[A] ref): List[A] ref^"
        }, 
        {
            "location": "/collections-List/#fun-ref-append_nodenode-listnode91a93-ref-list91a93-ref", 
            "text": "Adds a node to the tail of the list.", 
            "title": "fun ref  append_node(node: ListNode[A] ref): List[A] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-applyoptional-i-usize-val-this-a", 
            "text": "Get the i-th element, raising an error if the index is out of bounds.", 
            "title": "fun box  apply(optional i: USize val): this-&gt;A ?"
        }, 
        {
            "location": "/collections-List/#fun-ref-clear-list91a93-ref", 
            "text": "Empties the list.", 
            "title": "fun ref  clear(): List[A] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-clone-list91this-a93-ref", 
            "text": "Clone the list.", 
            "title": "fun box  clone(): List[this-&gt;A!] ref^"
        }, 
        {
            "location": "/collections-List/#fun-ref-concatiter-iterator91a93-ref-optional-offset-usize-val-optional-len-usize-val-list91a93-ref", 
            "text": "Add len iterated elements to the end of the list, starting from the given\noffset.", 
            "title": "fun ref  concat(iter: Iterator[A^] ref, optional offset: USize val, optional len: USize val): List[A] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-contains91optional-b-a-haseq91a93-read93a-box-b-read-bool-val", 
            "text": "Returns true if the list contains the provided element, false otherwise.", 
            "title": "fun box  contains[optional B: (A &amp; HasEq[A!] #read)](a: box-&gt;B #read): Bool val"
        }, 
        {
            "location": "/collections-List/#fun-box-dropn-usize-val-list91this-a93-ref", 
            "text": "Builds a list by dropping the first n elements.", 
            "title": "fun box  drop(n: USize val): List[this-&gt;A!] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-everyf-44391a93-box-bool-val", 
            "text": "Returns true if every element satisfies the provided predicate, false\notherwise.", 
            "title": "fun box  every(f: $4$43[A] box): Bool val"
        }, 
        {
            "location": "/collections-List/#fun-box-existsf-44691a93-box-bool-val", 
            "text": "Returns true if at least one element satisfies the provided predicate,\nfalse otherwise.", 
            "title": "fun box  exists(f: $4$46[A] box): Bool val"
        }, 
        {
            "location": "/collections-List/#fun-box-filterf-43791a93-box-list91this-a93-ref", 
            "text": "Builds a new list with those elements that satisfy a provided predicate.", 
            "title": "fun box  filter(f: $4$37[A] box): List[this-&gt;A!] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-flat_map91b-b93f-43491a-b93-box-list91b93-ref", 
            "text": "Builds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.", 
            "title": "fun box  flat_map[B: B](f: $4$34[A, B] box): List[B] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-fold91b-b93f-44091a-b93-box-acc-b-b", 
            "text": "Folds the elements of the list using the supplied function.", 
            "title": "fun box  fold[B: B](f: $4$40[A, B] box, acc: B): B"
        }, 
        {
            "location": "/collections-List/#fun-box-head-this-listnode91a93-ref", 
            "text": "Get the head of the list.", 
            "title": "fun box  head(): this-&gt;ListNode[A] ref ?"
        }, 
        {
            "location": "/collections-List/#fun-box-indexi-usize-val-this-listnode91a93-ref", 
            "text": "Gets the i-th node, raising an error if the index is out of bounds.", 
            "title": "fun box  index(i: USize val): this-&gt;ListNode[A] ref ?"
        }, 
        {
            "location": "/collections-List/#fun-box-map91b-b93f-43191a-b93-box-list91b93-ref", 
            "text": "Builds a new list by applying a function to every member of the list.", 
            "title": "fun box  map[B: B](f: $4$31[A, B] box): List[B] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-nodes-listnodes91a-this-listnode91a93-ref93-ref", 
            "text": "Return an iterator on the nodes in the list.", 
            "title": "fun box  nodes(): ListNodes[A, this-&gt;ListNode[A] ref] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-partitionf-44991a93-box-list91this-a93-ref-list91this-a93-ref", 
            "text": "Builds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.", 
            "title": "fun box  partition(f: $4$49[A] box): (List[this-&gt;A!] ref^ , List[this-&gt;A!] ref^)"
        }, 
        {
            "location": "/collections-List/#fun-ref-pop-a", 
            "text": "Removes a value from the tail of the list.", 
            "title": "fun ref  pop(): A^ ?"
        }, 
        {
            "location": "/collections-List/#fun-ref-prepend_listthat-list91a93-ref-list91a93-ref", 
            "text": "Remove all nodes from that and prepend them to this.", 
            "title": "fun ref  prepend_list(that: List[A] ref): List[A] ref^"
        }, 
        {
            "location": "/collections-List/#fun-ref-prepend_nodenode-listnode91a93-ref-list91a93-ref", 
            "text": "Adds a node to the head of the list.", 
            "title": "fun ref  prepend_node(node: ListNode[A] ref): List[A] ref^"
        }, 
        {
            "location": "/collections-List/#fun-ref-pusha-a-list91a93-ref", 
            "text": "Adds a value to the tail of the list.", 
            "title": "fun ref  push(a: A): List[A] ref^"
        }, 
        {
            "location": "/collections-List/#fun-ref-removei-usize-val-list91a93-ref", 
            "text": "Remove the i-th node, raising an error if the index is out of bounds.", 
            "title": "fun ref  remove(i: USize val): List[A] ref^ ?"
        }, 
        {
            "location": "/collections-List/#fun-ref-reservelen-usize-val-list91a93-ref", 
            "text": "Do nothing, but be compatible with Seq.", 
            "title": "fun ref  reserve(len: USize val): List[A] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-reverse-list91this-a93-ref", 
            "text": "Builds a new list by reversing the elements in the list.", 
            "title": "fun box  reverse(): List[this-&gt;A!] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-rnodes-listnodes91a-this-listnode91a93-ref93-ref", 
            "text": "Return an iterator on the nodes in the list.", 
            "title": "fun box  rnodes(): ListNodes[A, this-&gt;ListNode[A] ref] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-rvalues-listvalues91a-this-listnode91a93-ref93-ref", 
            "text": "Return an iterator on the values in the list.", 
            "title": "fun box  rvalues(): ListValues[A, this-&gt;ListNode[A] ref] ref^"
        }, 
        {
            "location": "/collections-List/#fun-ref-shift-a", 
            "text": "Removes a value from the head of the list.", 
            "title": "fun ref  shift(): A^ ?"
        }, 
        {
            "location": "/collections-List/#fun-box-size-usize-val", 
            "text": "Returns the number of items in the list.", 
            "title": "fun box  size(): USize val"
        }, 
        {
            "location": "/collections-List/#fun-box-tail-this-listnode91a93-ref", 
            "text": "Get the tail of the list.", 
            "title": "fun box  tail(): this-&gt;ListNode[A] ref ?"
        }, 
        {
            "location": "/collections-List/#fun-box-taken-usize-val-list91this-a93-ref", 
            "text": "Builds a list of the first n elements.", 
            "title": "fun box  take(n: USize val): List[this-&gt;A!] ref"
        }, 
        {
            "location": "/collections-List/#fun-box-take_whilef-45591a93-box-list91this-a93-ref", 
            "text": "Builds a list of elements satisfying the provided predicate until one does\nnot.", 
            "title": "fun box  take_while(f: $4$55[A] box): List[this-&gt;A!] ref^"
        }, 
        {
            "location": "/collections-List/#fun-ref-truncatelen-usize-val-list91a93-ref", 
            "text": "Truncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.", 
            "title": "fun ref  truncate(len: USize val): List[A] ref^"
        }, 
        {
            "location": "/collections-List/#fun-ref-unshifta-a-list91a93-ref", 
            "text": "Adds a value to the head of the list.", 
            "title": "fun ref  unshift(a: A): List[A] ref^"
        }, 
        {
            "location": "/collections-List/#fun-ref-updatei-usize-val-value-a-a", 
            "text": "Change the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.", 
            "title": "fun ref  update(i: USize val, value: A): A^ ?"
        }, 
        {
            "location": "/collections-List/#fun-box-values-listvalues91a-this-listnode91a93-ref93-ref", 
            "text": "Return an iterator on the values in the list.", 
            "title": "fun box  values(): ListValues[A, this-&gt;ListNode[A] ref] ref^"
        }, 
        {
            "location": "/collections-List/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-List/#fun-box-_contains91optional-b-a-haseq91a93-read93ln-this-listnode91a93-ref-a-box-b-read-bool-val", 
            "text": "Private helper for contains, recursively working with ListNodes.", 
            "title": "fun box  _contains[optional B: (A &amp; HasEq[A!] #read)](ln: this-&gt;ListNode[A] ref, a: box-&gt;B #read): Bool val"
        }, 
        {
            "location": "/collections-List/#fun-ref-_decrement-none-val", 
            "text": "", 
            "title": "fun ref  _decrement(): None val"
        }, 
        {
            "location": "/collections-List/#fun-box-_everyln-this-listnode91a93-ref-f-44491a93-box-bool-val", 
            "text": "Private helper for every, recursively working with ListNodes.", 
            "title": "fun box  _every(ln: this-&gt;ListNode[A] ref, f: $4$44[A] box): Bool val"
        }, 
        {
            "location": "/collections-List/#fun-box-_existsln-this-listnode91a93-ref-f-44791a93-box-bool-val", 
            "text": "Private helper for exists, recursively working with ListNodes.", 
            "title": "fun box  _exists(ln: this-&gt;ListNode[A] ref, f: $4$47[A] box): Bool val"
        }, 
        {
            "location": "/collections-List/#fun-box-_filterln-this-listnode91a93-ref-f-43891a93-box-acc-list91this-a93-ref-list91this-a93-ref", 
            "text": "Private helper for filter, recursively working with ListNodes.", 
            "title": "fun box  _filter(ln: this-&gt;ListNode[A] ref, f: $4$38[A] box, acc: List[this-&gt;A!] ref): List[this-&gt;A!] ref"
        }, 
        {
            "location": "/collections-List/#fun-box-flatmap91b-b93ln-this-listnode91a93-ref-f-43591a-b93-box-acc-list91b93-ref-list91b93-ref", 
            "text": "Private helper for flat_map, recursively working with ListNodes.", 
            "title": "fun box  flatmap[B: B](ln: this-&gt;ListNode[A] ref, f: $4$35[A, B] box, acc: List[B] ref): List[B] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-_fold91b-b93ln-this-listnode91a93-ref-f-44191a-b93-box-acc-b-b", 
            "text": "Private helper for fold, recursively working with ListNodes.", 
            "title": "fun box  _fold[B: B](ln: this-&gt;ListNode[A] ref, f: $4$41[A, B] box, acc: B): B"
        }, 
        {
            "location": "/collections-List/#fun-ref-_increment-none-val", 
            "text": "", 
            "title": "fun ref  _increment(): None val"
        }, 
        {
            "location": "/collections-List/#fun-box-_map91b-b93ln-this-listnode91a93-ref-f-43291a-b93-box-acc-list91b93-ref-list91b93-ref", 
            "text": "Private helper for map, recursively working with ListNodes.", 
            "title": "fun box  _map[B: B](ln: this-&gt;ListNode[A] ref, f: $4$32[A, B] box, acc: List[B] ref): List[B] ref^"
        }, 
        {
            "location": "/collections-List/#fun-box-_reverseln-this-listnode91a93-ref-acc-list91this-a93-ref-list91this-a93-ref", 
            "text": "Private helper for reverse, recursively working with ListNodes.", 
            "title": "fun box  _reverse(ln: this-&gt;ListNode[A] ref, acc: List[this-&gt;A!] ref): List[this-&gt;A!] ref^"
        }, 
        {
            "location": "/collections-List/#fun-ref-setbothnode-listnode91a93-ref-none-val", 
            "text": "", 
            "title": "fun ref  setboth(node: ListNode[A] ref): None val"
        }, 
        {
            "location": "/collections-List/#fun-ref-setheadhead-listnode91a93-ref-none-val-none-val", 
            "text": "", 
            "title": "fun ref  sethead(head': (ListNode[A] ref | None val)): None val"
        }, 
        {
            "location": "/collections-List/#fun-ref-settailtail-listnode91a93-ref-none-val-none-val", 
            "text": "", 
            "title": "fun ref  settail(tail': (ListNode[A] ref | None val)): None val"
        }, 
        {
            "location": "/collections-ListNode/", 
            "text": "class collections/ListNode[A: A]\n\n\nDefault capability\n: \nref\n\n\nA node in a list.\n\n\nConstructors\n\n\nnew \ncreate\n(optional item: (A | \nNone\n val))\n\n\nPublic Functions\n\n\nfun ref  \nappend\n(that: \nListNode\n[A] ref): \nListNode\n[A] ref^\n\n\nAppend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is appended.\n\n\nfun box  \napply\n(): this-\nA ?\n\n\nReturn the item, if we have one, otherwise raise an error.\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nReturn true if there is a next node.\n\n\nfun box  \nhas_prev\n(): \nBool\n val\n\n\nReturn true if there is a previous node.\n\n\nfun box  \nnext\n(): (this-\nListNode\n[A] ref | \nNone\n val)\n\n\nReturn the next node.\n\n\nfun ref  \npop\n(): A^ ?\n\n\nRemove the item from the node, if we have one, otherwise raise an error.\n\n\nfun ref  \nprepend\n(that: \nListNode\n[A] ref): \nListNode\n[A] ref^\n\n\nPrepend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is prepended.\n\n\nfun box  \nprev\n(): (this-\nListNode\n[A] ref | \nNone\n val)\n\n\nReturn the previous node.\n\n\nfun ref  \nremove\n(): \nListNode\n[A] ref^\n\n\nRemove a node from a list.\n\n\nfun ref  \nupdate\n(value: (A | \nNone\n val)): A^ ?\n\n\nReplace the item and return the previous one. Raise an error if we have no\nprevious value.\n\n\nPrivate Functions\n\n\nfun ref  \nset\nlist\n(list: \nList\n[A] ref): \nListNode\n[A] ref^\n\n\nMake this node the only node on the given list.", 
            "title": "class ListNode"
        }, 
        {
            "location": "/collections-ListNode/#class-collectionslistnode91a-a93", 
            "text": "Default capability :  ref  A node in a list.", 
            "title": "class collections/ListNode[A: A]"
        }, 
        {
            "location": "/collections-ListNode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-ListNode/#new-createoptional-item-a-none-val", 
            "text": "", 
            "title": "new create(optional item: (A | None val))"
        }, 
        {
            "location": "/collections-ListNode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-ListNode/#fun-ref-appendthat-listnode91a93-ref-listnode91a93-ref", 
            "text": "Append a node to this one. If  that  is already in a list, it is removed\nbefore it is appended.", 
            "title": "fun ref  append(that: ListNode[A] ref): ListNode[A] ref^"
        }, 
        {
            "location": "/collections-ListNode/#fun-box-apply-this-a", 
            "text": "Return the item, if we have one, otherwise raise an error.", 
            "title": "fun box  apply(): this-&gt;A ?"
        }, 
        {
            "location": "/collections-ListNode/#fun-box-has_next-bool-val", 
            "text": "Return true if there is a next node.", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/collections-ListNode/#fun-box-has_prev-bool-val", 
            "text": "Return true if there is a previous node.", 
            "title": "fun box  has_prev(): Bool val"
        }, 
        {
            "location": "/collections-ListNode/#fun-box-next-this-listnode91a93-ref-none-val", 
            "text": "Return the next node.", 
            "title": "fun box  next(): (this-&gt;ListNode[A] ref | None val)"
        }, 
        {
            "location": "/collections-ListNode/#fun-ref-pop-a", 
            "text": "Remove the item from the node, if we have one, otherwise raise an error.", 
            "title": "fun ref  pop(): A^ ?"
        }, 
        {
            "location": "/collections-ListNode/#fun-ref-prependthat-listnode91a93-ref-listnode91a93-ref", 
            "text": "Prepend a node to this one. If  that  is already in a list, it is removed\nbefore it is prepended.", 
            "title": "fun ref  prepend(that: ListNode[A] ref): ListNode[A] ref^"
        }, 
        {
            "location": "/collections-ListNode/#fun-box-prev-this-listnode91a93-ref-none-val", 
            "text": "Return the previous node.", 
            "title": "fun box  prev(): (this-&gt;ListNode[A] ref | None val)"
        }, 
        {
            "location": "/collections-ListNode/#fun-ref-remove-listnode91a93-ref", 
            "text": "Remove a node from a list.", 
            "title": "fun ref  remove(): ListNode[A] ref^"
        }, 
        {
            "location": "/collections-ListNode/#fun-ref-updatevalue-a-none-val-a", 
            "text": "Replace the item and return the previous one. Raise an error if we have no\nprevious value.", 
            "title": "fun ref  update(value: (A | None val)): A^ ?"
        }, 
        {
            "location": "/collections-ListNode/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-ListNode/#fun-ref-setlistlist-list91a93-ref-listnode91a93-ref", 
            "text": "Make this node the only node on the given list.", 
            "title": "fun ref  setlist(list: List[A] ref): ListNode[A] ref^"
        }, 
        {
            "location": "/collections-ListNodes/", 
            "text": "class collections/ListNodes[A: A, N: \nListNode\n[A] #read] is \nIterator\n[N #read] ref\n\n\nDefault capability\n: \nref\n\n\nIterate over the nodes in a list.\n\n\nConstructors\n\n\nnew \ncreate\n(head: (N #read | \nNone\n val), optional reverse: \nBool\n val)\n\n\nKeep the next list node to be examined.\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nIf we have a list node, we have more values.\n\n\nfun ref  \nnext\n(): N #read ?\n\n\nGet the list node and replace it with the next one.", 
            "title": "class ListNodes"
        }, 
        {
            "location": "/collections-ListNodes/#class-collectionslistnodes91a-a-n-listnode91a93-read93-is-iterator91n-read93-ref", 
            "text": "Default capability :  ref  Iterate over the nodes in a list.", 
            "title": "class collections/ListNodes[A: A, N: ListNode[A] #read] is Iterator[N #read] ref"
        }, 
        {
            "location": "/collections-ListNodes/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-ListNodes/#new-createhead-n-read-none-val-optional-reverse-bool-val", 
            "text": "Keep the next list node to be examined.", 
            "title": "new create(head: (N #read | None val), optional reverse: Bool val)"
        }, 
        {
            "location": "/collections-ListNodes/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-ListNodes/#fun-box-has_next-bool-val", 
            "text": "If we have a list node, we have more values.", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/collections-ListNodes/#fun-ref-next-n-read", 
            "text": "Get the list node and replace it with the next one.", 
            "title": "fun ref  next(): N #read ?"
        }, 
        {
            "location": "/collections-ListValues/", 
            "text": "class collections/ListValues[A: A, N: \nListNode\n[A] #read] is \nIterator\n[N #read-\nA] ref\n\n\nDefault capability\n: \nref\n\n\nIterate over the values in a list.\n\n\nConstructors\n\n\nnew \ncreate\n(head: (N #read | \nNone\n val), optional reverse: \nBool\n val)\n\n\nKeep the next list node to be examined.\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nIf we have a list node, we have more values.\n\n\nfun ref  \nnext\n(): N #read-\nA ?\n\n\nGet the value of the list node and replace it with the next one.", 
            "title": "class ListValues"
        }, 
        {
            "location": "/collections-ListValues/#class-collectionslistvalues91a-a-n-listnode91a93-read93-is-iterator91n-read-a93-ref", 
            "text": "Default capability :  ref  Iterate over the values in a list.", 
            "title": "class collections/ListValues[A: A, N: ListNode[A] #read] is Iterator[N #read-&gt;A] ref"
        }, 
        {
            "location": "/collections-ListValues/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-ListValues/#new-createhead-n-read-none-val-optional-reverse-bool-val", 
            "text": "Keep the next list node to be examined.", 
            "title": "new create(head: (N #read | None val), optional reverse: Bool val)"
        }, 
        {
            "location": "/collections-ListValues/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-ListValues/#fun-box-has_next-bool-val", 
            "text": "If we have a list node, we have more values.", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/collections-ListValues/#fun-ref-next-n-read-a", 
            "text": "Get the value of the list node and replace it with the next one.", 
            "title": "fun ref  next(): N #read-&gt;A ?"
        }, 
        {
            "location": "/collections-Main/", 
            "text": "actor collections/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/collections-Main/#actor-collectionsmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor collections/Main is TestList ref"
        }, 
        {
            "location": "/collections-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/collections-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/collections-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/collections-Map/", 
            "text": "type collections/Map[K: (\nHashable\n #read \n \nEquatable\n[K #read] #read), V: V] is \nHashMap\n[K #read, V, \nHashEq\n[K #read] val] ref\n\n\nThis is a map that uses structural equality on the key.", 
            "title": "type Map"
        }, 
        {
            "location": "/collections-Map/#type-collectionsmap91k-hashable-read-equatable91k-read93-read-v-v93-is-hashmap91k-read-v-hasheq91k-read93-val93-ref", 
            "text": "This is a map that uses structural equality on the key.", 
            "title": "type collections/Map[K: (Hashable #read &amp; Equatable[K #read] #read), V: V] is HashMap[K #read, V, HashEq[K #read] val] ref"
        }, 
        {
            "location": "/collections-_MapDeleted/", 
            "text": "primitive collections/_MapDeleted\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_MapDeleted\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_MapDeleted\n val): \nBool\n val", 
            "title": "primitive _MapDeleted"
        }, 
        {
            "location": "/collections-_MapDeleted/#primitive-collections_mapdeleted", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive collections/_MapDeleted"
        }, 
        {
            "location": "/collections-_MapDeleted/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_MapDeleted/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_MapDeleted/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_MapDeleted/#fun-box-eqthat-_mapdeleted-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _MapDeleted val): Bool val"
        }, 
        {
            "location": "/collections-_MapDeleted/#fun-box-nethat-_mapdeleted-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _MapDeleted val): Bool val"
        }, 
        {
            "location": "/collections-_MapEmpty/", 
            "text": "primitive collections/_MapEmpty\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_MapEmpty\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_MapEmpty\n val): \nBool\n val", 
            "title": "primitive _MapEmpty"
        }, 
        {
            "location": "/collections-_MapEmpty/#primitive-collections_mapempty", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive collections/_MapEmpty"
        }, 
        {
            "location": "/collections-_MapEmpty/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_MapEmpty/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_MapEmpty/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_MapEmpty/#fun-box-eqthat-_mapempty-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _MapEmpty val): Bool val"
        }, 
        {
            "location": "/collections-_MapEmpty/#fun-box-nethat-_mapempty-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _MapEmpty val): Bool val"
        }, 
        {
            "location": "/collections-MapIs/", 
            "text": "type collections/MapIs[K: K, V: V] is \nHashMap\n[K, V, \nHashIs\n[K] val] ref\n\n\nThis is a map that uses identity comparison on the key.", 
            "title": "type MapIs"
        }, 
        {
            "location": "/collections-MapIs/#type-collectionsmapis91k-k-v-v93-is-hashmap91k-v-hashis91k93-val93-ref", 
            "text": "This is a map that uses identity comparison on the key.", 
            "title": "type collections/MapIs[K: K, V: V] is HashMap[K, V, HashIs[K] val] ref"
        }, 
        {
            "location": "/collections-MapKeys/", 
            "text": "class collections/MapKeys[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H val] #read] is \nIterator\n[M #read-\nK] ref\n\n\nDefault capability\n: \nref\n\n\nAn iterator over the keys in a map.\n\n\nConstructors\n\n\nnew \ncreate\n(map: M #read)\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun ref  \nnext\n(): M #read-\nK ?\n\n\nReturns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.", 
            "title": "class MapKeys"
        }, 
        {
            "location": "/collections-MapKeys/#class-collectionsmapkeys91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h-val93-read93-is-iterator91m-read-k93-ref", 
            "text": "Default capability :  ref  An iterator over the keys in a map.", 
            "title": "class collections/MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read] is Iterator[M #read-&gt;K] ref"
        }, 
        {
            "location": "/collections-MapKeys/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-MapKeys/#new-createmap-m-read", 
            "text": "", 
            "title": "new create(map: M #read)"
        }, 
        {
            "location": "/collections-MapKeys/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-MapKeys/#fun-box-has_next-bool-val", 
            "text": "True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/collections-MapKeys/#fun-ref-next-m-read-k", 
            "text": "Returns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.", 
            "title": "fun ref  next(): M #read-&gt;K ?"
        }, 
        {
            "location": "/collections-MapPairs/", 
            "text": "class collections/MapPairs[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H val] #read] is \nIterator\n[(M #read-\nK , M #read-\nV)] ref\n\n\nDefault capability\n: \nref\n\n\nAn iterator over the keys and values in a map.\n\n\nConstructors\n\n\nnew \ncreate\n(map: M #read)\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun ref  \nnext\n(): (M #read-\nK , M #read-\nV) ?\n\n\nReturns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.", 
            "title": "class MapPairs"
        }, 
        {
            "location": "/collections-MapPairs/#class-collectionsmappairs91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h-val93-read93-is-iterator91m-read-k-m-read-v93-ref", 
            "text": "Default capability :  ref  An iterator over the keys and values in a map.", 
            "title": "class collections/MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read] is Iterator[(M #read-&gt;K , M #read-&gt;V)] ref"
        }, 
        {
            "location": "/collections-MapPairs/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-MapPairs/#new-createmap-m-read", 
            "text": "", 
            "title": "new create(map: M #read)"
        }, 
        {
            "location": "/collections-MapPairs/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-MapPairs/#fun-box-has_next-bool-val", 
            "text": "True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/collections-MapPairs/#fun-ref-next-m-read-k-m-read-v", 
            "text": "Returns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.", 
            "title": "fun ref  next(): (M #read-&gt;K , M #read-&gt;V) ?"
        }, 
        {
            "location": "/collections-MapValues/", 
            "text": "class collections/MapValues[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H val] #read] is \nIterator\n[M #read-\nV] ref\n\n\nDefault capability\n: \nref\n\n\nAn iterator over the values in a map.\n\n\nConstructors\n\n\nnew \ncreate\n(map: M #read)\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun ref  \nnext\n(): M #read-\nV ?\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.", 
            "title": "class MapValues"
        }, 
        {
            "location": "/collections-MapValues/#class-collectionsmapvalues91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h-val93-read93-is-iterator91m-read-v93-ref", 
            "text": "Default capability :  ref  An iterator over the values in a map.", 
            "title": "class collections/MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read] is Iterator[M #read-&gt;V] ref"
        }, 
        {
            "location": "/collections-MapValues/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-MapValues/#new-createmap-m-read", 
            "text": "", 
            "title": "new create(map: M #read)"
        }, 
        {
            "location": "/collections-MapValues/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-MapValues/#fun-box-has_next-bool-val", 
            "text": "True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/collections-MapValues/#fun-ref-next-m-read-v", 
            "text": "Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.", 
            "title": "fun ref  next(): M #read-&gt;V ?"
        }, 
        {
            "location": "/collections-Range/", 
            "text": "class collections/Range[optional A: (\nReal\n[A val] val \n ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)))] is \nIterator\n[A val] ref\n\n\nDefault capability\n: \nref\n\n\nProduces [min, max).\n\n\nConstructors\n\n\nnew \ncreate\n(min: A val, max: A val, optional inc: A val)\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nfun ref  \nnext\n(): A val\n\n\nfun ref  \nrewind\n(): \nNone\n val", 
            "title": "class Range"
        }, 
        {
            "location": "/collections-Range/#class-collectionsrange91optional-a-real91a-val93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93-is-iterator91a-val93-ref", 
            "text": "Default capability :  ref  Produces [min, max).", 
            "title": "class collections/Range[optional A: (Real[A val] val &amp; ((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)))] is Iterator[A val] ref"
        }, 
        {
            "location": "/collections-Range/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-Range/#new-createmin-a-val-max-a-val-optional-inc-a-val", 
            "text": "", 
            "title": "new create(min: A val, max: A val, optional inc: A val)"
        }, 
        {
            "location": "/collections-Range/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Range/#fun-box-has_next-bool-val", 
            "text": "", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/collections-Range/#fun-ref-next-a-val", 
            "text": "", 
            "title": "fun ref  next(): A val"
        }, 
        {
            "location": "/collections-Range/#fun-ref-rewind-none-val", 
            "text": "", 
            "title": "fun ref  rewind(): None val"
        }, 
        {
            "location": "/collections-Reverse/", 
            "text": "class collections/Reverse[optional A: (\nReal\n[A val] val \n ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)))] is \nIterator\n[A val] ref\n\n\nDefault capability\n: \nref\n\n\nProduces [max, min].\n\n\nConstructors\n\n\nnew \ncreate\n(max: A val, min: A val, optional dec: A val)\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nfun ref  \nnext\n(): A val\n\n\nfun ref  \nrewind\n(): \nNone\n val", 
            "title": "class Reverse"
        }, 
        {
            "location": "/collections-Reverse/#class-collectionsreverse91optional-a-real91a-val93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93-is-iterator91a-val93-ref", 
            "text": "Default capability :  ref  Produces [max, min].", 
            "title": "class collections/Reverse[optional A: (Real[A val] val &amp; ((((((((I8 val | I16 val) | I32 val) | I64 val) | I128 val) | ILong val) | ISize val) | ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val)) | (F32 val | F64 val)))] is Iterator[A val] ref"
        }, 
        {
            "location": "/collections-Reverse/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-Reverse/#new-createmax-a-val-min-a-val-optional-dec-a-val", 
            "text": "", 
            "title": "new create(max: A val, min: A val, optional dec: A val)"
        }, 
        {
            "location": "/collections-Reverse/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Reverse/#fun-box-has_next-bool-val", 
            "text": "", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/collections-Reverse/#fun-ref-next-a-val", 
            "text": "", 
            "title": "fun ref  next(): A val"
        }, 
        {
            "location": "/collections-Reverse/#fun-ref-rewind-none-val", 
            "text": "", 
            "title": "fun ref  rewind(): None val"
        }, 
        {
            "location": "/collections-RingBuffer/", 
            "text": "class collections/RingBuffer[A: A]\n\n\nDefault capability\n: \nref\n\n\nA ring buffer.\n\n\nConstructors\n\n\nnew \ncreate\n(len: \nUSize\n val)\n\n\nPublic Functions\n\n\nfun box  \napply\n(i: \nUSize\n val): this-\nA ?\n\n\nGet the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.\n\n\nfun ref  \nclear\n(): \nRingBuffer\n[A] ref^\n\n\nClear the queue.\n\n\nfun box  \nhead\n(): \nUSize\n val ?\n\n\nThe first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.\n\n\nfun ref  \npush\n(value: A): \nRingBuffer\n[A] ref^\n\n\nAdd an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring.\n\n\nfun box  \nsize\n(): \nUSize\n val\n\n\nThe number of elements that have been added to the ring.\n\n\nfun box  \nspace\n(): \nUSize\n val\n\n\nThe available space in the ring.", 
            "title": "class RingBuffer"
        }, 
        {
            "location": "/collections-RingBuffer/#class-collectionsringbuffer91a-a93", 
            "text": "Default capability :  ref  A ring buffer.", 
            "title": "class collections/RingBuffer[A: A]"
        }, 
        {
            "location": "/collections-RingBuffer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-RingBuffer/#new-createlen-usize-val", 
            "text": "", 
            "title": "new create(len: USize val)"
        }, 
        {
            "location": "/collections-RingBuffer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-RingBuffer/#fun-box-applyi-usize-val-this-a", 
            "text": "Get the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.", 
            "title": "fun box  apply(i: USize val): this-&gt;A ?"
        }, 
        {
            "location": "/collections-RingBuffer/#fun-ref-clear-ringbuffer91a93-ref", 
            "text": "Clear the queue.", 
            "title": "fun ref  clear(): RingBuffer[A] ref^"
        }, 
        {
            "location": "/collections-RingBuffer/#fun-box-head-usize-val", 
            "text": "The first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.", 
            "title": "fun box  head(): USize val ?"
        }, 
        {
            "location": "/collections-RingBuffer/#fun-ref-pushvalue-a-ringbuffer91a93-ref", 
            "text": "Add an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring.", 
            "title": "fun ref  push(value: A): RingBuffer[A] ref^"
        }, 
        {
            "location": "/collections-RingBuffer/#fun-box-size-usize-val", 
            "text": "The number of elements that have been added to the ring.", 
            "title": "fun box  size(): USize val"
        }, 
        {
            "location": "/collections-RingBuffer/#fun-box-space-usize-val", 
            "text": "The available space in the ring.", 
            "title": "fun box  space(): USize val"
        }, 
        {
            "location": "/collections-Set/", 
            "text": "type collections/Set[A: (\nHashable\n #read \n \nEquatable\n[A #read] #read)] is \nHashSet\n[A #read, \nHashEq\n[A #read] val] ref\n\n\nNo doc string provided.", 
            "title": "type Set"
        }, 
        {
            "location": "/collections-Set/#type-collectionsset91a-hashable-read-equatable91a-read93-read93-is-hashset91a-read-hasheq91a-read93-val93-ref", 
            "text": "No doc string provided.", 
            "title": "type collections/Set[A: (Hashable #read &amp; Equatable[A #read] #read)] is HashSet[A #read, HashEq[A #read] val] ref"
        }, 
        {
            "location": "/collections-SetIs/", 
            "text": "type collections/SetIs[A: A] is \nHashSet\n[A, \nHashIs\n[A!] val] ref\n\n\nNo doc string provided.", 
            "title": "type SetIs"
        }, 
        {
            "location": "/collections-SetIs/#type-collectionssetis91a-a93-is-hashset91a-hashis91a93-val93-ref", 
            "text": "No doc string provided.", 
            "title": "type collections/SetIs[A: A] is HashSet[A, HashIs[A!] val] ref"
        }, 
        {
            "location": "/collections-SetValues/", 
            "text": "class collections/SetValues[A: A, H: \nHashFunction\n[A!] val, S: \nHashSet\n[A, H val] #read] is \nIterator\n[S #read-\nA] ref\n\n\nDefault capability\n: \nref\n\n\nAn iterator over the values in a set.\n\n\nConstructors\n\n\nnew \ncreate\n(set: S #read)\n\n\nPublic Functions\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.\n\n\nfun ref  \nnext\n(): S #read-\nA ?\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.", 
            "title": "class SetValues"
        }, 
        {
            "location": "/collections-SetValues/#class-collectionssetvalues91a-a-h-hashfunction91a93-val-s-hashset91a-h-val93-read93-is-iterator91s-read-a93-ref", 
            "text": "Default capability :  ref  An iterator over the values in a set.", 
            "title": "class collections/SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H val] #read] is Iterator[S #read-&gt;A] ref"
        }, 
        {
            "location": "/collections-SetValues/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-SetValues/#new-createset-s-read", 
            "text": "", 
            "title": "new create(set: S #read)"
        }, 
        {
            "location": "/collections-SetValues/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-SetValues/#fun-box-has_next-bool-val", 
            "text": "True if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/collections-SetValues/#fun-ref-next-s-read-a", 
            "text": "Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.", 
            "title": "fun ref  next(): S #read-&gt;A ?"
        }, 
        {
            "location": "/collections-_TestList/", 
            "text": "class collections/_TestList is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestList"
        }, 
        {
            "location": "/collections-_TestList/#class-collections_testlist-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestList is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestList/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestList/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestList/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestList/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestList/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestList/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestList/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestList/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsContains/", 
            "text": "class collections/_TestListsContains is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsContains"
        }, 
        {
            "location": "/collections-_TestListsContains/#class-collections_testlistscontains-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsContains is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsContains/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsContains/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsContains/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsContains/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsContains/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsContains/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsContains/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsContains/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsDrop/", 
            "text": "class collections/_TestListsDrop is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsDrop"
        }, 
        {
            "location": "/collections-_TestListsDrop/#class-collections_testlistsdrop-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsDrop is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsDrop/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsDrop/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsDrop/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsDrop/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestListsDrop/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsDrop/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsDrop/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsDrop/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsEvery/", 
            "text": "class collections/_TestListsEvery is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsEvery"
        }, 
        {
            "location": "/collections-_TestListsEvery/#class-collections_testlistsevery-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsEvery is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsEvery/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsEvery/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsEvery/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsEvery/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsEvery/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsEvery/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsEvery/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsEvery/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsExists/", 
            "text": "class collections/_TestListsExists is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsExists"
        }, 
        {
            "location": "/collections-_TestListsExists/#class-collections_testlistsexists-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsExists is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsExists/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsExists/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsExists/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsExists/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsExists/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsExists/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsExists/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsExists/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsFilter/", 
            "text": "class collections/_TestListsFilter is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsFilter"
        }, 
        {
            "location": "/collections-_TestListsFilter/#class-collections_testlistsfilter-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsFilter is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsFilter/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsFilter/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsFilter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsFilter/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestListsFilter/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsFilter/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsFilter/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsFilter/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsFlatMap/", 
            "text": "class collections/_TestListsFlatMap is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsFlatMap"
        }, 
        {
            "location": "/collections-_TestListsFlatMap/#class-collections_testlistsflatmap-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsFlatMap is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsFlatMap/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsFlatMap/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsFlatMap/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsFlatMap/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestListsFlatMap/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsFlatMap/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsFlatMap/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsFlatMap/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsFold/", 
            "text": "class collections/_TestListsFold is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsFold"
        }, 
        {
            "location": "/collections-_TestListsFold/#class-collections_testlistsfold-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsFold is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsFold/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsFold/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsFold/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsFold/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestListsFold/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsFold/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsFold/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsFold/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsFrom/", 
            "text": "class collections/_TestListsFrom is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsFrom"
        }, 
        {
            "location": "/collections-_TestListsFrom/#class-collections_testlistsfrom-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsFrom is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsFrom/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsFrom/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsFrom/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsFrom/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestListsFrom/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsFrom/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsFrom/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsFrom/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsMap/", 
            "text": "class collections/_TestListsMap is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsMap"
        }, 
        {
            "location": "/collections-_TestListsMap/#class-collections_testlistsmap-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsMap is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsMap/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsMap/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsMap/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsMap/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestListsMap/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsMap/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsMap/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsMap/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsPartition/", 
            "text": "class collections/_TestListsPartition is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsPartition"
        }, 
        {
            "location": "/collections-_TestListsPartition/#class-collections_testlistspartition-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsPartition is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsPartition/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsPartition/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsPartition/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsPartition/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestListsPartition/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsPartition/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsPartition/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsPartition/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsReverse/", 
            "text": "class collections/_TestListsReverse is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsReverse"
        }, 
        {
            "location": "/collections-_TestListsReverse/#class-collections_testlistsreverse-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsReverse is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsReverse/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsReverse/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsReverse/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsReverse/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestListsReverse/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsReverse/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsReverse/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsReverse/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsTake/", 
            "text": "class collections/_TestListsTake is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsTake"
        }, 
        {
            "location": "/collections-_TestListsTake/#class-collections_testliststake-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsTake is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsTake/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsTake/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsTake/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsTake/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestListsTake/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsTake/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsTake/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsTake/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsTakeWhile/", 
            "text": "class collections/_TestListsTakeWhile is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestListsTakeWhile"
        }, 
        {
            "location": "/collections-_TestListsTakeWhile/#class-collections_testliststakewhile-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestListsTakeWhile is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestListsTakeWhile/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestListsTakeWhile/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestListsTakeWhile/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestListsTakeWhile/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestListsTakeWhile/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestListsTakeWhile/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestListsTakeWhile/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestListsTakeWhile/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestMap/", 
            "text": "class collections/_TestMap is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestMap"
        }, 
        {
            "location": "/collections-_TestMap/#class-collections_testmap-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestMap is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestMap/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestMap/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestMap/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestMap/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestMap/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestMap/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestMap/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestMap/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestRing/", 
            "text": "class collections/_TestRing is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestRing"
        }, 
        {
            "location": "/collections-_TestRing/#class-collections_testring-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class collections/_TestRing is UnitTest ref"
        }, 
        {
            "location": "/collections-_TestRing/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_TestRing/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/collections-_TestRing/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_TestRing/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/collections-_TestRing/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/collections-_TestRing/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/collections-_TestRing/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/collections-_TestRing/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/debug--index/", 
            "text": "Debug package\n\n\nProvides facilities to create output to either \nSTDOUT\n or \nSTDERR\n that will\nonly appear when the platform is debug configured. To create a binary with\ndebug configured, pass the \n-d\n flag to \nponyc\n when compiling e.g.:\n\n\nponyc -d\n\n\nExample code\n\n\nactor Main\n  new create(env: Env) =\n\n    Debug.out(\nThis will only bee seen when configured for debug info\n)\n    env.out.print(\nThis will always be seen\n)\n\n\n\n\nEntities\n\n\n\n\nprimitive Debug\n\n\nprimitive DebugErr\n\n\nprimitive DebugOut\n\n\ntype DebugStream", 
            "title": "Package"
        }, 
        {
            "location": "/debug--index/#debug-package", 
            "text": "Provides facilities to create output to either  STDOUT  or  STDERR  that will\nonly appear when the platform is debug configured. To create a binary with\ndebug configured, pass the  -d  flag to  ponyc  when compiling e.g.:  ponyc -d", 
            "title": "Debug package"
        }, 
        {
            "location": "/debug--index/#example-code", 
            "text": "actor Main\n  new create(env: Env) = \n    Debug.out( This will only bee seen when configured for debug info )\n    env.out.print( This will always be seen )", 
            "title": "Example code"
        }, 
        {
            "location": "/debug--index/#entities", 
            "text": "primitive Debug  primitive DebugErr  primitive DebugOut  type DebugStream", 
            "title": "Entities"
        }, 
        {
            "location": "/debug-Debug/", 
            "text": "primitive debug/Debug\n\n\nDefault capability\n: \nval\n\n\nThis is a debug only print utility.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(msg: (\nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box | \nReadSeq\n[\nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box] box), optional sep: (\nString\n val | \nString\n val), optional stream: ((\nDebugOut\n val | \nDebugErr\n val) | (\nDebugOut\n val | \nDebugErr\n val))): ((\nNone\n val | \nNone\n val) | \nNone\n val)\n\n\nfun box  \neq\n(that: \nDebug\n val): \nBool\n val\n\n\nfun box  \nerr\n(optional msg: \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nNone\n val\n\n\nIf platform is debug configured, print message to standard error\n\n\nfun box  \nne\n(that: \nDebug\n val): \nBool\n val\n\n\nfun box  \nout\n(optional msg: \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nNone\n val\n\n\nIf platform is debug configured, print message to standard output\n\n\nPrivate Functions\n\n\nfun box  \n_print\n(msg: \nString\n val, stream: (\nDebugOut\n val | \nDebugErr\n val)): \nNone\n val\n\n\nfun box  \n_stream\n(stream: (\nDebugOut\n val | \nDebugErr\n val)): \nPointer\n[\nU8\n val] ref ?", 
            "title": "primitive Debug"
        }, 
        {
            "location": "/debug-Debug/#primitive-debugdebug", 
            "text": "Default capability :  val  This is a debug only print utility.", 
            "title": "primitive debug/Debug"
        }, 
        {
            "location": "/debug-Debug/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/debug-Debug/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/debug-Debug/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/debug-Debug/#fun-box-applymsg-stringable91formatdefault-val-prefixdefault-val93-box-readseq91stringable91formatdefault-val-prefixdefault-val93-box93-box-optional-sep-string-val-string-val-optional-stream-debugout-val-debugerr-val-debugout-val-debugerr-val-none-val-none-val-none-val", 
            "text": "", 
            "title": "fun box  apply(msg: (Stringable[FormatDefault val, PrefixDefault val] box | ReadSeq[Stringable[FormatDefault val, PrefixDefault val] box] box), optional sep: (String val | String val), optional stream: ((DebugOut val | DebugErr val) | (DebugOut val | DebugErr val))): ((None val | None val) | None val)"
        }, 
        {
            "location": "/debug-Debug/#fun-box-eqthat-debug-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Debug val): Bool val"
        }, 
        {
            "location": "/debug-Debug/#fun-box-erroptional-msg-stringable91formatdefault-val-prefixdefault-val93-box-none-val", 
            "text": "If platform is debug configured, print message to standard error", 
            "title": "fun box  err(optional msg: Stringable[FormatDefault val, PrefixDefault val] box): None val"
        }, 
        {
            "location": "/debug-Debug/#fun-box-nethat-debug-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Debug val): Bool val"
        }, 
        {
            "location": "/debug-Debug/#fun-box-outoptional-msg-stringable91formatdefault-val-prefixdefault-val93-box-none-val", 
            "text": "If platform is debug configured, print message to standard output", 
            "title": "fun box  out(optional msg: Stringable[FormatDefault val, PrefixDefault val] box): None val"
        }, 
        {
            "location": "/debug-Debug/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/debug-Debug/#fun-box-_printmsg-string-val-stream-debugout-val-debugerr-val-none-val", 
            "text": "", 
            "title": "fun box  _print(msg: String val, stream: (DebugOut val | DebugErr val)): None val"
        }, 
        {
            "location": "/debug-Debug/#fun-box-_streamstream-debugout-val-debugerr-val-pointer91u8-val93-ref", 
            "text": "", 
            "title": "fun box  _stream(stream: (DebugOut val | DebugErr val)): Pointer[U8 val] ref ?"
        }, 
        {
            "location": "/debug-DebugErr/", 
            "text": "primitive debug/DebugErr\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nDebugErr\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nDebugErr\n val): \nBool\n val", 
            "title": "primitive DebugErr"
        }, 
        {
            "location": "/debug-DebugErr/#primitive-debugdebugerr", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive debug/DebugErr"
        }, 
        {
            "location": "/debug-DebugErr/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/debug-DebugErr/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/debug-DebugErr/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/debug-DebugErr/#fun-box-eqthat-debugerr-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: DebugErr val): Bool val"
        }, 
        {
            "location": "/debug-DebugErr/#fun-box-nethat-debugerr-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: DebugErr val): Bool val"
        }, 
        {
            "location": "/debug-DebugOut/", 
            "text": "primitive debug/DebugOut\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nDebugOut\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nDebugOut\n val): \nBool\n val", 
            "title": "primitive DebugOut"
        }, 
        {
            "location": "/debug-DebugOut/#primitive-debugdebugout", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive debug/DebugOut"
        }, 
        {
            "location": "/debug-DebugOut/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/debug-DebugOut/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/debug-DebugOut/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/debug-DebugOut/#fun-box-eqthat-debugout-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: DebugOut val): Bool val"
        }, 
        {
            "location": "/debug-DebugOut/#fun-box-nethat-debugout-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: DebugOut val): Bool val"
        }, 
        {
            "location": "/debug-DebugStream/", 
            "text": "type debug/DebugStream is (\nDebugOut\n val | \nDebugErr\n val)\n\n\nNo doc string provided.", 
            "title": "type DebugStream"
        }, 
        {
            "location": "/debug-DebugStream/#type-debugdebugstream-is-debugout-val-debugerr-val", 
            "text": "No doc string provided.", 
            "title": "type debug/DebugStream is (DebugOut val | DebugErr val)"
        }, 
        {
            "location": "/encode-base64--index/", 
            "text": "Base64 package\n\n\nThe Base64 package contains support for doing Base64 binary-to-text encodings.\nWe currently have support 3 encodings: PEM, MIME and URL.\n\n\nTo learn more about Base64, we suggest you check out the\n\nwikipedia entry\n.\n\n\nExample code\n\n\nuse \nencode/base64\n\n\nactor Main\n  new create(env: Env) =\n\n    env.out.print(Base64.encode(\nfoobar\n))\n    try\n      env.out.print(Base64.decode[String iso](\nZm9vYmFy\n))\n    end\n\n\n\n\nEntities\n\n\n\n\nprimitive Base64\n\n\nactor Main\n\n\nclass _TestBase64Decode\n\n\nclass _TestBase64Encode\n\n\nclass _TestBase64EncodeDecode\n\n\nclass _TestBase64Quote", 
            "title": "Package"
        }, 
        {
            "location": "/encode-base64--index/#base64-package", 
            "text": "The Base64 package contains support for doing Base64 binary-to-text encodings.\nWe currently have support 3 encodings: PEM, MIME and URL.  To learn more about Base64, we suggest you check out the wikipedia entry .", 
            "title": "Base64 package"
        }, 
        {
            "location": "/encode-base64--index/#example-code", 
            "text": "use  encode/base64 \n\nactor Main\n  new create(env: Env) = \n    env.out.print(Base64.encode( foobar ))\n    try\n      env.out.print(Base64.decode[String iso]( Zm9vYmFy ))\n    end", 
            "title": "Example code"
        }, 
        {
            "location": "/encode-base64--index/#entities", 
            "text": "primitive Base64  actor Main  class _TestBase64Decode  class _TestBase64Encode  class _TestBase64EncodeDecode  class _TestBase64Quote", 
            "title": "Entities"
        }, 
        {
            "location": "/encode-base64-Base64/", 
            "text": "primitive encode/base64/Base64\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \ndecode\n[optional A: \nSeq\n[\nU8\n val] iso](data: \nReadSeq\n[\nU8\n val] box, optional at62: \nU8\n val, optional at63: \nU8\n val, optional pad: \nU8\n val): A iso^ ?\n\n\nConfigurable decoding. The defaults are for RFC 4648. Missing padding is\nnot an error. Non-base64 data, other than whitespace (which can appear at\nany time), is an error.\n\n\nfun box  \ndecode_url\n[optional A: \nSeq\n[\nU8\n val] iso](data: \nReadSeq\n[\nU8\n val] box): A iso^ ?\n\n\nDecode for URLs (RFC 4648).\n\n\nfun box  \nencode\n[optional A: \nSeq\n[\nU8\n val] iso](data: \nReadSeq\n[\nU8\n val] box, optional at62: \nU8\n val, optional at63: \nU8\n val, optional pad: \nU8\n val, optional linelen: \nUSize\n val, optional linesep: \nString\n val): A iso^\n\n\nConfigurable encoding. The defaults are for RFC 4648.\n\n\nfun box  \nencode_mime\n(data: \nReadSeq\n[\nU8\n val] box): \nString\n iso^\n\n\nEncode for MIME (RFC 2045).\n\n\nfun box  \nencode_pem\n(data: \nReadSeq\n[\nU8\n val] box): \nString\n iso^\n\n\nEncode for PEM (RFC 1421).\n\n\nfun box  \nencode_url\n[optional A: \nSeq\n[\nU8\n val] iso](data: \nReadSeq\n[\nU8\n val] box, optional pad: \nBool\n val): A iso^\n\n\nEncode for URLs (RFC 4648). Padding characters are stripped by default.\n\n\nfun box  \neq\n(that: \nBase64\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nBase64\n val): \nBool\n val\n\n\nPrivate Functions\n\n\nfun box  \nenc\nbyte\n(i: \nU8\n val, at62: \nU8\n val, at63: \nU8\n val): \nU8\n val ?\n\n\nEncode a single byte.", 
            "title": "primitive Base64"
        }, 
        {
            "location": "/encode-base64-Base64/#primitive-encodebase64base64", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive encode/base64/Base64"
        }, 
        {
            "location": "/encode-base64-Base64/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/encode-base64-Base64/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/encode-base64-Base64/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/encode-base64-Base64/#fun-box-decode91optional-a-seq91u8-val93-iso93data-readseq91u8-val93-box-optional-at62-u8-val-optional-at63-u8-val-optional-pad-u8-val-a-iso", 
            "text": "Configurable decoding. The defaults are for RFC 4648. Missing padding is\nnot an error. Non-base64 data, other than whitespace (which can appear at\nany time), is an error.", 
            "title": "fun box  decode[optional A: Seq[U8 val] iso](data: ReadSeq[U8 val] box, optional at62: U8 val, optional at63: U8 val, optional pad: U8 val): A iso^ ?"
        }, 
        {
            "location": "/encode-base64-Base64/#fun-box-decode_url91optional-a-seq91u8-val93-iso93data-readseq91u8-val93-box-a-iso", 
            "text": "Decode for URLs (RFC 4648).", 
            "title": "fun box  decode_url[optional A: Seq[U8 val] iso](data: ReadSeq[U8 val] box): A iso^ ?"
        }, 
        {
            "location": "/encode-base64-Base64/#fun-box-encode91optional-a-seq91u8-val93-iso93data-readseq91u8-val93-box-optional-at62-u8-val-optional-at63-u8-val-optional-pad-u8-val-optional-linelen-usize-val-optional-linesep-string-val-a-iso", 
            "text": "Configurable encoding. The defaults are for RFC 4648.", 
            "title": "fun box  encode[optional A: Seq[U8 val] iso](data: ReadSeq[U8 val] box, optional at62: U8 val, optional at63: U8 val, optional pad: U8 val, optional linelen: USize val, optional linesep: String val): A iso^"
        }, 
        {
            "location": "/encode-base64-Base64/#fun-box-encode_mimedata-readseq91u8-val93-box-string-iso", 
            "text": "Encode for MIME (RFC 2045).", 
            "title": "fun box  encode_mime(data: ReadSeq[U8 val] box): String iso^"
        }, 
        {
            "location": "/encode-base64-Base64/#fun-box-encode_pemdata-readseq91u8-val93-box-string-iso", 
            "text": "Encode for PEM (RFC 1421).", 
            "title": "fun box  encode_pem(data: ReadSeq[U8 val] box): String iso^"
        }, 
        {
            "location": "/encode-base64-Base64/#fun-box-encode_url91optional-a-seq91u8-val93-iso93data-readseq91u8-val93-box-optional-pad-bool-val-a-iso", 
            "text": "Encode for URLs (RFC 4648). Padding characters are stripped by default.", 
            "title": "fun box  encode_url[optional A: Seq[U8 val] iso](data: ReadSeq[U8 val] box, optional pad: Bool val): A iso^"
        }, 
        {
            "location": "/encode-base64-Base64/#fun-box-eqthat-base64-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Base64 val): Bool val"
        }, 
        {
            "location": "/encode-base64-Base64/#fun-box-nethat-base64-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Base64 val): Bool val"
        }, 
        {
            "location": "/encode-base64-Base64/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/encode-base64-Base64/#fun-box-encbytei-u8-val-at62-u8-val-at63-u8-val-u8-val", 
            "text": "Encode a single byte.", 
            "title": "fun box  encbyte(i: U8 val, at62: U8 val, at63: U8 val): U8 val ?"
        }, 
        {
            "location": "/encode-base64-Main/", 
            "text": "actor encode/base64/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/encode-base64-Main/#actor-encodebase64main-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor encode/base64/Main is TestList ref"
        }, 
        {
            "location": "/encode-base64-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/encode-base64-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/encode-base64-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/encode-base64-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/encode-base64-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Decode/", 
            "text": "class encode/base64/_TestBase64Decode is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest base64 decoding. Examples with and without padding are tested.\nUsing test examples from RFC 4648.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestBase64Decode"
        }, 
        {
            "location": "/encode-base64-_TestBase64Decode/#class-encodebase64_testbase64decode-is-unittest-ref", 
            "text": "Default capability :  iso  Test base64 decoding. Examples with and without padding are tested.\nUsing test examples from RFC 4648.", 
            "title": "class encode/base64/_TestBase64Decode is UnitTest ref"
        }, 
        {
            "location": "/encode-base64-_TestBase64Decode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/encode-base64-_TestBase64Decode/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/encode-base64-_TestBase64Decode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/encode-base64-_TestBase64Decode/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/encode-base64-_TestBase64Decode/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Decode/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Decode/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Decode/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Encode/", 
            "text": "class encode/base64/_TestBase64Encode is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest base64 encoding.\nUsing test examples from RFC 4648.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestBase64Encode"
        }, 
        {
            "location": "/encode-base64-_TestBase64Encode/#class-encodebase64_testbase64encode-is-unittest-ref", 
            "text": "Default capability :  iso  Test base64 encoding.\nUsing test examples from RFC 4648.", 
            "title": "class encode/base64/_TestBase64Encode is UnitTest ref"
        }, 
        {
            "location": "/encode-base64-_TestBase64Encode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/encode-base64-_TestBase64Encode/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/encode-base64-_TestBase64Encode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/encode-base64-_TestBase64Encode/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Encode/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Encode/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Encode/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Encode/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/", 
            "text": "class encode/base64/_TestBase64EncodeDecode is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest base64 encoding.\nCheck encoding then decoding gives back original.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestBase64EncodeDecode"
        }, 
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#class-encodebase64_testbase64encodedecode-is-unittest-ref", 
            "text": "Default capability :  iso  Test base64 encoding.\nCheck encoding then decoding gives back original.", 
            "title": "class encode/base64/_TestBase64EncodeDecode is UnitTest ref"
        }, 
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Quote/", 
            "text": "class encode/base64/_TestBase64Quote is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest base64 encoding.\nCheck encoding then decoding something a bit longer.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestBase64Quote"
        }, 
        {
            "location": "/encode-base64-_TestBase64Quote/#class-encodebase64_testbase64quote-is-unittest-ref", 
            "text": "Default capability :  iso  Test base64 encoding.\nCheck encoding then decoding something a bit longer.", 
            "title": "class encode/base64/_TestBase64Quote is UnitTest ref"
        }, 
        {
            "location": "/encode-base64-_TestBase64Quote/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/encode-base64-_TestBase64Quote/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/encode-base64-_TestBase64Quote/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/encode-base64-_TestBase64Quote/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/encode-base64-_TestBase64Quote/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Quote/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Quote/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/encode-base64-_TestBase64Quote/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/files--index/", 
            "text": "No package doc string provided for files.\n\n\nEntities\n\n\n\n\nprimitive CreateFile\n\n\nclass Directory\n\n\nprimitive _DirectoryEntry\n\n\nprimitive _DirectoryHandle\n\n\nclass File\n\n\ntype FileCaps\n\n\nprimitive FileChmod\n\n\nprimitive FileChown\n\n\nprimitive FileCreate\n\n\nprimitive _FileDes\n\n\ntype FileErrNo\n\n\nprimitive FileError\n\n\nprimitive _FileHandle\n\n\nprimitive _FileHelper\n\n\nclass FileInfo\n\n\nclass FileLines\n\n\nprimitive FileLink\n\n\nprimitive FileLookup\n\n\nprimitive FileMkdir\n\n\nclass FileMode\n\n\nprimitive FileOK\n\n\nclass FilePath\n\n\nprimitive FileRead\n\n\nprimitive FileRemove\n\n\nprimitive FileRename\n\n\nprimitive FileSeek\n\n\nprimitive FileStat\n\n\nactor FileStream\n\n\nprimitive FileSync\n\n\nprimitive FileTime\n\n\nprimitive FileTruncate\n\n\nprimitive FileWrite\n\n\nactor Main\n\n\nprimitive OpenFile\n\n\nprimitive Path\n\n\nprimitive _PathDot\n\n\nprimitive _PathDot2\n\n\nprimitive _PathOther\n\n\nprimitive _PathSep\n\n\ntype _PathState\n\n\nclass _TestDirectoryOpen\n\n\nclass _TestMkdtemp\n\n\nclass _TestWalk\n\n\ninterface WalkHandler", 
            "title": "Package"
        }, 
        {
            "location": "/files--index/#entities", 
            "text": "primitive CreateFile  class Directory  primitive _DirectoryEntry  primitive _DirectoryHandle  class File  type FileCaps  primitive FileChmod  primitive FileChown  primitive FileCreate  primitive _FileDes  type FileErrNo  primitive FileError  primitive _FileHandle  primitive _FileHelper  class FileInfo  class FileLines  primitive FileLink  primitive FileLookup  primitive FileMkdir  class FileMode  primitive FileOK  class FilePath  primitive FileRead  primitive FileRemove  primitive FileRename  primitive FileSeek  primitive FileStat  actor FileStream  primitive FileSync  primitive FileTime  primitive FileTruncate  primitive FileWrite  actor Main  primitive OpenFile  primitive Path  primitive _PathDot  primitive _PathDot2  primitive _PathOther  primitive _PathSep  type _PathState  class _TestDirectoryOpen  class _TestMkdtemp  class _TestWalk  interface WalkHandler", 
            "title": "Entities"
        }, 
        {
            "location": "/files-CreateFile/", 
            "text": "primitive files/CreateFile\n\n\nDefault capability\n: \nval\n\n\nOpen a File for read/write, creating if it doesn't exist, preserving the\ncontents if it does exist.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(from: \nFilePath\n val): (\nFile\n ref | (\nFileOK\n val | \nFileError\n val))\n\n\nfun box  \neq\n(that: \nCreateFile\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nCreateFile\n val): \nBool\n val", 
            "title": "primitive CreateFile"
        }, 
        {
            "location": "/files-CreateFile/#primitive-filescreatefile", 
            "text": "Default capability :  val  Open a File for read/write, creating if it doesn't exist, preserving the\ncontents if it does exist.", 
            "title": "primitive files/CreateFile"
        }, 
        {
            "location": "/files-CreateFile/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-CreateFile/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-CreateFile/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-CreateFile/#fun-box-applyfrom-filepath-val-file-ref-fileok-val-fileerror-val", 
            "text": "", 
            "title": "fun box  apply(from: FilePath val): (File ref | (FileOK val | FileError val))"
        }, 
        {
            "location": "/files-CreateFile/#fun-box-eqthat-createfile-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: CreateFile val): Bool val"
        }, 
        {
            "location": "/files-CreateFile/#fun-box-nethat-createfile-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: CreateFile val): Bool val"
        }, 
        {
            "location": "/files-Directory/", 
            "text": "class files/Directory\n\n\nDefault capability\n: \nref\n\n\nOperations on a directory.\n\n\nThe directory-relative functions (open, etc) use the *at interface on FreeBSD\nand Linux. This isn't available on OS X prior to 10.10, so it is not used. On\nFreeBSD, this allows the directory-relative functions to take advantage of\nCapsicum.\n\n\nPublic fields\n\n\n\n\nlet path: \nFilePath\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(from: \nFilePath\n val) ?\n\n\nnew \n_relative\n(path': \nFilePath\n val, fd': \nI32\n val)\n\n\nPublic Functions\n\n\nfun box  \nchmod\n(mode: \nFileMode\n box): \nBool\n val\n\n\nSet the FileMode for this directory.\n\n\nfun box  \nchmodat\n(target: \nString\n val, mode: \nFileMode\n box): \nBool\n val\n\n\nSet the FileMode for some path relative to this directory.\n\n\nfun box  \nchown\n(uid: \nU32\n val, gid: \nU32\n val): \nBool\n val\n\n\nSet the owner and group for this directory. Does nothing on Windows.\n\n\nfun box  \nchownat\n(target: \nString\n val, uid: \nU32\n val, gid: \nU32\n val): \nBool\n val\n\n\nSet the FileMode for some path relative to this directory.\n\n\nfun box  \ncreate_file\n(target: \nString\n val): \nFile\n iso^ ?\n\n\nOpen for read/write, creating if it doesn't exist, preserving the contents\nif it does exist.\n\n\nfun ref  \ndispose\n(): \nNone\n val\n\n\nClose the directory.\n\n\nfun box  \nentries\n(): \nArray\n[\nString\n val] iso^ ?\n\n\nThe entries will include everything in the directory, but it is not\nrecursive. The path for the entry will be relative to the directory, so it\nwill contain no directory separators. The entries will not include \".\" or\n\"..\".\n\n\nfun box  \ninfo\n(): \nFileInfo\n val ?\n\n\nReturn a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.\n\n\nfun box  \ninfoat\n(target: \nString\n val): \nFileInfo\n val ?\n\n\nReturn a FileInfo for some path relative to this directory.\n\n\nfun box  \nmkdir\n(target: \nString\n val): \nBool\n val\n\n\nCreates a directory relative to this one. Returns false if the path is\nnot within this directory hierarchy or if FileMkdir permission is missing.\n\n\nfun box  \nopen\n(target: \nString\n val): \nDirectory\n iso^ ?\n\n\nOpen a directory relative to this one. Raises an error if the path is not\nwithin this directory hierarchy.\n\n\nfun box  \nopen_file\n(target: \nString\n val): \nFile\n iso^ ?\n\n\nOpen for read only, failing if it doesn't exist.\n\n\nfun box  \nremove\n(target: \nString\n val): \nBool\n val\n\n\nRemove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.\n\n\nfun box  \nrename\n(source: \nString\n val, to: \nDirectory\n box, target: \nString\n val): \nBool\n val\n\n\nRename source (which is relative to this directory) to target (which is\nrelative to the \nto\n directory).\n\n\nfun box  \nset_time\n(atime: (\nI64\n val , \nI64\n val), mtime: (\nI64\n val , \nI64\n val)): \nBool\n val\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun box  \nset_time_at\n(target: \nString\n val, atime: (\nI64\n val , \nI64\n val), mtime: (\nI64\n val , \nI64\n val)): \nBool\n val\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun box  \nsymlink\n(source: \nFilePath\n val, link_name: \nString\n val): \nBool\n val\n\n\nLink the source path to the link_name, where the link_name is relative to\nthis directory.\n\n\nfun box  \ntouch\n(): \nBool\n val\n\n\nSet the last access and modification times of the directory to now.\n\n\nfun box  \ntouchat\n(target: \nString\n val): \nBool\n val\n\n\nSet the last access and modification times of the directory to now.\n\n\nPrivate Functions\n\n\nfun box  \n_final\n(): \nNone\n val\n\n\nClose the file descriptor.", 
            "title": "class Directory"
        }, 
        {
            "location": "/files-Directory/#class-filesdirectory", 
            "text": "Default capability :  ref  Operations on a directory.  The directory-relative functions (open, etc) use the *at interface on FreeBSD\nand Linux. This isn't available on OS X prior to 10.10, so it is not used. On\nFreeBSD, this allows the directory-relative functions to take advantage of\nCapsicum.", 
            "title": "class files/Directory"
        }, 
        {
            "location": "/files-Directory/#public-fields", 
            "text": "let path:  FilePath  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/files-Directory/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-Directory/#new-createfrom-filepath-val", 
            "text": "", 
            "title": "new create(from: FilePath val) ?"
        }, 
        {
            "location": "/files-Directory/#new-_relativepath-filepath-val-fd-i32-val", 
            "text": "", 
            "title": "new _relative(path': FilePath val, fd': I32 val)"
        }, 
        {
            "location": "/files-Directory/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-Directory/#fun-box-chmodmode-filemode-box-bool-val", 
            "text": "Set the FileMode for this directory.", 
            "title": "fun box  chmod(mode: FileMode box): Bool val"
        }, 
        {
            "location": "/files-Directory/#fun-box-chmodattarget-string-val-mode-filemode-box-bool-val", 
            "text": "Set the FileMode for some path relative to this directory.", 
            "title": "fun box  chmodat(target: String val, mode: FileMode box): Bool val"
        }, 
        {
            "location": "/files-Directory/#fun-box-chownuid-u32-val-gid-u32-val-bool-val", 
            "text": "Set the owner and group for this directory. Does nothing on Windows.", 
            "title": "fun box  chown(uid: U32 val, gid: U32 val): Bool val"
        }, 
        {
            "location": "/files-Directory/#fun-box-chownattarget-string-val-uid-u32-val-gid-u32-val-bool-val", 
            "text": "Set the FileMode for some path relative to this directory.", 
            "title": "fun box  chownat(target: String val, uid: U32 val, gid: U32 val): Bool val"
        }, 
        {
            "location": "/files-Directory/#fun-box-create_filetarget-string-val-file-iso", 
            "text": "Open for read/write, creating if it doesn't exist, preserving the contents\nif it does exist.", 
            "title": "fun box  create_file(target: String val): File iso^ ?"
        }, 
        {
            "location": "/files-Directory/#fun-ref-dispose-none-val", 
            "text": "Close the directory.", 
            "title": "fun ref  dispose(): None val"
        }, 
        {
            "location": "/files-Directory/#fun-box-entries-array91string-val93-iso", 
            "text": "The entries will include everything in the directory, but it is not\nrecursive. The path for the entry will be relative to the directory, so it\nwill contain no directory separators. The entries will not include \".\" or\n\"..\".", 
            "title": "fun box  entries(): Array[String val] iso^ ?"
        }, 
        {
            "location": "/files-Directory/#fun-box-info-fileinfo-val", 
            "text": "Return a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.", 
            "title": "fun box  info(): FileInfo val ?"
        }, 
        {
            "location": "/files-Directory/#fun-box-infoattarget-string-val-fileinfo-val", 
            "text": "Return a FileInfo for some path relative to this directory.", 
            "title": "fun box  infoat(target: String val): FileInfo val ?"
        }, 
        {
            "location": "/files-Directory/#fun-box-mkdirtarget-string-val-bool-val", 
            "text": "Creates a directory relative to this one. Returns false if the path is\nnot within this directory hierarchy or if FileMkdir permission is missing.", 
            "title": "fun box  mkdir(target: String val): Bool val"
        }, 
        {
            "location": "/files-Directory/#fun-box-opentarget-string-val-directory-iso", 
            "text": "Open a directory relative to this one. Raises an error if the path is not\nwithin this directory hierarchy.", 
            "title": "fun box  open(target: String val): Directory iso^ ?"
        }, 
        {
            "location": "/files-Directory/#fun-box-open_filetarget-string-val-file-iso", 
            "text": "Open for read only, failing if it doesn't exist.", 
            "title": "fun box  open_file(target: String val): File iso^ ?"
        }, 
        {
            "location": "/files-Directory/#fun-box-removetarget-string-val-bool-val", 
            "text": "Remove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.", 
            "title": "fun box  remove(target: String val): Bool val"
        }, 
        {
            "location": "/files-Directory/#fun-box-renamesource-string-val-to-directory-box-target-string-val-bool-val", 
            "text": "Rename source (which is relative to this directory) to target (which is\nrelative to the  to  directory).", 
            "title": "fun box  rename(source: String val, to: Directory box, target: String val): Bool val"
        }, 
        {
            "location": "/files-Directory/#fun-box-set_timeatime-i64-val-i64-val-mtime-i64-val-i64-val-bool-val", 
            "text": "Set the last access and modification times of the directory to the given\nvalues.", 
            "title": "fun box  set_time(atime: (I64 val , I64 val), mtime: (I64 val , I64 val)): Bool val"
        }, 
        {
            "location": "/files-Directory/#fun-box-set_time_attarget-string-val-atime-i64-val-i64-val-mtime-i64-val-i64-val-bool-val", 
            "text": "Set the last access and modification times of the directory to the given\nvalues.", 
            "title": "fun box  set_time_at(target: String val, atime: (I64 val , I64 val), mtime: (I64 val , I64 val)): Bool val"
        }, 
        {
            "location": "/files-Directory/#fun-box-symlinksource-filepath-val-link_name-string-val-bool-val", 
            "text": "Link the source path to the link_name, where the link_name is relative to\nthis directory.", 
            "title": "fun box  symlink(source: FilePath val, link_name: String val): Bool val"
        }, 
        {
            "location": "/files-Directory/#fun-box-touch-bool-val", 
            "text": "Set the last access and modification times of the directory to now.", 
            "title": "fun box  touch(): Bool val"
        }, 
        {
            "location": "/files-Directory/#fun-box-touchattarget-string-val-bool-val", 
            "text": "Set the last access and modification times of the directory to now.", 
            "title": "fun box  touchat(target: String val): Bool val"
        }, 
        {
            "location": "/files-Directory/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/files-Directory/#fun-box-_final-none-val", 
            "text": "Close the file descriptor.", 
            "title": "fun box  _final(): None val"
        }, 
        {
            "location": "/files-_DirectoryEntry/", 
            "text": "primitive files/_DirectoryEntry\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_DirectoryEntry\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_DirectoryEntry\n val): \nBool\n val", 
            "title": "primitive _DirectoryEntry"
        }, 
        {
            "location": "/files-_DirectoryEntry/#primitive-files_directoryentry", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/_DirectoryEntry"
        }, 
        {
            "location": "/files-_DirectoryEntry/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_DirectoryEntry/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_DirectoryEntry/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_DirectoryEntry/#fun-box-eqthat-_directoryentry-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _DirectoryEntry val): Bool val"
        }, 
        {
            "location": "/files-_DirectoryEntry/#fun-box-nethat-_directoryentry-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _DirectoryEntry val): Bool val"
        }, 
        {
            "location": "/files-_DirectoryHandle/", 
            "text": "primitive files/_DirectoryHandle\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_DirectoryHandle\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_DirectoryHandle\n val): \nBool\n val", 
            "title": "primitive _DirectoryHandle"
        }, 
        {
            "location": "/files-_DirectoryHandle/#primitive-files_directoryhandle", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/_DirectoryHandle"
        }, 
        {
            "location": "/files-_DirectoryHandle/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_DirectoryHandle/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_DirectoryHandle/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_DirectoryHandle/#fun-box-eqthat-_directoryhandle-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _DirectoryHandle val): Bool val"
        }, 
        {
            "location": "/files-_DirectoryHandle/#fun-box-nethat-_directoryhandle-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _DirectoryHandle val): Bool val"
        }, 
        {
            "location": "/files-File/", 
            "text": "class files/File\n\n\nDefault capability\n: \nref\n\n\nOperations on a file.\n\n\nPublic fields\n\n\n\n\nlet path: \nFilePath\n val\n\n\nlet writeable: \nBool\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(from: \nFilePath\n val)\n\n\nnew \n_descriptor\n(fd: \nI32\n val, from: \nFilePath\n val) ?\n\n\nnew \nopen\n(from: \nFilePath\n val)\n\n\nPublic Functions\n\n\nfun box  \nchmod\n(mode: \nFileMode\n box): \nBool\n val\n\n\nSet the FileMode for this directory.\n\n\nfun box  \nchown\n(uid: \nU32\n val, gid: \nU32\n val): \nBool\n val\n\n\nSet the owner and group for this directory. Does nothing on Windows.\n\n\nfun ref  \ndispose\n(): \nNone\n val\n\n\nClose the file. Future operations will do nothing.\n\n\nfun box  \nerrno\n(): (\nFileOK\n val | \nFileError\n val)\n\n\nReturns the last error code set for this File\n\n\nfun ref  \nflush\n(): \nFile\n ref\n\n\nFlush the file.\n\n\nfun box  \nget_fd\n(): \nI32\n val ?\n\n\nReturns the underlying file descriptor.\nRaises an error if the file is not currently open.\n\n\nfun box  \ninfo\n(): \nFileInfo\n val ?\n\n\nReturn a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.\n\n\nfun ref  \nline\n(): \nString\n iso^ ?\n\n\nReturns a line as a String. The newline is not included in the string. If\nthere is no more data, this raises an error.\n\n\nfun ref  \nlines\n(): \nFileLines\n ref\n\n\nReturns an iterator for reading lines from the file.\n\n\nfun box  \nposition\n(): \nUSize\n val\n\n\nReturn the current cursor position in the file.\n\n\nfun ref  \nprint\n(data: (\nString\n box | \nArray\n[\nU8\n val] box)): \nBool\n val\n\n\nSame as write, buts adds a newline.\n\n\nfun ref  \nprintv\n(data: \nByteSeqIter\n box): \nBool\n val\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nfun ref  \nread\n(len: \nUSize\n val): \nArray\n[\nU8\n val] iso^\n\n\nReturns up to len bytes.\n\n\nfun ref  \nread_string\n(len: \nUSize\n val): \nString\n iso^\n\n\nReturns up to len bytes. The resulting string may have internal null\ncharacters.\n\n\nfun ref  \nseek\n(offset: \nISize\n val): \nFile\n ref\n\n\nMove the cursor position.\n\n\nfun ref  \nseek_end\n(offset: \nUSize\n val): \nFile\n ref\n\n\nSet the cursor position relative to the end of the file.\n\n\nfun ref  \nseek_start\n(offset: \nUSize\n val): \nFile\n ref\n\n\nSet the cursor position relative to the start of the file.\n\n\nfun ref  \nset_length\n(len: \nUSize\n val): \nBool\n val\n\n\nChange the file size. If it is made larger, the new contents are undefined.\n\n\nfun box  \nset_time\n(atime: (\nI64\n val , \nI64\n val), mtime: (\nI64\n val , \nI64\n val)): \nBool\n val\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun ref  \nsize\n(): \nUSize\n val\n\n\nReturn the total length of the file.\n\n\nfun ref  \nsync\n(): \nFile\n ref\n\n\nSync the file contents to physical storage.\n\n\nfun box  \ntouch\n(): \nBool\n val\n\n\nSet the last access and modification times of the directory to now.\n\n\nfun box  \nvalid\n(): \nBool\n val\n\n\nReturns true if the file is currently open.\n\n\nfun ref  \nwrite\n(data: (\nString\n box | \nArray\n[\nU8\n val] box)): \nBool\n val\n\n\nReturns false if the file wasn't opened with write permission.\nReturns false and closes the file if not all the bytes were written.\n\n\nfun ref  \nwritev\n(data: \nByteSeqIter\n box): \nBool\n val\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nPrivate Functions\n\n\nfun box  \n_final\n(): \nNone\n val\n\n\nClose the file.\n\n\nfun tag  \nget\nfd\n(handle: \nPointer\n[\n_FileHandle\n val] ref): \nI32\n val\n\n\nGet the file descriptor associated with the file handle.\n\n\nfun ref  \n_seek\n(offset: \nISize\n val, base: \nI32\n val): \nNone\n val\n\n\nMove the cursor position.", 
            "title": "class File"
        }, 
        {
            "location": "/files-File/#class-filesfile", 
            "text": "Default capability :  ref  Operations on a file.", 
            "title": "class files/File"
        }, 
        {
            "location": "/files-File/#public-fields", 
            "text": "let path:  FilePath  val  let writeable:  Bool  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/files-File/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-File/#new-createfrom-filepath-val", 
            "text": "", 
            "title": "new create(from: FilePath val)"
        }, 
        {
            "location": "/files-File/#new-_descriptorfd-i32-val-from-filepath-val", 
            "text": "", 
            "title": "new _descriptor(fd: I32 val, from: FilePath val) ?"
        }, 
        {
            "location": "/files-File/#new-openfrom-filepath-val", 
            "text": "", 
            "title": "new open(from: FilePath val)"
        }, 
        {
            "location": "/files-File/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-File/#fun-box-chmodmode-filemode-box-bool-val", 
            "text": "Set the FileMode for this directory.", 
            "title": "fun box  chmod(mode: FileMode box): Bool val"
        }, 
        {
            "location": "/files-File/#fun-box-chownuid-u32-val-gid-u32-val-bool-val", 
            "text": "Set the owner and group for this directory. Does nothing on Windows.", 
            "title": "fun box  chown(uid: U32 val, gid: U32 val): Bool val"
        }, 
        {
            "location": "/files-File/#fun-ref-dispose-none-val", 
            "text": "Close the file. Future operations will do nothing.", 
            "title": "fun ref  dispose(): None val"
        }, 
        {
            "location": "/files-File/#fun-box-errno-fileok-val-fileerror-val", 
            "text": "Returns the last error code set for this File", 
            "title": "fun box  errno(): (FileOK val | FileError val)"
        }, 
        {
            "location": "/files-File/#fun-ref-flush-file-ref", 
            "text": "Flush the file.", 
            "title": "fun ref  flush(): File ref"
        }, 
        {
            "location": "/files-File/#fun-box-get_fd-i32-val", 
            "text": "Returns the underlying file descriptor.\nRaises an error if the file is not currently open.", 
            "title": "fun box  get_fd(): I32 val ?"
        }, 
        {
            "location": "/files-File/#fun-box-info-fileinfo-val", 
            "text": "Return a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.", 
            "title": "fun box  info(): FileInfo val ?"
        }, 
        {
            "location": "/files-File/#fun-ref-line-string-iso", 
            "text": "Returns a line as a String. The newline is not included in the string. If\nthere is no more data, this raises an error.", 
            "title": "fun ref  line(): String iso^ ?"
        }, 
        {
            "location": "/files-File/#fun-ref-lines-filelines-ref", 
            "text": "Returns an iterator for reading lines from the file.", 
            "title": "fun ref  lines(): FileLines ref"
        }, 
        {
            "location": "/files-File/#fun-box-position-usize-val", 
            "text": "Return the current cursor position in the file.", 
            "title": "fun box  position(): USize val"
        }, 
        {
            "location": "/files-File/#fun-ref-printdata-string-box-array91u8-val93-box-bool-val", 
            "text": "Same as write, buts adds a newline.", 
            "title": "fun ref  print(data: (String box | Array[U8 val] box)): Bool val"
        }, 
        {
            "location": "/files-File/#fun-ref-printvdata-byteseqiter-box-bool-val", 
            "text": "Print an iterable collection of ByteSeqs.", 
            "title": "fun ref  printv(data: ByteSeqIter box): Bool val"
        }, 
        {
            "location": "/files-File/#fun-ref-readlen-usize-val-array91u8-val93-iso", 
            "text": "Returns up to len bytes.", 
            "title": "fun ref  read(len: USize val): Array[U8 val] iso^"
        }, 
        {
            "location": "/files-File/#fun-ref-read_stringlen-usize-val-string-iso", 
            "text": "Returns up to len bytes. The resulting string may have internal null\ncharacters.", 
            "title": "fun ref  read_string(len: USize val): String iso^"
        }, 
        {
            "location": "/files-File/#fun-ref-seekoffset-isize-val-file-ref", 
            "text": "Move the cursor position.", 
            "title": "fun ref  seek(offset: ISize val): File ref"
        }, 
        {
            "location": "/files-File/#fun-ref-seek_endoffset-usize-val-file-ref", 
            "text": "Set the cursor position relative to the end of the file.", 
            "title": "fun ref  seek_end(offset: USize val): File ref"
        }, 
        {
            "location": "/files-File/#fun-ref-seek_startoffset-usize-val-file-ref", 
            "text": "Set the cursor position relative to the start of the file.", 
            "title": "fun ref  seek_start(offset: USize val): File ref"
        }, 
        {
            "location": "/files-File/#fun-ref-set_lengthlen-usize-val-bool-val", 
            "text": "Change the file size. If it is made larger, the new contents are undefined.", 
            "title": "fun ref  set_length(len: USize val): Bool val"
        }, 
        {
            "location": "/files-File/#fun-box-set_timeatime-i64-val-i64-val-mtime-i64-val-i64-val-bool-val", 
            "text": "Set the last access and modification times of the directory to the given\nvalues.", 
            "title": "fun box  set_time(atime: (I64 val , I64 val), mtime: (I64 val , I64 val)): Bool val"
        }, 
        {
            "location": "/files-File/#fun-ref-size-usize-val", 
            "text": "Return the total length of the file.", 
            "title": "fun ref  size(): USize val"
        }, 
        {
            "location": "/files-File/#fun-ref-sync-file-ref", 
            "text": "Sync the file contents to physical storage.", 
            "title": "fun ref  sync(): File ref"
        }, 
        {
            "location": "/files-File/#fun-box-touch-bool-val", 
            "text": "Set the last access and modification times of the directory to now.", 
            "title": "fun box  touch(): Bool val"
        }, 
        {
            "location": "/files-File/#fun-box-valid-bool-val", 
            "text": "Returns true if the file is currently open.", 
            "title": "fun box  valid(): Bool val"
        }, 
        {
            "location": "/files-File/#fun-ref-writedata-string-box-array91u8-val93-box-bool-val", 
            "text": "Returns false if the file wasn't opened with write permission.\nReturns false and closes the file if not all the bytes were written.", 
            "title": "fun ref  write(data: (String box | Array[U8 val] box)): Bool val"
        }, 
        {
            "location": "/files-File/#fun-ref-writevdata-byteseqiter-box-bool-val", 
            "text": "Write an iterable collection of ByteSeqs.", 
            "title": "fun ref  writev(data: ByteSeqIter box): Bool val"
        }, 
        {
            "location": "/files-File/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/files-File/#fun-box-_final-none-val", 
            "text": "Close the file.", 
            "title": "fun box  _final(): None val"
        }, 
        {
            "location": "/files-File/#fun-tag-getfdhandle-pointer91_filehandle-val93-ref-i32-val", 
            "text": "Get the file descriptor associated with the file handle.", 
            "title": "fun tag  getfd(handle: Pointer[_FileHandle val] ref): I32 val"
        }, 
        {
            "location": "/files-File/#fun-ref-_seekoffset-isize-val-base-i32-val-none-val", 
            "text": "Move the cursor position.", 
            "title": "fun ref  _seek(offset: ISize val, base: I32 val): None val"
        }, 
        {
            "location": "/files-FileCaps/", 
            "text": "type files/FileCaps is \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] ref\n\n\nNo doc string provided.", 
            "title": "type FileCaps"
        }, 
        {
            "location": "/files-FileCaps/#type-filesfilecaps-is-flags91filecreate-val-filechmod-val-filechown-val-filelink-val-filelookup-val-filemkdir-val-fileread-val-fileremove-val-filerename-val-fileseek-val-filestat-val-filesync-val-filetime-val-filetruncate-val-filewrite-val-u32-val93-ref", 
            "text": "No doc string provided.", 
            "title": "type files/FileCaps is Flags[((((((((((((((FileCreate val | FileChmod val) | FileChown val) | FileLink val) | FileLookup val) | FileMkdir val) | FileRead val) | FileRemove val) | FileRename val) | FileSeek val) | FileStat val) | FileSync val) | FileTime val) | FileTruncate val) | FileWrite val), U32 val] ref"
        }, 
        {
            "location": "/files-FileChmod/", 
            "text": "primitive files/FileChmod\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileChmod\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileChmod\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileChmod"
        }, 
        {
            "location": "/files-FileChmod/#primitive-filesfilechmod", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileChmod"
        }, 
        {
            "location": "/files-FileChmod/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileChmod/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileChmod/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileChmod/#fun-box-eqthat-filechmod-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileChmod val): Bool val"
        }, 
        {
            "location": "/files-FileChmod/#fun-box-nethat-filechmod-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileChmod val): Bool val"
        }, 
        {
            "location": "/files-FileChmod/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileChown/", 
            "text": "primitive files/FileChown\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileChown\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileChown\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileChown"
        }, 
        {
            "location": "/files-FileChown/#primitive-filesfilechown", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileChown"
        }, 
        {
            "location": "/files-FileChown/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileChown/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileChown/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileChown/#fun-box-eqthat-filechown-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileChown val): Bool val"
        }, 
        {
            "location": "/files-FileChown/#fun-box-nethat-filechown-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileChown val): Bool val"
        }, 
        {
            "location": "/files-FileChown/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileCreate/", 
            "text": "primitive files/FileCreate\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileCreate\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileCreate\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileCreate"
        }, 
        {
            "location": "/files-FileCreate/#primitive-filesfilecreate", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileCreate"
        }, 
        {
            "location": "/files-FileCreate/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileCreate/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileCreate/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileCreate/#fun-box-eqthat-filecreate-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileCreate val): Bool val"
        }, 
        {
            "location": "/files-FileCreate/#fun-box-nethat-filecreate-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileCreate val): Bool val"
        }, 
        {
            "location": "/files-FileCreate/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-_FileDes/", 
            "text": "primitive files/_FileDes\n\n\nDefault capability\n: \nval\n\n\nConvenience operations on file descriptors.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \nchmod\n(fd: \nI32\n val, path: \nFilePath\n val, mode: \nFileMode\n box): \nBool\n val\n\n\nSet the FileMode for this fd.\n\n\nfun box  \nchown\n(fd: \nI32\n val, path: \nFilePath\n val, uid: \nU32\n val, gid: \nU32\n val): \nBool\n val\n\n\nSet the owner and group for this file. Does nothing on Windows.\n\n\nfun box  \neq\n(that: \n_FileDes\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_FileDes\n val): \nBool\n val\n\n\nfun box  \nset_rights\n(fd: \nI32\n val, path: \nFilePath\n val, optional writeable: \nBool\n val): \nNone\n val ?\n\n\nSet the Capsicum rights on the file descriptor.\n\n\nfun box  \nset_time\n(fd: \nI32\n val, path: \nFilePath\n val, atime: (\nI64\n val , \nI64\n val), mtime: (\nI64\n val , \nI64\n val)): \nBool\n val\n\n\nSet the last access and modification times of the file to the given values.\n\n\nfun box  \ntouch\n(fd: \nI32\n val, path: \nFilePath\n val): \nBool\n val\n\n\nSet the last access and modification times of the file to now.", 
            "title": "primitive _FileDes"
        }, 
        {
            "location": "/files-_FileDes/#primitive-files_filedes", 
            "text": "Default capability :  val  Convenience operations on file descriptors.", 
            "title": "primitive files/_FileDes"
        }, 
        {
            "location": "/files-_FileDes/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_FileDes/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_FileDes/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_FileDes/#fun-box-chmodfd-i32-val-path-filepath-val-mode-filemode-box-bool-val", 
            "text": "Set the FileMode for this fd.", 
            "title": "fun box  chmod(fd: I32 val, path: FilePath val, mode: FileMode box): Bool val"
        }, 
        {
            "location": "/files-_FileDes/#fun-box-chownfd-i32-val-path-filepath-val-uid-u32-val-gid-u32-val-bool-val", 
            "text": "Set the owner and group for this file. Does nothing on Windows.", 
            "title": "fun box  chown(fd: I32 val, path: FilePath val, uid: U32 val, gid: U32 val): Bool val"
        }, 
        {
            "location": "/files-_FileDes/#fun-box-eqthat-_filedes-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _FileDes val): Bool val"
        }, 
        {
            "location": "/files-_FileDes/#fun-box-nethat-_filedes-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _FileDes val): Bool val"
        }, 
        {
            "location": "/files-_FileDes/#fun-box-set_rightsfd-i32-val-path-filepath-val-optional-writeable-bool-val-none-val", 
            "text": "Set the Capsicum rights on the file descriptor.", 
            "title": "fun box  set_rights(fd: I32 val, path: FilePath val, optional writeable: Bool val): None val ?"
        }, 
        {
            "location": "/files-_FileDes/#fun-box-set_timefd-i32-val-path-filepath-val-atime-i64-val-i64-val-mtime-i64-val-i64-val-bool-val", 
            "text": "Set the last access and modification times of the file to the given values.", 
            "title": "fun box  set_time(fd: I32 val, path: FilePath val, atime: (I64 val , I64 val), mtime: (I64 val , I64 val)): Bool val"
        }, 
        {
            "location": "/files-_FileDes/#fun-box-touchfd-i32-val-path-filepath-val-bool-val", 
            "text": "Set the last access and modification times of the file to now.", 
            "title": "fun box  touch(fd: I32 val, path: FilePath val): Bool val"
        }, 
        {
            "location": "/files-FileErrNo/", 
            "text": "type files/FileErrNo is (\nFileOK\n val | \nFileError\n val)\n\n\nNo doc string provided.", 
            "title": "type FileErrNo"
        }, 
        {
            "location": "/files-FileErrNo/#type-filesfileerrno-is-fileok-val-fileerror-val", 
            "text": "No doc string provided.", 
            "title": "type files/FileErrNo is (FileOK val | FileError val)"
        }, 
        {
            "location": "/files-FileError/", 
            "text": "primitive files/FileError\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileError\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileError\n val): \nBool\n val", 
            "title": "primitive FileError"
        }, 
        {
            "location": "/files-FileError/#primitive-filesfileerror", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileError"
        }, 
        {
            "location": "/files-FileError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileError/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileError/#fun-box-eqthat-fileerror-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileError val): Bool val"
        }, 
        {
            "location": "/files-FileError/#fun-box-nethat-fileerror-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileError val): Bool val"
        }, 
        {
            "location": "/files-_FileHandle/", 
            "text": "primitive files/_FileHandle\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_FileHandle\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_FileHandle\n val): \nBool\n val", 
            "title": "primitive _FileHandle"
        }, 
        {
            "location": "/files-_FileHandle/#primitive-files_filehandle", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/_FileHandle"
        }, 
        {
            "location": "/files-_FileHandle/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_FileHandle/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_FileHandle/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_FileHandle/#fun-box-eqthat-_filehandle-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _FileHandle val): Bool val"
        }, 
        {
            "location": "/files-_FileHandle/#fun-box-nethat-_filehandle-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _FileHandle val): Bool val"
        }, 
        {
            "location": "/files-_FileHelper/", 
            "text": "primitive files/_FileHelper\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_FileHelper\n val): \nBool\n val\n\n\nfun box  \nmake_files\n(h: \nTestHelper\n val, files: \nArray\n[\nString\n val] ref): \nFilePath\n val ?\n\n\nfun box  \nne\n(that: \n_FileHelper\n val): \nBool\n val", 
            "title": "primitive _FileHelper"
        }, 
        {
            "location": "/files-_FileHelper/#primitive-files_filehelper", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/_FileHelper"
        }, 
        {
            "location": "/files-_FileHelper/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_FileHelper/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_FileHelper/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_FileHelper/#fun-box-eqthat-_filehelper-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _FileHelper val): Bool val"
        }, 
        {
            "location": "/files-_FileHelper/#fun-box-make_filesh-testhelper-val-files-array91string-val93-ref-filepath-val", 
            "text": "", 
            "title": "fun box  make_files(h: TestHelper val, files: Array[String val] ref): FilePath val ?"
        }, 
        {
            "location": "/files-_FileHelper/#fun-box-nethat-_filehelper-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _FileHelper val): Bool val"
        }, 
        {
            "location": "/files-FileInfo/", 
            "text": "class files/FileInfo\n\n\nDefault capability\n: \nval\n\n\nThis contains file system metadata for a path. The times are in the same\nformat as Time.now(), i.e. seconds and nanoseconds since the epoch.\n\n\nThe UID and GID are UNIX-style user and group IDs. These will be zero on\nWindows. The change_time will actually be the file creation time on Windows.\n\n\nA symlink will report information about itself, other than the size which\nwill be the size of the target. A broken symlink will report as much as it\ncan and will set the broken flag.\n\n\nPublic fields\n\n\n\n\nlet access_time: (\nI64\n val , \nI64\n val)\n\n\nlet broken: \nBool\n val\n\n\nlet change_time: (\nI64\n val , \nI64\n val)\n\n\nlet directory: \nBool\n val\n\n\nlet file: \nBool\n val\n\n\nlet filepath: \nFilePath\n val\n\n\nlet gid: \nU32\n val\n\n\nlet hard_links: \nU32\n val\n\n\nlet mode: \nFileMode\n val\n\n\nlet modified_time: (\nI64\n val , \nI64\n val)\n\n\nlet pipe: \nBool\n val\n\n\nlet size: \nUSize\n val\n\n\nlet symlink: \nBool\n val\n\n\nlet uid: \nU32\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(from: \nFilePath\n val) ?\n\n\nnew \n_descriptor\n(fd: \nI32\n val, path: \nFilePath\n val) ?\n\n\nnew \n_relative\n(fd: \nI32\n val, path: \nFilePath\n val, from: \nString\n val) ?", 
            "title": "class FileInfo"
        }, 
        {
            "location": "/files-FileInfo/#class-filesfileinfo", 
            "text": "Default capability :  val  This contains file system metadata for a path. The times are in the same\nformat as Time.now(), i.e. seconds and nanoseconds since the epoch.  The UID and GID are UNIX-style user and group IDs. These will be zero on\nWindows. The change_time will actually be the file creation time on Windows.  A symlink will report information about itself, other than the size which\nwill be the size of the target. A broken symlink will report as much as it\ncan and will set the broken flag.", 
            "title": "class files/FileInfo"
        }, 
        {
            "location": "/files-FileInfo/#public-fields", 
            "text": "let access_time: ( I64  val ,  I64  val)  let broken:  Bool  val  let change_time: ( I64  val ,  I64  val)  let directory:  Bool  val  let file:  Bool  val  let filepath:  FilePath  val  let gid:  U32  val  let hard_links:  U32  val  let mode:  FileMode  val  let modified_time: ( I64  val ,  I64  val)  let pipe:  Bool  val  let size:  USize  val  let symlink:  Bool  val  let uid:  U32  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/files-FileInfo/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileInfo/#new-createfrom-filepath-val", 
            "text": "", 
            "title": "new create(from: FilePath val) ?"
        }, 
        {
            "location": "/files-FileInfo/#new-_descriptorfd-i32-val-path-filepath-val", 
            "text": "", 
            "title": "new _descriptor(fd: I32 val, path: FilePath val) ?"
        }, 
        {
            "location": "/files-FileInfo/#new-_relativefd-i32-val-path-filepath-val-from-string-val", 
            "text": "", 
            "title": "new _relative(fd: I32 val, path: FilePath val, from: String val) ?"
        }, 
        {
            "location": "/files-FileLines/", 
            "text": "class files/FileLines is \nIterator\n[\nString\n val] ref\n\n\nDefault capability\n: \nref\n\n\nIterate over the lines in a file.\n\n\nConstructors\n\n\nnew \ncreate\n(file: \nFile\n ref)\n\n\nPublic Functions\n\n\nfun ref  \nhas_next\n(): \nBool\n val\n\n\nfun ref  \nnext\n(): \nString\n val", 
            "title": "class FileLines"
        }, 
        {
            "location": "/files-FileLines/#class-filesfilelines-is-iterator91string-val93-ref", 
            "text": "Default capability :  ref  Iterate over the lines in a file.", 
            "title": "class files/FileLines is Iterator[String val] ref"
        }, 
        {
            "location": "/files-FileLines/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileLines/#new-createfile-file-ref", 
            "text": "", 
            "title": "new create(file: File ref)"
        }, 
        {
            "location": "/files-FileLines/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileLines/#fun-ref-has_next-bool-val", 
            "text": "", 
            "title": "fun ref  has_next(): Bool val"
        }, 
        {
            "location": "/files-FileLines/#fun-ref-next-string-val", 
            "text": "", 
            "title": "fun ref  next(): String val"
        }, 
        {
            "location": "/files-FileLink/", 
            "text": "primitive files/FileLink\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileLink\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileLink\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileLink"
        }, 
        {
            "location": "/files-FileLink/#primitive-filesfilelink", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileLink"
        }, 
        {
            "location": "/files-FileLink/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileLink/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileLink/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileLink/#fun-box-eqthat-filelink-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileLink val): Bool val"
        }, 
        {
            "location": "/files-FileLink/#fun-box-nethat-filelink-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileLink val): Bool val"
        }, 
        {
            "location": "/files-FileLink/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileLookup/", 
            "text": "primitive files/FileLookup\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileLookup\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileLookup\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileLookup"
        }, 
        {
            "location": "/files-FileLookup/#primitive-filesfilelookup", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileLookup"
        }, 
        {
            "location": "/files-FileLookup/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileLookup/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileLookup/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileLookup/#fun-box-eqthat-filelookup-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileLookup val): Bool val"
        }, 
        {
            "location": "/files-FileLookup/#fun-box-nethat-filelookup-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileLookup val): Bool val"
        }, 
        {
            "location": "/files-FileLookup/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileMkdir/", 
            "text": "primitive files/FileMkdir\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileMkdir\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileMkdir\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileMkdir"
        }, 
        {
            "location": "/files-FileMkdir/#primitive-filesfilemkdir", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileMkdir"
        }, 
        {
            "location": "/files-FileMkdir/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileMkdir/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileMkdir/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileMkdir/#fun-box-eqthat-filemkdir-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileMkdir val): Bool val"
        }, 
        {
            "location": "/files-FileMkdir/#fun-box-nethat-filemkdir-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileMkdir val): Bool val"
        }, 
        {
            "location": "/files-FileMkdir/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileMode/", 
            "text": "class files/FileMode\n\n\nDefault capability\n: \nref\n\n\nThis stores a UNIX-style mode broken out into a Bool for each bit. For other\noperating systems, the mapping will be approximate. For example, on Windows,\nif the file is readable all the read Bools will be set, and if the file is\nwriteable, all the write Bools will be set.\n\n\nThe default mode is read/write for the owner, read-only for everyone else.\n\n\nPublic fields\n\n\n\n\nvar any_exec: \nBool\n val\n\n\nvar any_read: \nBool\n val\n\n\nvar any_write: \nBool\n val\n\n\nvar group_exec: \nBool\n val\n\n\nvar group_read: \nBool\n val\n\n\nvar group_write: \nBool\n val\n\n\nvar owner_exec: \nBool\n val\n\n\nvar owner_read: \nBool\n val\n\n\nvar owner_write: \nBool\n val\n\n\nvar setgid: \nBool\n val\n\n\nvar setuid: \nBool\n val\n\n\nvar sticky: \nBool\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun ref  \nexec\n(): \nFileMode\n ref\n\n\nSet the executable flag for everyone.\n\n\nfun ref  \ngroup\n(): \nFileMode\n ref\n\n\nClear all of the any-user flags.\n\n\nfun ref  \nprivate\n(): \nFileMode\n ref\n\n\nClear all of the group and any-user flags.\n\n\nfun ref  \nshared\n(): \nFileMode\n ref\n\n\nSet the write flag for everyone to the same as owner_write.\n\n\nPrivate Functions\n\n\nfun box  \n_os\n(): \nU32\n val\n\n\nGet the OS specific integer for a file mode. On Windows, if any read flag\nis set, the path is made readable, and if any write flag is set, the path\nis made writeable.", 
            "title": "class FileMode"
        }, 
        {
            "location": "/files-FileMode/#class-filesfilemode", 
            "text": "Default capability :  ref  This stores a UNIX-style mode broken out into a Bool for each bit. For other\noperating systems, the mapping will be approximate. For example, on Windows,\nif the file is readable all the read Bools will be set, and if the file is\nwriteable, all the write Bools will be set.  The default mode is read/write for the owner, read-only for everyone else.", 
            "title": "class files/FileMode"
        }, 
        {
            "location": "/files-FileMode/#public-fields", 
            "text": "var any_exec:  Bool  val  var any_read:  Bool  val  var any_write:  Bool  val  var group_exec:  Bool  val  var group_read:  Bool  val  var group_write:  Bool  val  var owner_exec:  Bool  val  var owner_read:  Bool  val  var owner_write:  Bool  val  var setgid:  Bool  val  var setuid:  Bool  val  var sticky:  Bool  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/files-FileMode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileMode/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileMode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileMode/#fun-ref-exec-filemode-ref", 
            "text": "Set the executable flag for everyone.", 
            "title": "fun ref  exec(): FileMode ref"
        }, 
        {
            "location": "/files-FileMode/#fun-ref-group-filemode-ref", 
            "text": "Clear all of the any-user flags.", 
            "title": "fun ref  group(): FileMode ref"
        }, 
        {
            "location": "/files-FileMode/#fun-ref-private-filemode-ref", 
            "text": "Clear all of the group and any-user flags.", 
            "title": "fun ref  private(): FileMode ref"
        }, 
        {
            "location": "/files-FileMode/#fun-ref-shared-filemode-ref", 
            "text": "Set the write flag for everyone to the same as owner_write.", 
            "title": "fun ref  shared(): FileMode ref"
        }, 
        {
            "location": "/files-FileMode/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/files-FileMode/#fun-box-_os-u32-val", 
            "text": "Get the OS specific integer for a file mode. On Windows, if any read flag\nis set, the path is made readable, and if any write flag is set, the path\nis made writeable.", 
            "title": "fun box  _os(): U32 val"
        }, 
        {
            "location": "/files-FileOK/", 
            "text": "primitive files/FileOK\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileOK\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileOK\n val): \nBool\n val", 
            "title": "primitive FileOK"
        }, 
        {
            "location": "/files-FileOK/#primitive-filesfileok", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileOK"
        }, 
        {
            "location": "/files-FileOK/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileOK/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileOK/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileOK/#fun-box-eqthat-fileok-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileOK val): Bool val"
        }, 
        {
            "location": "/files-FileOK/#fun-box-nethat-fileok-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileOK val): Bool val"
        }, 
        {
            "location": "/files-FilePath/", 
            "text": "class files/FilePath\n\n\nDefault capability\n: \nval\n\n\nA FilePath represents a capability to access a path. The path will be\nrepresented as an absolute path and a set of capabilities for operations on\nthat path.\n\n\nPublic fields\n\n\n\n\nlet caps: \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] ref\n\n\nlet path: \nString\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(base: ((\nFilePath\n val | \nAmbientAuth\n val) | \nNone\n val), path': \nString\n val, optional caps': \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] val) ?\n\n\nnew \n_create\n(path': \nString\n val, caps': \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] val)\n\n\nnew \nmkdtemp\n(base: ((\nFilePath\n val | \nAmbientAuth\n val) | \nNone\n val), optional prefix: \nString\n val, optional caps': \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] val) ?\n\n\nPublic Functions\n\n\nfun val  \ncanonical\n(): \nFilePath\n val ?\n\n\nReturn the equivalent canonical absolute path. Raise an error if there\nisn't one.\n\n\nfun box  \nchmod\n(mode: \nFileMode\n box): \nBool\n val\n\n\nSet the FileMode for a path.\n\n\nfun box  \nchown\n(uid: \nU32\n val, gid: \nU32\n val): \nBool\n val\n\n\nSet the owner and group for a path. Does nothing on Windows.\n\n\nfun val  \nexists\n(): \nBool\n val\n\n\nReturns true if the path exists. Returns false for a broken symlink.\n\n\nfun val  \njoin\n(path': \nString\n val, optional caps': \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] val): \nFilePath\n val ?\n\n\nReturn a new path relative to this one.\n\n\nfun val  \nmkdir\n(optional must_create: \nBool\n val): \nBool\n val\n\n\nCreates the directory. Will recursively create each element. Returns true\nif the directory exists when we're done, false if it does not. If we do not\nhave the FileStat permission, this will return false even if the directory\ndoes exist.\n\n\nfun val  \nremove\n(): \nBool\n val\n\n\nRemove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.\n\n\nfun box  \nrename\n(new_path: \nFilePath\n val): \nBool\n val\n\n\nRename a file or directory.\n\n\nfun box  \nset_time\n(atime: (\nI64\n val , \nI64\n val), mtime: (\nI64\n val , \nI64\n val)): \nBool\n val\n\n\nSet the last access and modification times of a path to the given values.\n\n\nfun box  \nsymlink\n(link_name: \nFilePath\n val): \nBool\n val\n\n\nCreate a symlink to a file or directory.\n\n\nfun box  \ntouch\n(): \nBool\n val\n\n\nSet the last access and modification times of a path to now.\n\n\nfun val  \nwalk\n(handler: \nWalkHandler\n ref, optional follow_links: \nBool\n val): \nNone\n val\n\n\nWalks a directory structure starting at this.\n\n\nhandler(dir_path, dir_entries)\n will be called for each directory\nstarting with this one.  The handler can control which subdirectories are\nexpanded by removing them from the \ndir_entries\n list.", 
            "title": "class FilePath"
        }, 
        {
            "location": "/files-FilePath/#class-filesfilepath", 
            "text": "Default capability :  val  A FilePath represents a capability to access a path. The path will be\nrepresented as an absolute path and a set of capabilities for operations on\nthat path.", 
            "title": "class files/FilePath"
        }, 
        {
            "location": "/files-FilePath/#public-fields", 
            "text": "let caps:  Flags [(((((((((((((( FileCreate  val |  FileChmod  val) |  FileChown  val) |  FileLink  val) |  FileLookup  val) |  FileMkdir  val) |  FileRead  val) |  FileRemove  val) |  FileRename  val) |  FileSeek  val) |  FileStat  val) |  FileSync  val) |  FileTime  val) |  FileTruncate  val) |  FileWrite  val),  U32  val] ref  let path:  String  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/files-FilePath/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FilePath/#new-createbase-filepath-val-ambientauth-val-none-val-path-string-val-optional-caps-flags91filecreate-val-filechmod-val-filechown-val-filelink-val-filelookup-val-filemkdir-val-fileread-val-fileremove-val-filerename-val-fileseek-val-filestat-val-filesync-val-filetime-val-filetruncate-val-filewrite-val-u32-val93-val", 
            "text": "", 
            "title": "new create(base: ((FilePath val | AmbientAuth val) | None val), path': String val, optional caps': Flags[((((((((((((((FileCreate val | FileChmod val) | FileChown val) | FileLink val) | FileLookup val) | FileMkdir val) | FileRead val) | FileRemove val) | FileRename val) | FileSeek val) | FileStat val) | FileSync val) | FileTime val) | FileTruncate val) | FileWrite val), U32 val] val) ?"
        }, 
        {
            "location": "/files-FilePath/#new-_createpath-string-val-caps-flags91filecreate-val-filechmod-val-filechown-val-filelink-val-filelookup-val-filemkdir-val-fileread-val-fileremove-val-filerename-val-fileseek-val-filestat-val-filesync-val-filetime-val-filetruncate-val-filewrite-val-u32-val93-val", 
            "text": "", 
            "title": "new _create(path': String val, caps': Flags[((((((((((((((FileCreate val | FileChmod val) | FileChown val) | FileLink val) | FileLookup val) | FileMkdir val) | FileRead val) | FileRemove val) | FileRename val) | FileSeek val) | FileStat val) | FileSync val) | FileTime val) | FileTruncate val) | FileWrite val), U32 val] val)"
        }, 
        {
            "location": "/files-FilePath/#new-mkdtempbase-filepath-val-ambientauth-val-none-val-optional-prefix-string-val-optional-caps-flags91filecreate-val-filechmod-val-filechown-val-filelink-val-filelookup-val-filemkdir-val-fileread-val-fileremove-val-filerename-val-fileseek-val-filestat-val-filesync-val-filetime-val-filetruncate-val-filewrite-val-u32-val93-val", 
            "text": "", 
            "title": "new mkdtemp(base: ((FilePath val | AmbientAuth val) | None val), optional prefix: String val, optional caps': Flags[((((((((((((((FileCreate val | FileChmod val) | FileChown val) | FileLink val) | FileLookup val) | FileMkdir val) | FileRead val) | FileRemove val) | FileRename val) | FileSeek val) | FileStat val) | FileSync val) | FileTime val) | FileTruncate val) | FileWrite val), U32 val] val) ?"
        }, 
        {
            "location": "/files-FilePath/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FilePath/#fun-val-canonical-filepath-val", 
            "text": "Return the equivalent canonical absolute path. Raise an error if there\nisn't one.", 
            "title": "fun val  canonical(): FilePath val ?"
        }, 
        {
            "location": "/files-FilePath/#fun-box-chmodmode-filemode-box-bool-val", 
            "text": "Set the FileMode for a path.", 
            "title": "fun box  chmod(mode: FileMode box): Bool val"
        }, 
        {
            "location": "/files-FilePath/#fun-box-chownuid-u32-val-gid-u32-val-bool-val", 
            "text": "Set the owner and group for a path. Does nothing on Windows.", 
            "title": "fun box  chown(uid: U32 val, gid: U32 val): Bool val"
        }, 
        {
            "location": "/files-FilePath/#fun-val-exists-bool-val", 
            "text": "Returns true if the path exists. Returns false for a broken symlink.", 
            "title": "fun val  exists(): Bool val"
        }, 
        {
            "location": "/files-FilePath/#fun-val-joinpath-string-val-optional-caps-flags91filecreate-val-filechmod-val-filechown-val-filelink-val-filelookup-val-filemkdir-val-fileread-val-fileremove-val-filerename-val-fileseek-val-filestat-val-filesync-val-filetime-val-filetruncate-val-filewrite-val-u32-val93-val-filepath-val", 
            "text": "Return a new path relative to this one.", 
            "title": "fun val  join(path': String val, optional caps': Flags[((((((((((((((FileCreate val | FileChmod val) | FileChown val) | FileLink val) | FileLookup val) | FileMkdir val) | FileRead val) | FileRemove val) | FileRename val) | FileSeek val) | FileStat val) | FileSync val) | FileTime val) | FileTruncate val) | FileWrite val), U32 val] val): FilePath val ?"
        }, 
        {
            "location": "/files-FilePath/#fun-val-mkdiroptional-must_create-bool-val-bool-val", 
            "text": "Creates the directory. Will recursively create each element. Returns true\nif the directory exists when we're done, false if it does not. If we do not\nhave the FileStat permission, this will return false even if the directory\ndoes exist.", 
            "title": "fun val  mkdir(optional must_create: Bool val): Bool val"
        }, 
        {
            "location": "/files-FilePath/#fun-val-remove-bool-val", 
            "text": "Remove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.", 
            "title": "fun val  remove(): Bool val"
        }, 
        {
            "location": "/files-FilePath/#fun-box-renamenew_path-filepath-val-bool-val", 
            "text": "Rename a file or directory.", 
            "title": "fun box  rename(new_path: FilePath val): Bool val"
        }, 
        {
            "location": "/files-FilePath/#fun-box-set_timeatime-i64-val-i64-val-mtime-i64-val-i64-val-bool-val", 
            "text": "Set the last access and modification times of a path to the given values.", 
            "title": "fun box  set_time(atime: (I64 val , I64 val), mtime: (I64 val , I64 val)): Bool val"
        }, 
        {
            "location": "/files-FilePath/#fun-box-symlinklink_name-filepath-val-bool-val", 
            "text": "Create a symlink to a file or directory.", 
            "title": "fun box  symlink(link_name: FilePath val): Bool val"
        }, 
        {
            "location": "/files-FilePath/#fun-box-touch-bool-val", 
            "text": "Set the last access and modification times of a path to now.", 
            "title": "fun box  touch(): Bool val"
        }, 
        {
            "location": "/files-FilePath/#fun-val-walkhandler-walkhandler-ref-optional-follow_links-bool-val-none-val", 
            "text": "Walks a directory structure starting at this.  handler(dir_path, dir_entries)  will be called for each directory\nstarting with this one.  The handler can control which subdirectories are\nexpanded by removing them from the  dir_entries  list.", 
            "title": "fun val  walk(handler: WalkHandler ref, optional follow_links: Bool val): None val"
        }, 
        {
            "location": "/files-FileRead/", 
            "text": "primitive files/FileRead\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileRead\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileRead\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileRead"
        }, 
        {
            "location": "/files-FileRead/#primitive-filesfileread", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileRead"
        }, 
        {
            "location": "/files-FileRead/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileRead/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileRead/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileRead/#fun-box-eqthat-fileread-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileRead val): Bool val"
        }, 
        {
            "location": "/files-FileRead/#fun-box-nethat-fileread-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileRead val): Bool val"
        }, 
        {
            "location": "/files-FileRead/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileRemove/", 
            "text": "primitive files/FileRemove\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileRemove\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileRemove\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileRemove"
        }, 
        {
            "location": "/files-FileRemove/#primitive-filesfileremove", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileRemove"
        }, 
        {
            "location": "/files-FileRemove/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileRemove/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileRemove/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileRemove/#fun-box-eqthat-fileremove-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileRemove val): Bool val"
        }, 
        {
            "location": "/files-FileRemove/#fun-box-nethat-fileremove-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileRemove val): Bool val"
        }, 
        {
            "location": "/files-FileRemove/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileRename/", 
            "text": "primitive files/FileRename\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileRename\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileRename\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileRename"
        }, 
        {
            "location": "/files-FileRename/#primitive-filesfilerename", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileRename"
        }, 
        {
            "location": "/files-FileRename/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileRename/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileRename/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileRename/#fun-box-eqthat-filerename-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileRename val): Bool val"
        }, 
        {
            "location": "/files-FileRename/#fun-box-nethat-filerename-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileRename val): Bool val"
        }, 
        {
            "location": "/files-FileRename/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileSeek/", 
            "text": "primitive files/FileSeek\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileSeek\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileSeek\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileSeek"
        }, 
        {
            "location": "/files-FileSeek/#primitive-filesfileseek", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileSeek"
        }, 
        {
            "location": "/files-FileSeek/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileSeek/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileSeek/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileSeek/#fun-box-eqthat-fileseek-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileSeek val): Bool val"
        }, 
        {
            "location": "/files-FileSeek/#fun-box-nethat-fileseek-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileSeek val): Bool val"
        }, 
        {
            "location": "/files-FileSeek/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileStat/", 
            "text": "primitive files/FileStat\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileStat\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileStat\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileStat"
        }, 
        {
            "location": "/files-FileStat/#primitive-filesfilestat", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileStat"
        }, 
        {
            "location": "/files-FileStat/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileStat/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileStat/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileStat/#fun-box-eqthat-filestat-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileStat val): Bool val"
        }, 
        {
            "location": "/files-FileStat/#fun-box-nethat-filestat-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileStat val): Bool val"
        }, 
        {
            "location": "/files-FileStat/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileStream/", 
            "text": "actor files/FileStream is \nOutStream\n tag\n\n\nDefault capability\n: \ntag\n\n\nAsynchronous access to a File object. Wraps file operations print, write,\nprintv and writev. The File will be disposed through File._final.\n\n\nConstructors\n\n\nnew \ncreate\n(file: \nFile\n iso)\n\n\nPublic Behaviours\n\n\nbe \nprint\n(data: (\nString\n val | \nArray\n[\nU8\n val] val))\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe \nprintv\n(data: \nByteSeqIter\n val)\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe \nwrite\n(data: (\nString\n val | \nArray\n[\nU8\n val] val))\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe \nwritev\n(data: \nByteSeqIter\n val)\n\n\nWrite an iterable collection of ByteSeqs.", 
            "title": "actor FileStream"
        }, 
        {
            "location": "/files-FileStream/#actor-filesfilestream-is-outstream-tag", 
            "text": "Default capability :  tag  Asynchronous access to a File object. Wraps file operations print, write,\nprintv and writev. The File will be disposed through File._final.", 
            "title": "actor files/FileStream is OutStream tag"
        }, 
        {
            "location": "/files-FileStream/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileStream/#new-createfile-file-iso", 
            "text": "", 
            "title": "new create(file: File iso)"
        }, 
        {
            "location": "/files-FileStream/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/files-FileStream/#be-printdata-string-val-array91u8-val93-val", 
            "text": "Print some bytes and insert a newline afterwards.", 
            "title": "be print(data: (String val | Array[U8 val] val))"
        }, 
        {
            "location": "/files-FileStream/#be-printvdata-byteseqiter-val", 
            "text": "Print an iterable collection of ByteSeqs.", 
            "title": "be printv(data: ByteSeqIter val)"
        }, 
        {
            "location": "/files-FileStream/#be-writedata-string-val-array91u8-val93-val", 
            "text": "Print some bytes without inserting a newline afterwards.", 
            "title": "be write(data: (String val | Array[U8 val] val))"
        }, 
        {
            "location": "/files-FileStream/#be-writevdata-byteseqiter-val", 
            "text": "Write an iterable collection of ByteSeqs.", 
            "title": "be writev(data: ByteSeqIter val)"
        }, 
        {
            "location": "/files-FileSync/", 
            "text": "primitive files/FileSync\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileSync\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileSync\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileSync"
        }, 
        {
            "location": "/files-FileSync/#primitive-filesfilesync", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileSync"
        }, 
        {
            "location": "/files-FileSync/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileSync/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileSync/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileSync/#fun-box-eqthat-filesync-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileSync val): Bool val"
        }, 
        {
            "location": "/files-FileSync/#fun-box-nethat-filesync-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileSync val): Bool val"
        }, 
        {
            "location": "/files-FileSync/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileTime/", 
            "text": "primitive files/FileTime\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileTime\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileTime\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileTime"
        }, 
        {
            "location": "/files-FileTime/#primitive-filesfiletime", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileTime"
        }, 
        {
            "location": "/files-FileTime/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileTime/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileTime/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileTime/#fun-box-eqthat-filetime-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileTime val): Bool val"
        }, 
        {
            "location": "/files-FileTime/#fun-box-nethat-filetime-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileTime val): Bool val"
        }, 
        {
            "location": "/files-FileTime/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileTruncate/", 
            "text": "primitive files/FileTruncate\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileTruncate\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileTruncate\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileTruncate"
        }, 
        {
            "location": "/files-FileTruncate/#primitive-filesfiletruncate", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileTruncate"
        }, 
        {
            "location": "/files-FileTruncate/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileTruncate/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileTruncate/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileTruncate/#fun-box-eqthat-filetruncate-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileTruncate val): Bool val"
        }, 
        {
            "location": "/files-FileTruncate/#fun-box-nethat-filetruncate-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileTruncate val): Bool val"
        }, 
        {
            "location": "/files-FileTruncate/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-FileWrite/", 
            "text": "primitive files/FileWrite\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nFileWrite\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nFileWrite\n val): \nBool\n val\n\n\nfun box  \nvalue\n(): \nU32\n val", 
            "title": "primitive FileWrite"
        }, 
        {
            "location": "/files-FileWrite/#primitive-filesfilewrite", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/FileWrite"
        }, 
        {
            "location": "/files-FileWrite/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileWrite/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-FileWrite/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileWrite/#fun-box-eqthat-filewrite-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: FileWrite val): Bool val"
        }, 
        {
            "location": "/files-FileWrite/#fun-box-nethat-filewrite-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: FileWrite val): Bool val"
        }, 
        {
            "location": "/files-FileWrite/#fun-box-value-u32-val", 
            "text": "", 
            "title": "fun box  value(): U32 val"
        }, 
        {
            "location": "/files-Main/", 
            "text": "actor files/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/files-Main/#actor-filesmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor files/Main is TestList ref"
        }, 
        {
            "location": "/files-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/files-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/files-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/files-OpenFile/", 
            "text": "primitive files/OpenFile\n\n\nDefault capability\n: \nval\n\n\nOpen a File for read only.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(from: \nFilePath\n val): (\nFile\n ref | (\nFileOK\n val | \nFileError\n val))\n\n\nfun box  \neq\n(that: \nOpenFile\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nOpenFile\n val): \nBool\n val", 
            "title": "primitive OpenFile"
        }, 
        {
            "location": "/files-OpenFile/#primitive-filesopenfile", 
            "text": "Default capability :  val  Open a File for read only.", 
            "title": "primitive files/OpenFile"
        }, 
        {
            "location": "/files-OpenFile/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-OpenFile/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-OpenFile/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-OpenFile/#fun-box-applyfrom-filepath-val-file-ref-fileok-val-fileerror-val", 
            "text": "", 
            "title": "fun box  apply(from: FilePath val): (File ref | (FileOK val | FileError val))"
        }, 
        {
            "location": "/files-OpenFile/#fun-box-eqthat-openfile-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: OpenFile val): Bool val"
        }, 
        {
            "location": "/files-OpenFile/#fun-box-nethat-openfile-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: OpenFile val): Bool val"
        }, 
        {
            "location": "/files-Path/", 
            "text": "primitive files/Path\n\n\nDefault capability\n: \nval\n\n\nOperations on paths that do not require a capability. The operations can be\nused to manipulate path names, but give no access to the resulting paths.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \nabs\n(path: \nString\n val): \nString\n val\n\n\nReturns a cleaned, absolute path.\n\n\nfun box  \nbase\n(path: \nString\n val): \nString\n val\n\n\nReturn the path after the last separator, or the whole path if there is no\nseparator.\n\n\nfun box  \ncanonical\n(path: \nString\n val): \nString\n val ?\n\n\nReturn the equivalent canonical absolute path. Raise an error if there\nisn't one.\n\n\nfun box  \nclean\n(path: \nString\n val): \nString\n val\n\n\nReplace multiple separators with a single separator.\nConvert / to the OS separator.\nRemove instances of . from the path.\nRemove instances of .. and the preceding path element from the path.\nThe result will have no trailing slash unless it is a root directory.\nIf the result would be empty, \".\" will be returned instead.\n\n\nfun box  \ncwd\n(): \nString\n val\n\n\nReturns the program's working directory. Setting the working directory is\nnot supported, as it is not concurrency-safe.\n\n\nfun box  \ndir\n(path: \nString\n val): \nString\n val\n\n\nReturn a cleaned path before the last separator, or the whole path if there\nis no separator.\n\n\nfun box  \neq\n(that: \nPath\n val): \nBool\n val\n\n\nfun box  \next\n(path: \nString\n val): \nString\n val\n\n\nReturn the file extension, i.e. the part after the last dot as long as that\ndot is after all separators. Return an empty string for no extension.\n\n\nfun box  \nfrom_slash\n(path: \nString\n val): \nString\n val\n\n\nChanges each / in the path to the OS specific separator.\n\n\nfun box  \nis_abs\n(path: \nString\n val): \nBool\n val\n\n\nReturn true if the path is an absolute path.\n\n\nfun box  \nis_list_sep\n(c: \nU8\n val): \nBool\n val\n\n\nDetermine if a byte is a path list separator.\n\n\nfun box  \nis_sep\n(c: \nU8\n val): \nBool\n val\n\n\nDetermine if a byte is a path separator.\n\n\nfun box  \njoin\n(path: \nString\n val, next_path: \nString\n val): \nString\n val\n\n\nJoin two paths together. If the next_path is absolute, simply return it.\nThe returned path will be cleaned.\n\n\nfun box  \nlist_sep\n(): \nString\n val\n\n\nReturn the path list separator as a string.\n\n\nfun box  \nne\n(that: \nPath\n val): \nBool\n val\n\n\nfun box  \nnormcase\n(path: \nString\n val): \nString\n val\n\n\nNormalizes the case of path for the runtime platform.\n\n\nfun box  \nrandom\n(optional len: \nUSize\n val): \nString\n val\n\n\nReturns a pseudo-random base, suitable as a temporary file name or\ndirectory name, but not guaranteed to not already exist.\n\n\nfun box  \nrel\n(to: \nString\n val, target: \nString\n val): \nString\n val ?\n\n\nReturns a path such that Path.join(to, Path.rel(to, target)) == target.\nRaises an error if this isn't possible.\n\n\nfun tag  \nsep\n(): \nString\n val\n\n\nReturn the path separator as a string.\n\n\nfun box  \nsplit\n(path: \nString\n val, optional separator: \nString\n val): (\nString\n val , \nString\n val)\n\n\nSplits the path into a pair, (head, tail) where tail is the last pathname\ncomponent and head is everything leading up to that. The tail part will\nnever contain a slash; if path ends in a slash, tail will be empty. If\nthere is no slash in path, head will be empty. If path is empty, both head\nand tail are empty. The path in head will be cleaned before it is returned.\nIn all cases, join(head, tail) returns a path to the same location as path\n(but the strings may differ). Also see the functions dir() and base().\n\n\nfun box  \nsplit_list\n(path: \nString\n val): \nArray\n[\nString\n val] iso^\n\n\nSeparate a list of paths into an array of cleaned paths.\n\n\nfun box  \nto_slash\n(path: \nString\n val): \nString\n val\n\n\nChanges each OS specific separator in the path to /.\n\n\nfun box  \nvolume\n(path: \nString\n val): \nString\n val\n\n\nOn Windows, this returns the drive letter or UNC base at the beginning of\nthe path, if there is one. Otherwise, this returns an empty string.\n\n\nPrivate Functions\n\n\nfun box  \ndrive\nletter\n(path: \nString\n val, optional offset: \nISize\n val): \nBool\n val\n\n\nLook for a drive letter followed by a ':', returning true if we find it.\n\n\nfun box  \nnetwork\nshare\n(path: \nString\n val, optional offset: \nISize\n val): \nString\n val\n\n\nLook for a host, a \\, and a resource. Return the path up to that point if\nwe found one, otherwise an empty String.", 
            "title": "primitive Path"
        }, 
        {
            "location": "/files-Path/#primitive-filespath", 
            "text": "Default capability :  val  Operations on paths that do not require a capability. The operations can be\nused to manipulate path names, but give no access to the resulting paths.", 
            "title": "primitive files/Path"
        }, 
        {
            "location": "/files-Path/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-Path/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-Path/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-Path/#fun-box-abspath-string-val-string-val", 
            "text": "Returns a cleaned, absolute path.", 
            "title": "fun box  abs(path: String val): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-basepath-string-val-string-val", 
            "text": "Return the path after the last separator, or the whole path if there is no\nseparator.", 
            "title": "fun box  base(path: String val): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-canonicalpath-string-val-string-val", 
            "text": "Return the equivalent canonical absolute path. Raise an error if there\nisn't one.", 
            "title": "fun box  canonical(path: String val): String val ?"
        }, 
        {
            "location": "/files-Path/#fun-box-cleanpath-string-val-string-val", 
            "text": "Replace multiple separators with a single separator.\nConvert / to the OS separator.\nRemove instances of . from the path.\nRemove instances of .. and the preceding path element from the path.\nThe result will have no trailing slash unless it is a root directory.\nIf the result would be empty, \".\" will be returned instead.", 
            "title": "fun box  clean(path: String val): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-cwd-string-val", 
            "text": "Returns the program's working directory. Setting the working directory is\nnot supported, as it is not concurrency-safe.", 
            "title": "fun box  cwd(): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-dirpath-string-val-string-val", 
            "text": "Return a cleaned path before the last separator, or the whole path if there\nis no separator.", 
            "title": "fun box  dir(path: String val): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-eqthat-path-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Path val): Bool val"
        }, 
        {
            "location": "/files-Path/#fun-box-extpath-string-val-string-val", 
            "text": "Return the file extension, i.e. the part after the last dot as long as that\ndot is after all separators. Return an empty string for no extension.", 
            "title": "fun box  ext(path: String val): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-from_slashpath-string-val-string-val", 
            "text": "Changes each / in the path to the OS specific separator.", 
            "title": "fun box  from_slash(path: String val): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-is_abspath-string-val-bool-val", 
            "text": "Return true if the path is an absolute path.", 
            "title": "fun box  is_abs(path: String val): Bool val"
        }, 
        {
            "location": "/files-Path/#fun-box-is_list_sepc-u8-val-bool-val", 
            "text": "Determine if a byte is a path list separator.", 
            "title": "fun box  is_list_sep(c: U8 val): Bool val"
        }, 
        {
            "location": "/files-Path/#fun-box-is_sepc-u8-val-bool-val", 
            "text": "Determine if a byte is a path separator.", 
            "title": "fun box  is_sep(c: U8 val): Bool val"
        }, 
        {
            "location": "/files-Path/#fun-box-joinpath-string-val-next_path-string-val-string-val", 
            "text": "Join two paths together. If the next_path is absolute, simply return it.\nThe returned path will be cleaned.", 
            "title": "fun box  join(path: String val, next_path: String val): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-list_sep-string-val", 
            "text": "Return the path list separator as a string.", 
            "title": "fun box  list_sep(): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-nethat-path-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Path val): Bool val"
        }, 
        {
            "location": "/files-Path/#fun-box-normcasepath-string-val-string-val", 
            "text": "Normalizes the case of path for the runtime platform.", 
            "title": "fun box  normcase(path: String val): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-randomoptional-len-usize-val-string-val", 
            "text": "Returns a pseudo-random base, suitable as a temporary file name or\ndirectory name, but not guaranteed to not already exist.", 
            "title": "fun box  random(optional len: USize val): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-relto-string-val-target-string-val-string-val", 
            "text": "Returns a path such that Path.join(to, Path.rel(to, target)) == target.\nRaises an error if this isn't possible.", 
            "title": "fun box  rel(to: String val, target: String val): String val ?"
        }, 
        {
            "location": "/files-Path/#fun-tag-sep-string-val", 
            "text": "Return the path separator as a string.", 
            "title": "fun tag  sep(): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-splitpath-string-val-optional-separator-string-val-string-val-string-val", 
            "text": "Splits the path into a pair, (head, tail) where tail is the last pathname\ncomponent and head is everything leading up to that. The tail part will\nnever contain a slash; if path ends in a slash, tail will be empty. If\nthere is no slash in path, head will be empty. If path is empty, both head\nand tail are empty. The path in head will be cleaned before it is returned.\nIn all cases, join(head, tail) returns a path to the same location as path\n(but the strings may differ). Also see the functions dir() and base().", 
            "title": "fun box  split(path: String val, optional separator: String val): (String val , String val)"
        }, 
        {
            "location": "/files-Path/#fun-box-split_listpath-string-val-array91string-val93-iso", 
            "text": "Separate a list of paths into an array of cleaned paths.", 
            "title": "fun box  split_list(path: String val): Array[String val] iso^"
        }, 
        {
            "location": "/files-Path/#fun-box-to_slashpath-string-val-string-val", 
            "text": "Changes each OS specific separator in the path to /.", 
            "title": "fun box  to_slash(path: String val): String val"
        }, 
        {
            "location": "/files-Path/#fun-box-volumepath-string-val-string-val", 
            "text": "On Windows, this returns the drive letter or UNC base at the beginning of\nthe path, if there is one. Otherwise, this returns an empty string.", 
            "title": "fun box  volume(path: String val): String val"
        }, 
        {
            "location": "/files-Path/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/files-Path/#fun-box-driveletterpath-string-val-optional-offset-isize-val-bool-val", 
            "text": "Look for a drive letter followed by a ':', returning true if we find it.", 
            "title": "fun box  driveletter(path: String val, optional offset: ISize val): Bool val"
        }, 
        {
            "location": "/files-Path/#fun-box-networksharepath-string-val-optional-offset-isize-val-string-val", 
            "text": "Look for a host, a \\, and a resource. Return the path up to that point if\nwe found one, otherwise an empty String.", 
            "title": "fun box  networkshare(path: String val, optional offset: ISize val): String val"
        }, 
        {
            "location": "/files-_PathDot/", 
            "text": "primitive files/_PathDot\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PathDot\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PathDot\n val): \nBool\n val", 
            "title": "primitive _PathDot"
        }, 
        {
            "location": "/files-_PathDot/#primitive-files_pathdot", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/_PathDot"
        }, 
        {
            "location": "/files-_PathDot/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_PathDot/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_PathDot/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_PathDot/#fun-box-eqthat-_pathdot-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PathDot val): Bool val"
        }, 
        {
            "location": "/files-_PathDot/#fun-box-nethat-_pathdot-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PathDot val): Bool val"
        }, 
        {
            "location": "/files-_PathDot2/", 
            "text": "primitive files/_PathDot2\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PathDot2\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PathDot2\n val): \nBool\n val", 
            "title": "primitive _PathDot2"
        }, 
        {
            "location": "/files-_PathDot2/#primitive-files_pathdot2", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/_PathDot2"
        }, 
        {
            "location": "/files-_PathDot2/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_PathDot2/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_PathDot2/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_PathDot2/#fun-box-eqthat-_pathdot2-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PathDot2 val): Bool val"
        }, 
        {
            "location": "/files-_PathDot2/#fun-box-nethat-_pathdot2-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PathDot2 val): Bool val"
        }, 
        {
            "location": "/files-_PathOther/", 
            "text": "primitive files/_PathOther\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PathOther\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PathOther\n val): \nBool\n val", 
            "title": "primitive _PathOther"
        }, 
        {
            "location": "/files-_PathOther/#primitive-files_pathother", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/_PathOther"
        }, 
        {
            "location": "/files-_PathOther/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_PathOther/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_PathOther/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_PathOther/#fun-box-eqthat-_pathother-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PathOther val): Bool val"
        }, 
        {
            "location": "/files-_PathOther/#fun-box-nethat-_pathother-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PathOther val): Bool val"
        }, 
        {
            "location": "/files-_PathSep/", 
            "text": "primitive files/_PathSep\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PathSep\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PathSep\n val): \nBool\n val", 
            "title": "primitive _PathSep"
        }, 
        {
            "location": "/files-_PathSep/#primitive-files_pathsep", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive files/_PathSep"
        }, 
        {
            "location": "/files-_PathSep/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_PathSep/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_PathSep/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_PathSep/#fun-box-eqthat-_pathsep-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PathSep val): Bool val"
        }, 
        {
            "location": "/files-_PathSep/#fun-box-nethat-_pathsep-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PathSep val): Bool val"
        }, 
        {
            "location": "/files-_PathState/", 
            "text": "type files/_PathState is (((\n_PathSep\n val | \n_PathDot\n val) | \n_PathDot2\n val) | \n_PathOther\n val)\n\n\nNo doc string provided.", 
            "title": "type _PathState"
        }, 
        {
            "location": "/files-_PathState/#type-files_pathstate-is-_pathsep-val-_pathdot-val-_pathdot2-val-_pathother-val", 
            "text": "No doc string provided.", 
            "title": "type files/_PathState is (((_PathSep val | _PathDot val) | _PathDot2 val) | _PathOther val)"
        }, 
        {
            "location": "/files-_TestDirectoryOpen/", 
            "text": "class files/_TestDirectoryOpen is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestDirectoryOpen"
        }, 
        {
            "location": "/files-_TestDirectoryOpen/#class-files_testdirectoryopen-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class files/_TestDirectoryOpen is UnitTest ref"
        }, 
        {
            "location": "/files-_TestDirectoryOpen/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_TestDirectoryOpen/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_TestDirectoryOpen/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_TestDirectoryOpen/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/files-_TestDirectoryOpen/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/files-_TestDirectoryOpen/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/files-_TestDirectoryOpen/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/files-_TestDirectoryOpen/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/files-_TestMkdtemp/", 
            "text": "class files/_TestMkdtemp is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestMkdtemp"
        }, 
        {
            "location": "/files-_TestMkdtemp/#class-files_testmkdtemp-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class files/_TestMkdtemp is UnitTest ref"
        }, 
        {
            "location": "/files-_TestMkdtemp/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_TestMkdtemp/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_TestMkdtemp/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_TestMkdtemp/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/files-_TestMkdtemp/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/files-_TestMkdtemp/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/files-_TestMkdtemp/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/files-_TestMkdtemp/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/files-_TestWalk/", 
            "text": "class files/_TestWalk is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestWalk"
        }, 
        {
            "location": "/files-_TestWalk/#class-files_testwalk-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class files/_TestWalk is UnitTest ref"
        }, 
        {
            "location": "/files-_TestWalk/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_TestWalk/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/files-_TestWalk/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_TestWalk/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/files-_TestWalk/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/files-_TestWalk/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/files-_TestWalk/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/files-_TestWalk/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/files-WalkHandler/", 
            "text": "interface files/WalkHandler\n\n\nDefault capability\n: \nref\n\n\nA handler for \nFilePath.walk\n.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(dir_path: \nFilePath\n val, dir_entries: \nArray\n[\nString\n val] ref): \nNone\n val", 
            "title": "interface WalkHandler"
        }, 
        {
            "location": "/files-WalkHandler/#interface-fileswalkhandler", 
            "text": "Default capability :  ref  A handler for  FilePath.walk .", 
            "title": "interface files/WalkHandler"
        }, 
        {
            "location": "/files-WalkHandler/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-WalkHandler/#fun-ref-applydir_path-filepath-val-dir_entries-array91string-val93-ref-none-val", 
            "text": "", 
            "title": "fun ref  apply(dir_path: FilePath val, dir_entries: Array[String val] ref): None val"
        }, 
        {
            "location": "/glob--index/", 
            "text": "Glob package\n\n\nThe Glob package provides the ability find all pathnames matching a given\npattern based on Unix shell rules. Its adapted from the\n\nglob2 python module\n.\n\n\nSee \nprimitive Glob\n for additional usage details.\n\n\nEntities\n\n\n\n\nprimitive _FileHelper\n\n\nprimitive Glob\n\n\ninterface GlobHandler\n\n\nactor Main\n\n\nclass _TestFilter\n\n\nclass _TestFnMatch\n\n\nclass _TestFnMatchCase\n\n\nclass _TestGlob\n\n\nclass _TestIGlob", 
            "title": "Package"
        }, 
        {
            "location": "/glob--index/#glob-package", 
            "text": "The Glob package provides the ability find all pathnames matching a given\npattern based on Unix shell rules. Its adapted from the glob2 python module .  See  primitive Glob  for additional usage details.", 
            "title": "Glob package"
        }, 
        {
            "location": "/glob--index/#entities", 
            "text": "primitive _FileHelper  primitive Glob  interface GlobHandler  actor Main  class _TestFilter  class _TestFnMatch  class _TestFnMatchCase  class _TestGlob  class _TestIGlob", 
            "title": "Entities"
        }, 
        {
            "location": "/glob-_FileHelper/", 
            "text": "primitive glob/_FileHelper\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_FileHelper\n val): \nBool\n val\n\n\nfun box  \nmake_files\n(h: \nTestHelper\n val, files: \nArray\n[\nString\n val] ref): \nFilePath\n val ?\n\n\nfun box  \nne\n(that: \n_FileHelper\n val): \nBool\n val", 
            "title": "primitive _FileHelper"
        }, 
        {
            "location": "/glob-_FileHelper/#primitive-glob_filehelper", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive glob/_FileHelper"
        }, 
        {
            "location": "/glob-_FileHelper/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/glob-_FileHelper/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/glob-_FileHelper/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-_FileHelper/#fun-box-eqthat-_filehelper-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _FileHelper val): Bool val"
        }, 
        {
            "location": "/glob-_FileHelper/#fun-box-make_filesh-testhelper-val-files-array91string-val93-ref-filepath-val", 
            "text": "", 
            "title": "fun box  make_files(h: TestHelper val, files: Array[String val] ref): FilePath val ?"
        }, 
        {
            "location": "/glob-_FileHelper/#fun-box-nethat-_filehelper-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _FileHelper val): Bool val"
        }, 
        {
            "location": "/glob-Glob/", 
            "text": "primitive glob/Glob\n\n\nDefault capability\n: \nval\n\n\nFilename matching and globbing with shell patterns.\n\n\nfnmatch(file_name, pattern)\n matches according to the local convention.\n\nfnmatchcase(file_name, pattern)\n always takes case into account.  The\nfunctions operate by translating the pattern into a regular expression.\n\n\nThe function translate(PATTERN) returns a regular expression corresponding to\nPATTERN.\n\n\nPatterns are Unix shell style:\n    *       | matches multiple characters within a directory\n    **      | matches multiple characters across directories\n    ?       | matches any single character\n    [seq]   | matches any character in seq\n    [!seq]  | matches any char not in seq\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nGlob\n val): \nBool\n val\n\n\nfun box  \nfilter\n(names: \nArray\n[\nString\n val] ref, pattern: \nString\n val): \nArray\n[(\nString\n val , \nArray\n[\nString\n val] ref)] val\n\n\nReturns \nname\n and the matching subgroups for \nnames\n that match \npattern\n.\n\n\nAll strings are first case-normalized if the operating system requires it.\n\n\nfun box  \nfnmatch\n(name: \nString\n val, pattern: \nString\n val): \nBool\n val\n\n\nTests whether \nname\n matches \npattern\n.\n\n\nAn initial period in \nname\n is not special.\n\n\nBoth \nname\n and \npattern\n are first case-normalized if the operating system\nrequires it.  If you don't want this, use \nfnmatchcase\n.\n\n\nfun box  \nfnmatchcase\n(name: \nString\n val, pattern: \nString\n val): \nBool\n val\n\n\nTests whether \nname\n matches \npattern\n, including case.\n\n\nfun box  \nglob\n(root_path: \nFilePath\n val, pattern: \nString\n val): \nArray\n[\nFilePath\n val] ref\n\n\nReturns an Array[FilePath] for each path below \nroot_path\n that matches\n\npattern\n.\n\n\nThe pattern may contain shell-style wildcards.  See the type documentation\non \nGlob\n for details.\n\n\nfun box  \niglob\n(root: \nFilePath\n val, pattern: \nString\n val, glob_handler: \nGlobHandler\n ref): \nNone\n val\n\n\nCalls \nGlobHandler.apply\n for each path below \nroot\n that matches \npattern\n.\n\n\nThe pattern may contain shell-style wildcards.  See the type documentation\non \nGlob\n for details.\n\n\nfun box  \nne\n(that: \nGlob\n val): \nBool\n val\n\n\nfun box  \ntranslate\n(pat: \nString\n val): \nString\n ref^\n\n\nTranslates a shell \npattern\n to a regular expression.\nThere is no way to quote meta-characters.\n\n\nPrivate Functions\n\n\nfun box  \napply\nglob_to_walk\n(pattern: \nString\n val, compiled_pattern: \nRegex\n ref, root: \nFilePath\n val, glob_handler: \nGlobHandler\n ref, dir: \nFilePath\n val, entries: \nArray\n[\nString\n val] ref): \nNone\n val", 
            "title": "primitive Glob"
        }, 
        {
            "location": "/glob-Glob/#primitive-globglob", 
            "text": "Default capability :  val  Filename matching and globbing with shell patterns.  fnmatch(file_name, pattern)  matches according to the local convention. fnmatchcase(file_name, pattern)  always takes case into account.  The\nfunctions operate by translating the pattern into a regular expression.  The function translate(PATTERN) returns a regular expression corresponding to\nPATTERN.  Patterns are Unix shell style:\n    *       | matches multiple characters within a directory\n    **      | matches multiple characters across directories\n    ?       | matches any single character\n    [seq]   | matches any character in seq\n    [!seq]  | matches any char not in seq", 
            "title": "primitive glob/Glob"
        }, 
        {
            "location": "/glob-Glob/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/glob-Glob/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/glob-Glob/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-Glob/#fun-box-eqthat-glob-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Glob val): Bool val"
        }, 
        {
            "location": "/glob-Glob/#fun-box-filternames-array91string-val93-ref-pattern-string-val-array91string-val-array91string-val93-ref93-val", 
            "text": "Returns  name  and the matching subgroups for  names  that match  pattern .  All strings are first case-normalized if the operating system requires it.", 
            "title": "fun box  filter(names: Array[String val] ref, pattern: String val): Array[(String val , Array[String val] ref)] val"
        }, 
        {
            "location": "/glob-Glob/#fun-box-fnmatchname-string-val-pattern-string-val-bool-val", 
            "text": "Tests whether  name  matches  pattern .  An initial period in  name  is not special.  Both  name  and  pattern  are first case-normalized if the operating system\nrequires it.  If you don't want this, use  fnmatchcase .", 
            "title": "fun box  fnmatch(name: String val, pattern: String val): Bool val"
        }, 
        {
            "location": "/glob-Glob/#fun-box-fnmatchcasename-string-val-pattern-string-val-bool-val", 
            "text": "Tests whether  name  matches  pattern , including case.", 
            "title": "fun box  fnmatchcase(name: String val, pattern: String val): Bool val"
        }, 
        {
            "location": "/glob-Glob/#fun-box-globroot_path-filepath-val-pattern-string-val-array91filepath-val93-ref", 
            "text": "Returns an Array[FilePath] for each path below  root_path  that matches pattern .  The pattern may contain shell-style wildcards.  See the type documentation\non  Glob  for details.", 
            "title": "fun box  glob(root_path: FilePath val, pattern: String val): Array[FilePath val] ref"
        }, 
        {
            "location": "/glob-Glob/#fun-box-iglobroot-filepath-val-pattern-string-val-glob_handler-globhandler-ref-none-val", 
            "text": "Calls  GlobHandler.apply  for each path below  root  that matches  pattern .  The pattern may contain shell-style wildcards.  See the type documentation\non  Glob  for details.", 
            "title": "fun box  iglob(root: FilePath val, pattern: String val, glob_handler: GlobHandler ref): None val"
        }, 
        {
            "location": "/glob-Glob/#fun-box-nethat-glob-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Glob val): Bool val"
        }, 
        {
            "location": "/glob-Glob/#fun-box-translatepat-string-val-string-ref", 
            "text": "Translates a shell  pattern  to a regular expression.\nThere is no way to quote meta-characters.", 
            "title": "fun box  translate(pat: String val): String ref^"
        }, 
        {
            "location": "/glob-Glob/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/glob-Glob/#fun-box-applyglob_to_walkpattern-string-val-compiled_pattern-regex-ref-root-filepath-val-glob_handler-globhandler-ref-dir-filepath-val-entries-array91string-val93-ref-none-val", 
            "text": "", 
            "title": "fun box  applyglob_to_walk(pattern: String val, compiled_pattern: Regex ref, root: FilePath val, glob_handler: GlobHandler ref, dir: FilePath val, entries: Array[String val] ref): None val"
        }, 
        {
            "location": "/glob-GlobHandler/", 
            "text": "interface glob/GlobHandler\n\n\nDefault capability\n: \nref\n\n\nA handler for \nGlob.iglob\n.  Each path which matches the glob will be called\nwith the groups that matched the various wildcards supplies in the\n\nmatch_groups\n array.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(path: \nFilePath\n val, match_groups: \nArray\n[\nString\n val] ref): \nNone\n val", 
            "title": "interface GlobHandler"
        }, 
        {
            "location": "/glob-GlobHandler/#interface-globglobhandler", 
            "text": "Default capability :  ref  A handler for  Glob.iglob .  Each path which matches the glob will be called\nwith the groups that matched the various wildcards supplies in the match_groups  array.", 
            "title": "interface glob/GlobHandler"
        }, 
        {
            "location": "/glob-GlobHandler/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-GlobHandler/#fun-ref-applypath-filepath-val-match_groups-array91string-val93-ref-none-val", 
            "text": "", 
            "title": "fun ref  apply(path: FilePath val, match_groups: Array[String val] ref): None val"
        }, 
        {
            "location": "/glob-Main/", 
            "text": "actor glob/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/glob-Main/#actor-globmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor glob/Main is TestList ref"
        }, 
        {
            "location": "/glob-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/glob-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/glob-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/glob-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/glob-_TestFilter/", 
            "text": "class glob/_TestFilter is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestFilter"
        }, 
        {
            "location": "/glob-_TestFilter/#class-glob_testfilter-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class glob/_TestFilter is UnitTest ref"
        }, 
        {
            "location": "/glob-_TestFilter/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/glob-_TestFilter/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/glob-_TestFilter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-_TestFilter/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/glob-_TestFilter/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/glob-_TestFilter/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/glob-_TestFilter/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestFilter/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestFnMatch/", 
            "text": "class glob/_TestFnMatch is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(glob: \nString\n val, path: \nString\n val, matches: \nBool\n val)\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestFnMatch"
        }, 
        {
            "location": "/glob-_TestFnMatch/#class-glob_testfnmatch-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class glob/_TestFnMatch is UnitTest ref"
        }, 
        {
            "location": "/glob-_TestFnMatch/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/glob-_TestFnMatch/#new-createglob-string-val-path-string-val-matches-bool-val", 
            "text": "", 
            "title": "new create(glob: String val, path: String val, matches: Bool val)"
        }, 
        {
            "location": "/glob-_TestFnMatch/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-_TestFnMatch/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestFnMatch/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/glob-_TestFnMatch/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/glob-_TestFnMatch/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestFnMatch/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestFnMatchCase/", 
            "text": "class glob/_TestFnMatchCase is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestFnMatchCase"
        }, 
        {
            "location": "/glob-_TestFnMatchCase/#class-glob_testfnmatchcase-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class glob/_TestFnMatchCase is UnitTest ref"
        }, 
        {
            "location": "/glob-_TestFnMatchCase/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/glob-_TestFnMatchCase/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/glob-_TestFnMatchCase/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-_TestFnMatchCase/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestFnMatchCase/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/glob-_TestFnMatchCase/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/glob-_TestFnMatchCase/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestFnMatchCase/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestGlob/", 
            "text": "class glob/_TestGlob is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val\n\n\nPrivate Functions\n\n\nfun box  \n_rel\n(top: \nFilePath\n val, files: \nArray\n[\nFilePath\n val] ref): \nArray\n[\nString\n val] ref ?", 
            "title": "class _TestGlob"
        }, 
        {
            "location": "/glob-_TestGlob/#class-glob_testglob-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class glob/_TestGlob is UnitTest ref"
        }, 
        {
            "location": "/glob-_TestGlob/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/glob-_TestGlob/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/glob-_TestGlob/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-_TestGlob/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/glob-_TestGlob/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/glob-_TestGlob/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/glob-_TestGlob/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestGlob/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestGlob/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/glob-_TestGlob/#fun-box-_reltop-filepath-val-files-array91filepath-val93-ref-array91string-val93-ref", 
            "text": "", 
            "title": "fun box  _rel(top: FilePath val, files: Array[FilePath val] ref): Array[String val] ref ?"
        }, 
        {
            "location": "/glob-_TestIGlob/", 
            "text": "class glob/_TestIGlob is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val\n\n\nPrivate Functions\n\n\nfun box  \n_rel\n(top: \nFilePath\n val, files: \nArray\n[\nFilePath\n val] ref): \nArray\n[\nString\n val] ref ?", 
            "title": "class _TestIGlob"
        }, 
        {
            "location": "/glob-_TestIGlob/#class-glob_testiglob-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class glob/_TestIGlob is UnitTest ref"
        }, 
        {
            "location": "/glob-_TestIGlob/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/glob-_TestIGlob/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/glob-_TestIGlob/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-_TestIGlob/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/glob-_TestIGlob/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/glob-_TestIGlob/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/glob-_TestIGlob/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestIGlob/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/glob-_TestIGlob/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/glob-_TestIGlob/#fun-box-_reltop-filepath-val-files-array91filepath-val93-ref-array91string-val93-ref", 
            "text": "", 
            "title": "fun box  _rel(top: FilePath val, files: Array[FilePath val] ref): Array[String val] ref ?"
        }, 
        {
            "location": "/ini--index/", 
            "text": "Ini package\n\n\nThe Ini package provides support for parsing\n\nINI file\n formatted text.\n\n\n\n\nCurrently \ndoes not\n support multi-line entries.\n\n\nAny keys not in a section will be placed in the section \"\"\n\n\nEmpty sections are dropped\n\n\n\n\nExample code\n\n\n// Parses the file 'example.ini' in the current working directory\n// Output all the content\nuse \"ini\"\nuse \"files\"\n\n\nactor Main\n  new create(env:Env) =\n\n    try\n      let ini_file = File(FilePath(env.root, \"example.ini\"))\n      let sections = IniParse(ini_file.lines())\n      for section in sections.keys() do\n        env.out.print(\"Section name is: \" + section)\n        for key in sections(section).keys() do\n          env.out.print(key + \" = \" + sections(section)(key))\n        end\n      end\n    end\n\n\nEntities\n\n\n\n\nprimitive Ini\n\n\ntype IniError\n\n\nprimitive IniIncompleteSection\n\n\ntype IniMap\n\n\nprimitive IniNoDelimeter\n\n\ninterface IniNotify\n\n\nprimitive IniParse\n\n\nactor Main\n\n\nclass _TestIniParse", 
            "title": "Package"
        }, 
        {
            "location": "/ini--index/#ini-package", 
            "text": "The Ini package provides support for parsing INI file  formatted text.   Currently  does not  support multi-line entries.  Any keys not in a section will be placed in the section \"\"  Empty sections are dropped", 
            "title": "Ini package"
        }, 
        {
            "location": "/ini--index/#example-code", 
            "text": "// Parses the file 'example.ini' in the current working directory\n// Output all the content\nuse \"ini\"\nuse \"files\"  actor Main\n  new create(env:Env) = \n    try\n      let ini_file = File(FilePath(env.root, \"example.ini\"))\n      let sections = IniParse(ini_file.lines())\n      for section in sections.keys() do\n        env.out.print(\"Section name is: \" + section)\n        for key in sections(section).keys() do\n          env.out.print(key + \" = \" + sections(section)(key))\n        end\n      end\n    end", 
            "title": "Example code"
        }, 
        {
            "location": "/ini--index/#entities", 
            "text": "primitive Ini  type IniError  primitive IniIncompleteSection  type IniMap  primitive IniNoDelimeter  interface IniNotify  primitive IniParse  actor Main  class _TestIniParse", 
            "title": "Entities"
        }, 
        {
            "location": "/ini-Ini/", 
            "text": "primitive ini/Ini\n\n\nDefault capability\n: \nval\n\n\nA streaming parser for INI formatted lines of test.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(lines: \nIterator\n[\nString\n box] ref, f: \nIniNotify\n ref): \nBool\n val\n\n\nThis accepts a string iterator and calls the IniNotify for each new entry.\nEmpty sections won't be reported. If any errors are encountered, this will\nreturn false. Otherwise, it returns true.\n\n\nfun box  \neq\n(that: \nIni\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nIni\n val): \nBool\n val", 
            "title": "primitive Ini"
        }, 
        {
            "location": "/ini-Ini/#primitive-iniini", 
            "text": "Default capability :  val  A streaming parser for INI formatted lines of test.", 
            "title": "primitive ini/Ini"
        }, 
        {
            "location": "/ini-Ini/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ini-Ini/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/ini-Ini/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-Ini/#fun-box-applylines-iterator91string-box93-ref-f-ininotify-ref-bool-val", 
            "text": "This accepts a string iterator and calls the IniNotify for each new entry.\nEmpty sections won't be reported. If any errors are encountered, this will\nreturn false. Otherwise, it returns true.", 
            "title": "fun box  apply(lines: Iterator[String box] ref, f: IniNotify ref): Bool val"
        }, 
        {
            "location": "/ini-Ini/#fun-box-eqthat-ini-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Ini val): Bool val"
        }, 
        {
            "location": "/ini-Ini/#fun-box-nethat-ini-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Ini val): Bool val"
        }, 
        {
            "location": "/ini-IniError/", 
            "text": "type ini/IniError is (\nIniIncompleteSection\n val | \nIniNoDelimeter\n val)\n\n\nNo doc string provided.", 
            "title": "type IniError"
        }, 
        {
            "location": "/ini-IniError/#type-iniinierror-is-iniincompletesection-val-ininodelimeter-val", 
            "text": "No doc string provided.", 
            "title": "type ini/IniError is (IniIncompleteSection val | IniNoDelimeter val)"
        }, 
        {
            "location": "/ini-IniIncompleteSection/", 
            "text": "primitive ini/IniIncompleteSection\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nIniIncompleteSection\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nIniIncompleteSection\n val): \nBool\n val", 
            "title": "primitive IniIncompleteSection"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#primitive-iniiniincompletesection", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive ini/IniIncompleteSection"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#fun-box-eqthat-iniincompletesection-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: IniIncompleteSection val): Bool val"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#fun-box-nethat-iniincompletesection-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: IniIncompleteSection val): Bool val"
        }, 
        {
            "location": "/ini-IniMap/", 
            "text": "type ini/IniMap is \nHashMap\n[\nString\n val, \nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] ref, \nHashEq\n[\nString\n val] val] ref\n\n\nNo doc string provided.", 
            "title": "type IniMap"
        }, 
        {
            "location": "/ini-IniMap/#type-iniinimap-is-hashmap91string-val-hashmap91string-val-string-val-hasheq91string-val93-val93-ref-hasheq91string-val93-val93-ref", 
            "text": "No doc string provided.", 
            "title": "type ini/IniMap is HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref"
        }, 
        {
            "location": "/ini-IniNoDelimeter/", 
            "text": "primitive ini/IniNoDelimeter\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nIniNoDelimeter\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nIniNoDelimeter\n val): \nBool\n val", 
            "title": "primitive IniNoDelimeter"
        }, 
        {
            "location": "/ini-IniNoDelimeter/#primitive-iniininodelimeter", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive ini/IniNoDelimeter"
        }, 
        {
            "location": "/ini-IniNoDelimeter/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ini-IniNoDelimeter/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/ini-IniNoDelimeter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-IniNoDelimeter/#fun-box-eqthat-ininodelimeter-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: IniNoDelimeter val): Bool val"
        }, 
        {
            "location": "/ini-IniNoDelimeter/#fun-box-nethat-ininodelimeter-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: IniNoDelimeter val): Bool val"
        }, 
        {
            "location": "/ini-IniNotify/", 
            "text": "interface ini/IniNotify\n\n\nDefault capability\n: \nref\n\n\nNotifications for INI parsing.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(section: \nString\n val, key: \nString\n val, value: \nString\n val): \nBool\n val\n\n\nThis is called for every valid entry in the INI file. If key/value pairs\noccur before a section name, the section can be an empty string. Return\nfalse to halt processing.\n\n\nfun ref  \nerrors\n(line: \nUSize\n val, err: (\nIniIncompleteSection\n val | \nIniNoDelimeter\n val)): \nBool\n val\n\n\nThis is called for each error encountered. Return false to halt processing.", 
            "title": "interface IniNotify"
        }, 
        {
            "location": "/ini-IniNotify/#interface-iniininotify", 
            "text": "Default capability :  ref  Notifications for INI parsing.", 
            "title": "interface ini/IniNotify"
        }, 
        {
            "location": "/ini-IniNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-IniNotify/#fun-ref-applysection-string-val-key-string-val-value-string-val-bool-val", 
            "text": "This is called for every valid entry in the INI file. If key/value pairs\noccur before a section name, the section can be an empty string. Return\nfalse to halt processing.", 
            "title": "fun ref  apply(section: String val, key: String val, value: String val): Bool val"
        }, 
        {
            "location": "/ini-IniNotify/#fun-ref-errorsline-usize-val-err-iniincompletesection-val-ininodelimeter-val-bool-val", 
            "text": "This is called for each error encountered. Return false to halt processing.", 
            "title": "fun ref  errors(line: USize val, err: (IniIncompleteSection val | IniNoDelimeter val)): Bool val"
        }, 
        {
            "location": "/ini-IniParse/", 
            "text": "primitive ini/IniParse\n\n\nDefault capability\n: \nval\n\n\nThis is used to parse INI formatted text as a nested map of strings.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(lines: \nIterator\n[\nString\n val] ref): \nHashMap\n[\nString\n val, \nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] ref, \nHashEq\n[\nString\n val] val] ref^ ?\n\n\nThis accepts a string iterator and returns a nested map of strings. If\nparsing fails, an error is raised.\n\n\nfun box  \neq\n(that: \nIniParse\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nIniParse\n val): \nBool\n val", 
            "title": "primitive IniParse"
        }, 
        {
            "location": "/ini-IniParse/#primitive-iniiniparse", 
            "text": "Default capability :  val  This is used to parse INI formatted text as a nested map of strings.", 
            "title": "primitive ini/IniParse"
        }, 
        {
            "location": "/ini-IniParse/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ini-IniParse/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/ini-IniParse/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-IniParse/#fun-box-applylines-iterator91string-val93-ref-hashmap91string-val-hashmap91string-val-string-val-hasheq91string-val93-val93-ref-hasheq91string-val93-val93-ref", 
            "text": "This accepts a string iterator and returns a nested map of strings. If\nparsing fails, an error is raised.", 
            "title": "fun box  apply(lines: Iterator[String val] ref): HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref^ ?"
        }, 
        {
            "location": "/ini-IniParse/#fun-box-eqthat-iniparse-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: IniParse val): Bool val"
        }, 
        {
            "location": "/ini-IniParse/#fun-box-nethat-iniparse-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: IniParse val): Bool val"
        }, 
        {
            "location": "/ini-Main/", 
            "text": "actor ini/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/ini-Main/#actor-inimain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor ini/Main is TestList ref"
        }, 
        {
            "location": "/ini-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ini-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/ini-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/ini-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/ini-_TestIniParse/", 
            "text": "class ini/_TestIniParse is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestIniParse"
        }, 
        {
            "location": "/ini-_TestIniParse/#class-ini_testiniparse-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class ini/_TestIniParse is UnitTest ref"
        }, 
        {
            "location": "/ini-_TestIniParse/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ini-_TestIniParse/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/ini-_TestIniParse/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-_TestIniParse/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/ini-_TestIniParse/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/ini-_TestIniParse/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/ini-_TestIniParse/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/ini-_TestIniParse/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json--index/", 
            "text": "No package doc string provided for json.\n\n\nEntities\n\n\n\n\nclass JsonArray\n\n\nclass JsonDoc\n\n\nclass JsonObject\n\n\nprimitive _JsonPrint\n\n\ntype JsonType\n\n\nactor Main\n\n\nclass _TestParseArray\n\n\nclass _TestParseBasic\n\n\nclass _TestParseKeyword\n\n\nclass _TestParseNumber\n\n\nclass _TestParseObject\n\n\nclass _TestParsePrint\n\n\nclass _TestParseRFC1\n\n\nclass _TestParseRFC2\n\n\nclass _TestParseString\n\n\nclass _TestPrintArray\n\n\nclass _TestPrintKeyword\n\n\nclass _TestPrintNumber\n\n\nclass _TestPrintObject\n\n\nclass _TestPrintString", 
            "title": "Package"
        }, 
        {
            "location": "/json--index/#entities", 
            "text": "class JsonArray  class JsonDoc  class JsonObject  primitive _JsonPrint  type JsonType  actor Main  class _TestParseArray  class _TestParseBasic  class _TestParseKeyword  class _TestParseNumber  class _TestParseObject  class _TestParsePrint  class _TestParseRFC1  class _TestParseRFC2  class _TestParseString  class _TestPrintArray  class _TestPrintKeyword  class _TestPrintNumber  class _TestPrintObject  class _TestPrintString", 
            "title": "Entities"
        }, 
        {
            "location": "/json-JsonArray/", 
            "text": "class json/JsonArray\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nPublic fields\n\n\n\n\nvar data: \nArray\n[((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref)] ref\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(optional len: \nUSize\n val)\n\n\nCreate an array with zero elements, but space for len elements.\n\n\nnew \nfrom_array\n(data': \nArray\n[((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref)] ref)\n\n\nCreate a Json array from an actual array.\n\n\nPublic Functions\n\n\nfun box  \nstring\n(optional indent: \nString\n val): \nString\n val\n\n\nGenerate string representation of this array.", 
            "title": "class JsonArray"
        }, 
        {
            "location": "/json-JsonArray/#class-jsonjsonarray", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class json/JsonArray"
        }, 
        {
            "location": "/json-JsonArray/#public-fields", 
            "text": "var data:  Array [(((((( F64  val |  I64  val) |  Bool  val) |  None  val) |  String  val) |  JsonArray  ref) |  JsonObject  ref)] ref", 
            "title": "Public fields"
        }, 
        {
            "location": "/json-JsonArray/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-JsonArray/#new-createoptional-len-usize-val", 
            "text": "Create an array with zero elements, but space for len elements.", 
            "title": "new create(optional len: USize val)"
        }, 
        {
            "location": "/json-JsonArray/#new-from_arraydata-array91f64-val-i64-val-bool-val-none-val-string-val-jsonarray-ref-jsonobject-ref93-ref", 
            "text": "Create a Json array from an actual array.", 
            "title": "new from_array(data': Array[((((((F64 val | I64 val) | Bool val) | None val) | String val) | JsonArray ref) | JsonObject ref)] ref)"
        }, 
        {
            "location": "/json-JsonArray/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-JsonArray/#fun-box-stringoptional-indent-string-val-string-val", 
            "text": "Generate string representation of this array.", 
            "title": "fun box  string(optional indent: String val): String val"
        }, 
        {
            "location": "/json-JsonDoc/", 
            "text": "class json/JsonDoc\n\n\nDefault capability\n: \nref\n\n\nTop level JSON type containing an entire document.\nA JSON document consists of exactly 1 value.\n\n\nPublic fields\n\n\n\n\nvar data: ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref)\n\n\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun ref  \nparse\n(source: \nString\n val): \nNone\n val ?\n\n\nParse the given string as a JSON file, building a document.\nRaise error on invalid JSON in given source.\n\n\nfun box  \nparse_report\n(): (\nUSize\n val , \nString\n val)\n\n\nGive details of the error that occured last time we attempted to parse.\nIf parse was successful returns (0, \"\").\n\n\nfun box  \nstring\n(): \nString\n val\n\n\nGenerate string representation of this document.\n\n\nPrivate Functions\n\n\nfun ref  \ndump\nwhitespace\n(): \nNone\n val\n\n\nDump all whitespace at the current read location in source, if any.\n\n\nfun ref  \n_error\n(msg: \nString\n val): \nNone\n val\n\n\nRecord an error with the given message.\n\n\nfun ref  \nget\nchar\n(optional eof_context: (\nString\n val | \nNone\n val)): \nU8\n val ?\n\n\nGet and consume the next char in the source.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.\n\n\nfun ref  \nlast\nchar\n(): \nString\n val\n\n\nGet the last character peeked or got from the source as a String.\nFor use generating error messages.\n\n\nfun ref  \nparse\narray\n(): \nJsonArray\n ref ?\n\n\nParse an array, the leading [ of which has already been peeked.\n\n\nfun ref  \nparse\ndecimal\n(): (\nI64\n val , \nU8\n val) ?\n\n\nParse a decimal integer which must appear immediately in the source.\n\n\nfun ref  \nparse\nescape\n(): \nString\n val ?\n\n\nProcess a string escape sequence, the leading \\ of which has already been\nconsumed.\n\n\nfun ref  \nparse\nkeyword\n(): (\nBool\n val | \nNone\n val) ?\n\n\nParse a keyword, the first letter of which has already been peeked.\n\n\nfun ref  \nparse\nnumber\n(): (\nF64\n val | \nI64\n val) ?\n\n\nParse a number, the leading character of which has already been peeked.\n\n\nfun ref  \nparse\nobject\n(): \nJsonObject\n ref ?\n\n\nParse a JSON object, the leading { of which has already been peeked.\n\n\nfun ref  \nparse\nstring\n(context: \nString\n val): \nString\n val ?\n\n\nParse a string, which must be the next thing found, other than whitesapce.\n\n\nfun ref  \nparse\nunicode_digits\n(): \nU32\n val ?\n\n\nParse the hex digits of a Unicode escape sequence, the leading \\u of which\nhas already been consumed, and return the encoded character value.\n\n\nfun ref  \nparse\nunicode_escape\n(): \nString\n val ?\n\n\nProcess a Unicode escape sequence, the leading \\u of which has already been\nconsumed.\n\n\nfun ref  \nparse\nvalue\n(context: \nString\n val): ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref) ?\n\n\nParse a single JSON value of any type, which MUST be present.\nRaise error on invalid or missing value.\n\n\nfun ref  \npeek\nchar\n(optional eof_context: (\nString\n val | \nNone\n val)): \nU8\n val ?\n\n\nPeek the next char in the source, without consuming it.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.", 
            "title": "class JsonDoc"
        }, 
        {
            "location": "/json-JsonDoc/#class-jsonjsondoc", 
            "text": "Default capability :  ref  Top level JSON type containing an entire document.\nA JSON document consists of exactly 1 value.", 
            "title": "class json/JsonDoc"
        }, 
        {
            "location": "/json-JsonDoc/#public-fields", 
            "text": "var data: (((((( F64  val |  I64  val) |  Bool  val) |  None  val) |  String  val) |  JsonArray  ref) |  JsonObject  ref)", 
            "title": "Public fields"
        }, 
        {
            "location": "/json-JsonDoc/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-JsonDoc/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-JsonDoc/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-parsesource-string-val-none-val", 
            "text": "Parse the given string as a JSON file, building a document.\nRaise error on invalid JSON in given source.", 
            "title": "fun ref  parse(source: String val): None val ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-box-parse_report-usize-val-string-val", 
            "text": "Give details of the error that occured last time we attempted to parse.\nIf parse was successful returns (0, \"\").", 
            "title": "fun box  parse_report(): (USize val , String val)"
        }, 
        {
            "location": "/json-JsonDoc/#fun-box-string-string-val", 
            "text": "Generate string representation of this document.", 
            "title": "fun box  string(): String val"
        }, 
        {
            "location": "/json-JsonDoc/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-dumpwhitespace-none-val", 
            "text": "Dump all whitespace at the current read location in source, if any.", 
            "title": "fun ref  dumpwhitespace(): None val"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-_errormsg-string-val-none-val", 
            "text": "Record an error with the given message.", 
            "title": "fun ref  _error(msg: String val): None val"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-getcharoptional-eof_context-string-val-none-val-u8-val", 
            "text": "Get and consume the next char in the source.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.", 
            "title": "fun ref  getchar(optional eof_context: (String val | None val)): U8 val ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-lastchar-string-val", 
            "text": "Get the last character peeked or got from the source as a String.\nFor use generating error messages.", 
            "title": "fun ref  lastchar(): String val"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-parsearray-jsonarray-ref", 
            "text": "Parse an array, the leading [ of which has already been peeked.", 
            "title": "fun ref  parsearray(): JsonArray ref ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-parsedecimal-i64-val-u8-val", 
            "text": "Parse a decimal integer which must appear immediately in the source.", 
            "title": "fun ref  parsedecimal(): (I64 val , U8 val) ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-parseescape-string-val", 
            "text": "Process a string escape sequence, the leading \\ of which has already been\nconsumed.", 
            "title": "fun ref  parseescape(): String val ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-parsekeyword-bool-val-none-val", 
            "text": "Parse a keyword, the first letter of which has already been peeked.", 
            "title": "fun ref  parsekeyword(): (Bool val | None val) ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-parsenumber-f64-val-i64-val", 
            "text": "Parse a number, the leading character of which has already been peeked.", 
            "title": "fun ref  parsenumber(): (F64 val | I64 val) ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-parseobject-jsonobject-ref", 
            "text": "Parse a JSON object, the leading { of which has already been peeked.", 
            "title": "fun ref  parseobject(): JsonObject ref ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-parsestringcontext-string-val-string-val", 
            "text": "Parse a string, which must be the next thing found, other than whitesapce.", 
            "title": "fun ref  parsestring(context: String val): String val ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-parseunicode_digits-u32-val", 
            "text": "Parse the hex digits of a Unicode escape sequence, the leading \\u of which\nhas already been consumed, and return the encoded character value.", 
            "title": "fun ref  parseunicode_digits(): U32 val ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-parseunicode_escape-string-val", 
            "text": "Process a Unicode escape sequence, the leading \\u of which has already been\nconsumed.", 
            "title": "fun ref  parseunicode_escape(): String val ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-parsevaluecontext-string-val-f64-val-i64-val-bool-val-none-val-string-val-jsonarray-ref-jsonobject-ref", 
            "text": "Parse a single JSON value of any type, which MUST be present.\nRaise error on invalid or missing value.", 
            "title": "fun ref  parsevalue(context: String val): ((((((F64 val | I64 val) | Bool val) | None val) | String val) | JsonArray ref) | JsonObject ref) ?"
        }, 
        {
            "location": "/json-JsonDoc/#fun-ref-peekcharoptional-eof_context-string-val-none-val-u8-val", 
            "text": "Peek the next char in the source, without consuming it.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.", 
            "title": "fun ref  peekchar(optional eof_context: (String val | None val)): U8 val ?"
        }, 
        {
            "location": "/json-JsonObject/", 
            "text": "class json/JsonObject\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nPublic fields\n\n\n\n\nvar data: \nHashMap\n[\nString\n val, ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref), \nHashEq\n[\nString\n val] val] ref\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(optional prealloc: \nUSize\n val)\n\n\nCreate a map with space for prealloc elements without triggering a\nresize. Defaults to 6.\n\n\nnew \nfrom_map\n(data': \nHashMap\n[\nString\n val, ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref), \nHashEq\n[\nString\n val] val] ref)\n\n\nCreate a Json object from a map.\n\n\nPublic Functions\n\n\nfun box  \nstring\n(optional indent: \nString\n val): \nString\n val\n\n\nGenerate string representation of this object.", 
            "title": "class JsonObject"
        }, 
        {
            "location": "/json-JsonObject/#class-jsonjsonobject", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class json/JsonObject"
        }, 
        {
            "location": "/json-JsonObject/#public-fields", 
            "text": "var data:  HashMap [ String  val, (((((( F64  val |  I64  val) |  Bool  val) |  None  val) |  String  val) |  JsonArray  ref) |  JsonObject  ref),  HashEq [ String  val] val] ref", 
            "title": "Public fields"
        }, 
        {
            "location": "/json-JsonObject/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-JsonObject/#new-createoptional-prealloc-usize-val", 
            "text": "Create a map with space for prealloc elements without triggering a\nresize. Defaults to 6.", 
            "title": "new create(optional prealloc: USize val)"
        }, 
        {
            "location": "/json-JsonObject/#new-from_mapdata-hashmap91string-val-f64-val-i64-val-bool-val-none-val-string-val-jsonarray-ref-jsonobject-ref-hasheq91string-val93-val93-ref", 
            "text": "Create a Json object from a map.", 
            "title": "new from_map(data': HashMap[String val, ((((((F64 val | I64 val) | Bool val) | None val) | String val) | JsonArray ref) | JsonObject ref), HashEq[String val] val] ref)"
        }, 
        {
            "location": "/json-JsonObject/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-JsonObject/#fun-box-stringoptional-indent-string-val-string-val", 
            "text": "Generate string representation of this object.", 
            "title": "fun box  string(optional indent: String val): String val"
        }, 
        {
            "location": "/json-_JsonPrint/", 
            "text": "primitive json/_JsonPrint\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_JsonPrint\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_JsonPrint\n val): \nBool\n val\n\n\nPrivate Functions\n\n\nfun box  \nescaped\nstring\n(s: \nString\n val): \nString\n val\n\n\nGenerate a version of the given string with escapes for all non-printable\nand non-ASCII characters.\n\n\nfun box  \n_string\n(d: ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n box) | \nJsonObject\n box), indent: \nString\n val): \nString\n val\n\n\nGenerate string representation of the given data.", 
            "title": "primitive _JsonPrint"
        }, 
        {
            "location": "/json-_JsonPrint/#primitive-json_jsonprint", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive json/_JsonPrint"
        }, 
        {
            "location": "/json-_JsonPrint/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_JsonPrint/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_JsonPrint/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_JsonPrint/#fun-box-eqthat-_jsonprint-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _JsonPrint val): Bool val"
        }, 
        {
            "location": "/json-_JsonPrint/#fun-box-nethat-_jsonprint-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _JsonPrint val): Bool val"
        }, 
        {
            "location": "/json-_JsonPrint/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/json-_JsonPrint/#fun-box-escapedstrings-string-val-string-val", 
            "text": "Generate a version of the given string with escapes for all non-printable\nand non-ASCII characters.", 
            "title": "fun box  escapedstring(s: String val): String val"
        }, 
        {
            "location": "/json-_JsonPrint/#fun-box-_stringd-f64-val-i64-val-bool-val-none-val-string-val-jsonarray-box-jsonobject-box-indent-string-val-string-val", 
            "text": "Generate string representation of the given data.", 
            "title": "fun box  _string(d: ((((((F64 val | I64 val) | Bool val) | None val) | String val) | JsonArray box) | JsonObject box), indent: String val): String val"
        }, 
        {
            "location": "/json-JsonType/", 
            "text": "type json/JsonType is ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref)\n\n\nAll JSON data types.", 
            "title": "type JsonType"
        }, 
        {
            "location": "/json-JsonType/#type-jsonjsontype-is-f64-val-i64-val-bool-val-none-val-string-val-jsonarray-ref-jsonobject-ref", 
            "text": "All JSON data types.", 
            "title": "type json/JsonType is ((((((F64 val | I64 val) | Bool val) | None val) | String val) | JsonArray ref) | JsonObject ref)"
        }, 
        {
            "location": "/json-Main/", 
            "text": "actor json/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/json-Main/#actor-jsonmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor json/Main is TestList ref"
        }, 
        {
            "location": "/json-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/json-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/json-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/json-_TestParseArray/", 
            "text": "class json/_TestParseArray is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json parsing of arrays.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestParseArray"
        }, 
        {
            "location": "/json-_TestParseArray/#class-json_testparsearray-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json parsing of arrays.", 
            "title": "class json/_TestParseArray is UnitTest ref"
        }, 
        {
            "location": "/json-_TestParseArray/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestParseArray/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestParseArray/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestParseArray/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/json-_TestParseArray/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestParseArray/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestParseArray/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseArray/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseBasic/", 
            "text": "class json/_TestParseBasic is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json basic parsing, eg allowing whitespace.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestParseBasic"
        }, 
        {
            "location": "/json-_TestParseBasic/#class-json_testparsebasic-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json basic parsing, eg allowing whitespace.", 
            "title": "class json/_TestParseBasic is UnitTest ref"
        }, 
        {
            "location": "/json-_TestParseBasic/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestParseBasic/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestParseBasic/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestParseBasic/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/json-_TestParseBasic/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestParseBasic/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestParseBasic/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseBasic/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseKeyword/", 
            "text": "class json/_TestParseKeyword is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json parsing of keywords.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestParseKeyword"
        }, 
        {
            "location": "/json-_TestParseKeyword/#class-json_testparsekeyword-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json parsing of keywords.", 
            "title": "class json/_TestParseKeyword is UnitTest ref"
        }, 
        {
            "location": "/json-_TestParseKeyword/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestParseKeyword/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestParseKeyword/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestParseKeyword/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/json-_TestParseKeyword/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestParseKeyword/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestParseKeyword/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseKeyword/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseNumber/", 
            "text": "class json/_TestParseNumber is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json parsing of numbers.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestParseNumber"
        }, 
        {
            "location": "/json-_TestParseNumber/#class-json_testparsenumber-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json parsing of numbers.", 
            "title": "class json/_TestParseNumber is UnitTest ref"
        }, 
        {
            "location": "/json-_TestParseNumber/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestParseNumber/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestParseNumber/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestParseNumber/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/json-_TestParseNumber/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestParseNumber/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestParseNumber/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseNumber/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseObject/", 
            "text": "class json/_TestParseObject is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json parsing of objects.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestParseObject"
        }, 
        {
            "location": "/json-_TestParseObject/#class-json_testparseobject-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json parsing of objects.", 
            "title": "class json/_TestParseObject is UnitTest ref"
        }, 
        {
            "location": "/json-_TestParseObject/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestParseObject/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestParseObject/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestParseObject/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/json-_TestParseObject/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestParseObject/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestParseObject/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseObject/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParsePrint/", 
            "text": "class json/_TestParsePrint is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json parsing a complex example and then reprinting it.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestParsePrint"
        }, 
        {
            "location": "/json-_TestParsePrint/#class-json_testparseprint-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json parsing a complex example and then reprinting it.", 
            "title": "class json/_TestParsePrint is UnitTest ref"
        }, 
        {
            "location": "/json-_TestParsePrint/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestParsePrint/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestParsePrint/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestParsePrint/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/json-_TestParsePrint/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestParsePrint/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestParsePrint/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParsePrint/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseRFC1/", 
            "text": "class json/_TestParseRFC1 is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json parsing of first example from RFC7159.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestParseRFC1"
        }, 
        {
            "location": "/json-_TestParseRFC1/#class-json_testparserfc1-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json parsing of first example from RFC7159.", 
            "title": "class json/_TestParseRFC1 is UnitTest ref"
        }, 
        {
            "location": "/json-_TestParseRFC1/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestParseRFC1/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestParseRFC1/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestParseRFC1/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/json-_TestParseRFC1/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestParseRFC1/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestParseRFC1/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseRFC1/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseRFC2/", 
            "text": "class json/_TestParseRFC2 is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json parsing of second example from RFC7159.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestParseRFC2"
        }, 
        {
            "location": "/json-_TestParseRFC2/#class-json_testparserfc2-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json parsing of second example from RFC7159.", 
            "title": "class json/_TestParseRFC2 is UnitTest ref"
        }, 
        {
            "location": "/json-_TestParseRFC2/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestParseRFC2/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestParseRFC2/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestParseRFC2/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/json-_TestParseRFC2/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestParseRFC2/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestParseRFC2/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseRFC2/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseString/", 
            "text": "class json/_TestParseString is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json parsing of strings.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestParseString"
        }, 
        {
            "location": "/json-_TestParseString/#class-json_testparsestring-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json parsing of strings.", 
            "title": "class json/_TestParseString is UnitTest ref"
        }, 
        {
            "location": "/json-_TestParseString/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestParseString/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestParseString/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestParseString/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/json-_TestParseString/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestParseString/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestParseString/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestParseString/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintArray/", 
            "text": "class json/_TestPrintArray is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json printing of arrays.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestPrintArray"
        }, 
        {
            "location": "/json-_TestPrintArray/#class-json_testprintarray-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json printing of arrays.", 
            "title": "class json/_TestPrintArray is UnitTest ref"
        }, 
        {
            "location": "/json-_TestPrintArray/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestPrintArray/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestPrintArray/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestPrintArray/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintArray/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestPrintArray/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestPrintArray/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintArray/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintKeyword/", 
            "text": "class json/_TestPrintKeyword is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json printing of keywords.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestPrintKeyword"
        }, 
        {
            "location": "/json-_TestPrintKeyword/#class-json_testprintkeyword-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json printing of keywords.", 
            "title": "class json/_TestPrintKeyword is UnitTest ref"
        }, 
        {
            "location": "/json-_TestPrintKeyword/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestPrintKeyword/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestPrintKeyword/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestPrintKeyword/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintKeyword/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestPrintKeyword/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestPrintKeyword/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintKeyword/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintNumber/", 
            "text": "class json/_TestPrintNumber is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json printing of numbers.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestPrintNumber"
        }, 
        {
            "location": "/json-_TestPrintNumber/#class-json_testprintnumber-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json printing of numbers.", 
            "title": "class json/_TestPrintNumber is UnitTest ref"
        }, 
        {
            "location": "/json-_TestPrintNumber/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestPrintNumber/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestPrintNumber/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestPrintNumber/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintNumber/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestPrintNumber/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestPrintNumber/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintNumber/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintObject/", 
            "text": "class json/_TestPrintObject is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json printing of objects.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestPrintObject"
        }, 
        {
            "location": "/json-_TestPrintObject/#class-json_testprintobject-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json printing of objects.", 
            "title": "class json/_TestPrintObject is UnitTest ref"
        }, 
        {
            "location": "/json-_TestPrintObject/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestPrintObject/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestPrintObject/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestPrintObject/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintObject/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestPrintObject/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestPrintObject/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintObject/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintString/", 
            "text": "class json/_TestPrintString is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest Json printing of strings.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestPrintString"
        }, 
        {
            "location": "/json-_TestPrintString/#class-json_testprintstring-is-unittest-ref", 
            "text": "Default capability :  iso  Test Json printing of strings.", 
            "title": "class json/_TestPrintString is UnitTest ref"
        }, 
        {
            "location": "/json-_TestPrintString/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_TestPrintString/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/json-_TestPrintString/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_TestPrintString/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintString/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/json-_TestPrintString/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/json-_TestPrintString/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/json-_TestPrintString/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/math--index/", 
            "text": "Math package\n\n\nGiven the name \nMath\n for this package, you'd expect it have a broad and grand\nscope. Surprise! Not currently. However, we do have the most useful of all\nprogramming language math constructs: fibonacci!\n\n\nPeople like to make fun of fibonacci but let's face it, no fibonacci, no\nbenchmarks. We hear from some of our engineer friends that math is very\nimportant to programming, we call upon that particular class of engineer friends\nto help us fill out this package with more maths than you can shake a stick at.\nBtw, in case you are wondering, yes we can shake a stick at a lot of maths.\n\n\nEntities\n\n\n\n\nclass Fibonacci", 
            "title": "Package"
        }, 
        {
            "location": "/math--index/#math-package", 
            "text": "Given the name  Math  for this package, you'd expect it have a broad and grand\nscope. Surprise! Not currently. However, we do have the most useful of all\nprogramming language math constructs: fibonacci!  People like to make fun of fibonacci but let's face it, no fibonacci, no\nbenchmarks. We hear from some of our engineer friends that math is very\nimportant to programming, we call upon that particular class of engineer friends\nto help us fill out this package with more maths than you can shake a stick at.\nBtw, in case you are wondering, yes we can shake a stick at a lot of maths.", 
            "title": "Math package"
        }, 
        {
            "location": "/math--index/#entities", 
            "text": "class Fibonacci", 
            "title": "Entities"
        }, 
        {
            "location": "/math-Fibonacci/", 
            "text": "class math/Fibonacci[optional A: (\nInteger\n[A val] val \n ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val))] is \nIterator\n[A val] ref\n\n\nDefault capability\n: \nref\n\n\nUseful for microbenchmarks to impress your friends. Look y'all, Pony goes\nfast! We suppose if you are into Agile planning poker that you could also\nuse this in conjunction with \nRandom\n to assign User Story Points.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(n: \nU8\n val): A val\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nfun ref  \nnext\n(): A val", 
            "title": "class Fibonacci"
        }, 
        {
            "location": "/math-Fibonacci/#class-mathfibonacci91optional-a-integer91a-val93-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93-is-iterator91a-val93-ref", 
            "text": "Default capability :  ref  Useful for microbenchmarks to impress your friends. Look y'all, Pony goes\nfast! We suppose if you are into Agile planning poker that you could also\nuse this in conjunction with  Random  to assign User Story Points.", 
            "title": "class math/Fibonacci[optional A: (Integer[A val] val &amp; ((((((U8 val | U16 val) | U32 val) | U64 val) | U128 val) | ULong val) | USize val))] is Iterator[A val] ref"
        }, 
        {
            "location": "/math-Fibonacci/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/math-Fibonacci/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/math-Fibonacci/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/math-Fibonacci/#fun-box-applyn-u8-val-a-val", 
            "text": "", 
            "title": "fun box  apply(n: U8 val): A val"
        }, 
        {
            "location": "/math-Fibonacci/#fun-box-has_next-bool-val", 
            "text": "", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/math-Fibonacci/#fun-ref-next-a-val", 
            "text": "", 
            "title": "fun ref  next(): A val"
        }, 
        {
            "location": "/net--index/", 
            "text": "No package doc string provided for net.\n\n\nEntities\n\n\n\n\nclass Buffer\n\n\nprimitive DNS\n\n\nclass IPAddress\n\n\nactor Main\n\n\nactor TCPConnection\n\n\ninterface TCPConnectionNotify\n\n\ninterface TCPListenNotify\n\n\nactor TCPListener\n\n\nclass _TestBroadcast\n\n\nactor _TestBroadcastMgr\n\n\nclass _TestBuffer\n\n\nclass _TestPing\n\n\nclass _TestPong\n\n\ninterface UDPNotify\n\n\nactor UDPSocket", 
            "title": "Package"
        }, 
        {
            "location": "/net--index/#entities", 
            "text": "class Buffer  primitive DNS  class IPAddress  actor Main  actor TCPConnection  interface TCPConnectionNotify  interface TCPListenNotify  actor TCPListener  class _TestBroadcast  actor _TestBroadcastMgr  class _TestBuffer  class _TestPing  class _TestPong  interface UDPNotify  actor UDPSocket", 
            "title": "Entities"
        }, 
        {
            "location": "/net-Buffer/", 
            "text": "class net/Buffer\n\n\nDefault capability\n: \nref\n\n\nStore network data and provide a parsing interface.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun ref  \nappend\n(data: \nArray\n[\nU8\n val] val): \nBuffer\n ref^\n\n\nAdd a chunk of data.\n\n\nfun ref  \nblock\n(len: \nUSize\n val): \nArray\n[\nU8\n val] iso^ ?\n\n\nReturn a block as a contiguous chunk of memory.\n\n\nfun ref  \nclear\n(): \nBuffer\n ref^\n\n\nDiscard all pending data.\n\n\nfun ref  \nf32_be\n(): \nF32\n val ?\n\n\nGet a big-endian F32.\n\n\nfun ref  \nf32_le\n(): \nF32\n val ?\n\n\nGet a little-endian F32.\n\n\nfun ref  \nf64_be\n(): \nF64\n val ?\n\n\nGet a big-endian F64.\n\n\nfun ref  \nf64_le\n(): \nF64\n val ?\n\n\nGet a little-endian F64.\n\n\nfun ref  \ni128_be\n(): \nI128\n val ?\n\n\nGet a big-endian I129.\n\n\nfun ref  \ni128_le\n(): \nI128\n val ?\n\n\nGet a little-endian I128.\n\n\nfun ref  \ni16_be\n(): \nI16\n val ?\n\n\nGet a big-endian I16.\n\n\nfun ref  \ni16_le\n(): \nI16\n val ?\n\n\nGet a little-endian I16.\n\n\nfun ref  \ni32_be\n(): \nI32\n val ?\n\n\nGet a big-endian I32.\n\n\nfun ref  \ni32_le\n(): \nI32\n val ?\n\n\nGet a little-endian I32.\n\n\nfun ref  \ni64_be\n(): \nI64\n val ?\n\n\nGet a big-endian I64.\n\n\nfun ref  \ni64_le\n(): \nI64\n val ?\n\n\nGet a little-endian I64.\n\n\nfun ref  \ni8\n(): \nI8\n val ?\n\n\nGet an I8.\n\n\nfun ref  \nline\n(): \nString\n val ?\n\n\nReturn a \\n or \\r\\n terminated line as a string. The newline is not\nincluded in the returned string, but it is removed from the network buffer.\n\n\nfun box  \npeek_f32_be\n(optional offset: \nUSize\n val): \nF32\n val ?\n\n\nPeek at a big-endian F32.\n\n\nfun box  \npeek_f32_le\n(optional offset: \nUSize\n val): \nF32\n val ?\n\n\nPeek at a little-endian F32.\n\n\nfun box  \npeek_f64_be\n(optional offset: \nUSize\n val): \nF64\n val ?\n\n\nPeek at a big-endian F64.\n\n\nfun box  \npeek_f64_le\n(optional offset: \nUSize\n val): \nF64\n val ?\n\n\nPeek at a little-endian F64.\n\n\nfun box  \npeek_i128_be\n(optional offset: \nUSize\n val): \nI128\n val ?\n\n\nPeek at a big-endian I129.\n\n\nfun box  \npeek_i128_le\n(optional offset: \nUSize\n val): \nI128\n val ?\n\n\nPeek at a little-endian I128.\n\n\nfun box  \npeek_i16_be\n(optional offset: \nUSize\n val): \nI16\n val ?\n\n\nPeek at a big-endian I16.\n\n\nfun box  \npeek_i16_le\n(optional offset: \nUSize\n val): \nI16\n val ?\n\n\nPeek at a little-endian I16.\n\n\nfun box  \npeek_i32_be\n(optional offset: \nUSize\n val): \nI32\n val ?\n\n\nPeek at a big-endian I32.\n\n\nfun box  \npeek_i32_le\n(optional offset: \nUSize\n val): \nI32\n val ?\n\n\nPeek at a little-endian I32.\n\n\nfun box  \npeek_i64_be\n(optional offset: \nUSize\n val): \nI64\n val ?\n\n\nPeek at a big-endian I64.\n\n\nfun box  \npeek_i64_le\n(optional offset: \nUSize\n val): \nI64\n val ?\n\n\nPeek at a little-endian I64.\n\n\nfun box  \npeek_i8\n(optional offset: \nUSize\n val): \nI8\n val ?\n\n\nPeek at an I8.\n\n\nfun box  \npeek_u128_be\n(optional offset: \nUSize\n val): \nU128\n val ?\n\n\nPeek at a big-endian U128.\n\n\nfun box  \npeek_u128_le\n(optional offset: \nUSize\n val): \nU128\n val ?\n\n\nPeek at a little-endian U128.\n\n\nfun box  \npeek_u16_be\n(optional offset: \nUSize\n val): \nU16\n val ?\n\n\nPeek at a big-endian U16.\n\n\nfun box  \npeek_u16_le\n(optional offset: \nUSize\n val): \nU16\n val ?\n\n\nPeek at a little-endian U16.\n\n\nfun box  \npeek_u32_be\n(optional offset: \nUSize\n val): \nU32\n val ?\n\n\nPeek at a big-endian U32.\n\n\nfun box  \npeek_u32_le\n(optional offset: \nUSize\n val): \nU32\n val ?\n\n\nPeek at a little-endian U32.\n\n\nfun box  \npeek_u64_be\n(optional offset: \nUSize\n val): \nU64\n val ?\n\n\nPeek at a big-endian U64.\n\n\nfun box  \npeek_u64_le\n(optional offset: \nUSize\n val): \nU64\n val ?\n\n\nPeek at a little-endian U64.\n\n\nfun box  \npeek_u8\n(optional offset: \nUSize\n val): \nU8\n val ?\n\n\nPeek at a U8 at the given offset. Raise an error if there isn't enough\ndata.\n\n\nfun box  \nsize\n(): \nUSize\n val\n\n\nReturn the number of available bytes.\n\n\nfun ref  \nskip\n(n: \nUSize\n val): \nBuffer\n ref^ ?\n\n\nSkip n bytes.\n\n\nfun ref  \nu128_be\n(): \nU128\n val ?\n\n\nGet a big-endian U128.\n\n\nfun ref  \nu128_le\n(): \nU128\n val ?\n\n\nGet a little-endian U128.\n\n\nfun ref  \nu16_be\n(): \nU16\n val ?\n\n\nGet a big-endian U16.\n\n\nfun ref  \nu16_le\n(): \nU16\n val ?\n\n\nGet a little-endian U16.\n\n\nfun ref  \nu32_be\n(): \nU32\n val ?\n\n\nGet a big-endian U32.\n\n\nfun ref  \nu32_le\n(): \nU32\n val ?\n\n\nGet a little-endian U32.\n\n\nfun ref  \nu64_be\n(): \nU64\n val ?\n\n\nGet a big-endian U64.\n\n\nfun ref  \nu64_le\n(): \nU64\n val ?\n\n\nGet a little-endian U64.\n\n\nfun ref  \nu8\n(): \nU8\n val ?\n\n\nGet a U8. Raise an error if there isn't enough data.\n\n\nPrivate Functions\n\n\nfun ref  \n_byte\n(): \nU8\n val ?\n\n\nGet a single byte.\n\n\nfun ref  \nline\nlength\n(): \nUSize\n val ?\n\n\nGet the length of a pending line. Raise an error if there is no pending\nline.\n\n\nfun box  \npeek\nbyte\n(optional offset: \nUSize\n val): \nU8\n val ?\n\n\nGet the byte at the given offset without moving the cursor forward.\nRaise an error if the given offset is not yet available.", 
            "title": "class Buffer"
        }, 
        {
            "location": "/net-Buffer/#class-netbuffer", 
            "text": "Default capability :  ref  Store network data and provide a parsing interface.", 
            "title": "class net/Buffer"
        }, 
        {
            "location": "/net-Buffer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-Buffer/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-Buffer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-appenddata-array91u8-val93-val-buffer-ref", 
            "text": "Add a chunk of data.", 
            "title": "fun ref  append(data: Array[U8 val] val): Buffer ref^"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-blocklen-usize-val-array91u8-val93-iso", 
            "text": "Return a block as a contiguous chunk of memory.", 
            "title": "fun ref  block(len: USize val): Array[U8 val] iso^ ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-clear-buffer-ref", 
            "text": "Discard all pending data.", 
            "title": "fun ref  clear(): Buffer ref^"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-f32_be-f32-val", 
            "text": "Get a big-endian F32.", 
            "title": "fun ref  f32_be(): F32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-f32_le-f32-val", 
            "text": "Get a little-endian F32.", 
            "title": "fun ref  f32_le(): F32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-f64_be-f64-val", 
            "text": "Get a big-endian F64.", 
            "title": "fun ref  f64_be(): F64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-f64_le-f64-val", 
            "text": "Get a little-endian F64.", 
            "title": "fun ref  f64_le(): F64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-i128_be-i128-val", 
            "text": "Get a big-endian I129.", 
            "title": "fun ref  i128_be(): I128 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-i128_le-i128-val", 
            "text": "Get a little-endian I128.", 
            "title": "fun ref  i128_le(): I128 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-i16_be-i16-val", 
            "text": "Get a big-endian I16.", 
            "title": "fun ref  i16_be(): I16 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-i16_le-i16-val", 
            "text": "Get a little-endian I16.", 
            "title": "fun ref  i16_le(): I16 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-i32_be-i32-val", 
            "text": "Get a big-endian I32.", 
            "title": "fun ref  i32_be(): I32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-i32_le-i32-val", 
            "text": "Get a little-endian I32.", 
            "title": "fun ref  i32_le(): I32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-i64_be-i64-val", 
            "text": "Get a big-endian I64.", 
            "title": "fun ref  i64_be(): I64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-i64_le-i64-val", 
            "text": "Get a little-endian I64.", 
            "title": "fun ref  i64_le(): I64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-i8-i8-val", 
            "text": "Get an I8.", 
            "title": "fun ref  i8(): I8 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-line-string-val", 
            "text": "Return a \\n or \\r\\n terminated line as a string. The newline is not\nincluded in the returned string, but it is removed from the network buffer.", 
            "title": "fun ref  line(): String val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_f32_beoptional-offset-usize-val-f32-val", 
            "text": "Peek at a big-endian F32.", 
            "title": "fun box  peek_f32_be(optional offset: USize val): F32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_f32_leoptional-offset-usize-val-f32-val", 
            "text": "Peek at a little-endian F32.", 
            "title": "fun box  peek_f32_le(optional offset: USize val): F32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_f64_beoptional-offset-usize-val-f64-val", 
            "text": "Peek at a big-endian F64.", 
            "title": "fun box  peek_f64_be(optional offset: USize val): F64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_f64_leoptional-offset-usize-val-f64-val", 
            "text": "Peek at a little-endian F64.", 
            "title": "fun box  peek_f64_le(optional offset: USize val): F64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_i128_beoptional-offset-usize-val-i128-val", 
            "text": "Peek at a big-endian I129.", 
            "title": "fun box  peek_i128_be(optional offset: USize val): I128 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_i128_leoptional-offset-usize-val-i128-val", 
            "text": "Peek at a little-endian I128.", 
            "title": "fun box  peek_i128_le(optional offset: USize val): I128 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_i16_beoptional-offset-usize-val-i16-val", 
            "text": "Peek at a big-endian I16.", 
            "title": "fun box  peek_i16_be(optional offset: USize val): I16 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_i16_leoptional-offset-usize-val-i16-val", 
            "text": "Peek at a little-endian I16.", 
            "title": "fun box  peek_i16_le(optional offset: USize val): I16 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_i32_beoptional-offset-usize-val-i32-val", 
            "text": "Peek at a big-endian I32.", 
            "title": "fun box  peek_i32_be(optional offset: USize val): I32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_i32_leoptional-offset-usize-val-i32-val", 
            "text": "Peek at a little-endian I32.", 
            "title": "fun box  peek_i32_le(optional offset: USize val): I32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_i64_beoptional-offset-usize-val-i64-val", 
            "text": "Peek at a big-endian I64.", 
            "title": "fun box  peek_i64_be(optional offset: USize val): I64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_i64_leoptional-offset-usize-val-i64-val", 
            "text": "Peek at a little-endian I64.", 
            "title": "fun box  peek_i64_le(optional offset: USize val): I64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_i8optional-offset-usize-val-i8-val", 
            "text": "Peek at an I8.", 
            "title": "fun box  peek_i8(optional offset: USize val): I8 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_u128_beoptional-offset-usize-val-u128-val", 
            "text": "Peek at a big-endian U128.", 
            "title": "fun box  peek_u128_be(optional offset: USize val): U128 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_u128_leoptional-offset-usize-val-u128-val", 
            "text": "Peek at a little-endian U128.", 
            "title": "fun box  peek_u128_le(optional offset: USize val): U128 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_u16_beoptional-offset-usize-val-u16-val", 
            "text": "Peek at a big-endian U16.", 
            "title": "fun box  peek_u16_be(optional offset: USize val): U16 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_u16_leoptional-offset-usize-val-u16-val", 
            "text": "Peek at a little-endian U16.", 
            "title": "fun box  peek_u16_le(optional offset: USize val): U16 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_u32_beoptional-offset-usize-val-u32-val", 
            "text": "Peek at a big-endian U32.", 
            "title": "fun box  peek_u32_be(optional offset: USize val): U32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_u32_leoptional-offset-usize-val-u32-val", 
            "text": "Peek at a little-endian U32.", 
            "title": "fun box  peek_u32_le(optional offset: USize val): U32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_u64_beoptional-offset-usize-val-u64-val", 
            "text": "Peek at a big-endian U64.", 
            "title": "fun box  peek_u64_be(optional offset: USize val): U64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_u64_leoptional-offset-usize-val-u64-val", 
            "text": "Peek at a little-endian U64.", 
            "title": "fun box  peek_u64_le(optional offset: USize val): U64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peek_u8optional-offset-usize-val-u8-val", 
            "text": "Peek at a U8 at the given offset. Raise an error if there isn't enough\ndata.", 
            "title": "fun box  peek_u8(optional offset: USize val): U8 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-size-usize-val", 
            "text": "Return the number of available bytes.", 
            "title": "fun box  size(): USize val"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-skipn-usize-val-buffer-ref", 
            "text": "Skip n bytes.", 
            "title": "fun ref  skip(n: USize val): Buffer ref^ ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-u128_be-u128-val", 
            "text": "Get a big-endian U128.", 
            "title": "fun ref  u128_be(): U128 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-u128_le-u128-val", 
            "text": "Get a little-endian U128.", 
            "title": "fun ref  u128_le(): U128 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-u16_be-u16-val", 
            "text": "Get a big-endian U16.", 
            "title": "fun ref  u16_be(): U16 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-u16_le-u16-val", 
            "text": "Get a little-endian U16.", 
            "title": "fun ref  u16_le(): U16 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-u32_be-u32-val", 
            "text": "Get a big-endian U32.", 
            "title": "fun ref  u32_be(): U32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-u32_le-u32-val", 
            "text": "Get a little-endian U32.", 
            "title": "fun ref  u32_le(): U32 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-u64_be-u64-val", 
            "text": "Get a big-endian U64.", 
            "title": "fun ref  u64_be(): U64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-u64_le-u64-val", 
            "text": "Get a little-endian U64.", 
            "title": "fun ref  u64_le(): U64 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-u8-u8-val", 
            "text": "Get a U8. Raise an error if there isn't enough data.", 
            "title": "fun ref  u8(): U8 val ?"
        }, 
        {
            "location": "/net-Buffer/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-_byte-u8-val", 
            "text": "Get a single byte.", 
            "title": "fun ref  _byte(): U8 val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-ref-linelength-usize-val", 
            "text": "Get the length of a pending line. Raise an error if there is no pending\nline.", 
            "title": "fun ref  linelength(): USize val ?"
        }, 
        {
            "location": "/net-Buffer/#fun-box-peekbyteoptional-offset-usize-val-u8-val", 
            "text": "Get the byte at the given offset without moving the cursor forward.\nRaise an error if the given offset is not yet available.", 
            "title": "fun box  peekbyte(optional offset: USize val): U8 val ?"
        }, 
        {
            "location": "/net-DNS/", 
            "text": "primitive net/DNS\n\n\nDefault capability\n: \nval\n\n\nHelper functions for resolving DNS queries.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(host: \nString\n val, service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nGets all IPv4 and IPv6 addresses for a host and service.\n\n\nfun box  \nbroadcast_ip4\n(service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nLink-local IP4 broadcast address.\n\n\nfun box  \nbroadcast_ip6\n(service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nLink-local IP6 broadcast address.\n\n\nfun box  \neq\n(that: \nDNS\n val): \nBool\n val\n\n\nfun box  \nip4\n(host: \nString\n val, service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nGets all IPv4 addresses for a host and service.\n\n\nfun box  \nip6\n(host: \nString\n val, service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nGets all IPv6 addresses for a host and service.\n\n\nfun box  \nis_ip4\n(host: \nString\n val): \nBool\n val\n\n\nReturns true if the host is a literal IPv4 address.\n\n\nfun box  \nis_ip6\n(host: \nString\n val): \nBool\n val\n\n\nReturns true if the host is a literal IPv6 address.\n\n\nfun box  \nne\n(that: \nDNS\n val): \nBool\n val\n\n\nPrivate Functions\n\n\nfun box  \n_resolve\n(family: \nU32\n val, host: \nString\n val, service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nTurns an addrinfo pointer into an array of addresses.", 
            "title": "primitive DNS"
        }, 
        {
            "location": "/net-DNS/#primitive-netdns", 
            "text": "Default capability :  val  Helper functions for resolving DNS queries.", 
            "title": "primitive net/DNS"
        }, 
        {
            "location": "/net-DNS/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-DNS/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-DNS/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-DNS/#fun-box-applyhost-string-val-service-string-val-array91ipaddress-val93-iso", 
            "text": "Gets all IPv4 and IPv6 addresses for a host and service.", 
            "title": "fun box  apply(host: String val, service: String val): Array[IPAddress val] iso^"
        }, 
        {
            "location": "/net-DNS/#fun-box-broadcast_ip4service-string-val-array91ipaddress-val93-iso", 
            "text": "Link-local IP4 broadcast address.", 
            "title": "fun box  broadcast_ip4(service: String val): Array[IPAddress val] iso^"
        }, 
        {
            "location": "/net-DNS/#fun-box-broadcast_ip6service-string-val-array91ipaddress-val93-iso", 
            "text": "Link-local IP6 broadcast address.", 
            "title": "fun box  broadcast_ip6(service: String val): Array[IPAddress val] iso^"
        }, 
        {
            "location": "/net-DNS/#fun-box-eqthat-dns-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: DNS val): Bool val"
        }, 
        {
            "location": "/net-DNS/#fun-box-ip4host-string-val-service-string-val-array91ipaddress-val93-iso", 
            "text": "Gets all IPv4 addresses for a host and service.", 
            "title": "fun box  ip4(host: String val, service: String val): Array[IPAddress val] iso^"
        }, 
        {
            "location": "/net-DNS/#fun-box-ip6host-string-val-service-string-val-array91ipaddress-val93-iso", 
            "text": "Gets all IPv6 addresses for a host and service.", 
            "title": "fun box  ip6(host: String val, service: String val): Array[IPAddress val] iso^"
        }, 
        {
            "location": "/net-DNS/#fun-box-is_ip4host-string-val-bool-val", 
            "text": "Returns true if the host is a literal IPv4 address.", 
            "title": "fun box  is_ip4(host: String val): Bool val"
        }, 
        {
            "location": "/net-DNS/#fun-box-is_ip6host-string-val-bool-val", 
            "text": "Returns true if the host is a literal IPv6 address.", 
            "title": "fun box  is_ip6(host: String val): Bool val"
        }, 
        {
            "location": "/net-DNS/#fun-box-nethat-dns-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: DNS val): Bool val"
        }, 
        {
            "location": "/net-DNS/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-DNS/#fun-box-_resolvefamily-u32-val-host-string-val-service-string-val-array91ipaddress-val93-iso", 
            "text": "Turns an addrinfo pointer into an array of addresses.", 
            "title": "fun box  _resolve(family: U32 val, host: String val, service: String val): Array[IPAddress val] iso^"
        }, 
        {
            "location": "/net-IPAddress/", 
            "text": "class net/IPAddress\n\n\nDefault capability\n: \nval\n\n\nRepresents an IPv4 or IPv6 address. The family field indicates the address\ntype. The addr field is either the IPv4 address or the IPv6 flow info. The\naddr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The\nscope field is the IPv6 scope, or invalid for an IPv4 address.\n\n\nPublic fields\n\n\n\n\nlet addr: \nU32\n val\n\n\nlet addr1: \nU32\n val\n\n\nlet addr2: \nU32\n val\n\n\nlet addr3: \nU32\n val\n\n\nlet addr4: \nU32\n val\n\n\nlet family: \nU8\n val\n\n\nlet length: \nU8\n val\n\n\nlet port: \nU16\n val\n\n\nlet scope: \nU32\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \nip4\n(): \nBool\n val\n\n\nReturns true for an IPv4 address.\n\n\nfun box  \nip6\n(): \nBool\n val\n\n\nReturns true for an IPv6 address.\n\n\nfun box  \nname\n(optional reversedns: \nBool\n val, optional servicename: \nBool\n val): (\nString\n val , \nString\n val) ?\n\n\nReturn the host and service name.", 
            "title": "class IPAddress"
        }, 
        {
            "location": "/net-IPAddress/#class-netipaddress", 
            "text": "Default capability :  val  Represents an IPv4 or IPv6 address. The family field indicates the address\ntype. The addr field is either the IPv4 address or the IPv6 flow info. The\naddr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The\nscope field is the IPv6 scope, or invalid for an IPv4 address.", 
            "title": "class net/IPAddress"
        }, 
        {
            "location": "/net-IPAddress/#public-fields", 
            "text": "let addr:  U32  val  let addr1:  U32  val  let addr2:  U32  val  let addr3:  U32  val  let addr4:  U32  val  let family:  U8  val  let length:  U8  val  let port:  U16  val  let scope:  U32  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/net-IPAddress/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-IPAddress/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-IPAddress/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-IPAddress/#fun-box-ip4-bool-val", 
            "text": "Returns true for an IPv4 address.", 
            "title": "fun box  ip4(): Bool val"
        }, 
        {
            "location": "/net-IPAddress/#fun-box-ip6-bool-val", 
            "text": "Returns true for an IPv6 address.", 
            "title": "fun box  ip6(): Bool val"
        }, 
        {
            "location": "/net-IPAddress/#fun-box-nameoptional-reversedns-bool-val-optional-servicename-bool-val-string-val-string-val", 
            "text": "Return the host and service name.", 
            "title": "fun box  name(optional reversedns: Bool val, optional servicename: Bool val): (String val , String val) ?"
        }, 
        {
            "location": "/net-Main/", 
            "text": "actor net/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/net-Main/#actor-netmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor net/Main is TestList ref"
        }, 
        {
            "location": "/net-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/net-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/net-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/net-TCPConnection/", 
            "text": "actor net/TCPConnection\n\n\nDefault capability\n: \ntag\n\n\nA TCP connection. When connecting, the Happy Eyeballs algorithm is used.\n\n\nConstructors\n\n\nnew \n_accept\n(listen: \nTCPListener\n tag, notify: \nTCPConnectionNotify\n iso, fd: \nU32\n val)\n\n\nnew \ncreate\n(notify: \nTCPConnectionNotify\n iso, host: \nString\n val, service: \nString\n val, optional from: \nString\n val)\n\n\nnew \nip4\n(notify: \nTCPConnectionNotify\n iso, host: \nString\n val, service: \nString\n val, optional from: \nString\n val)\n\n\nnew \nip6\n(notify: \nTCPConnectionNotify\n iso, host: \nString\n val, service: \nString\n val, optional from: \nString\n val)\n\n\nPublic Behaviours\n\n\nbe \ndispose\n()\n\n\nClose the connection gracefully once all writes are sent.\n\n\nbe \nset_notify\n(notify: \nTCPConnectionNotify\n iso)\n\n\nChange the notifier.\n\n\nbe \nwrite\n(data: (\nString\n val | \nArray\n[\nU8\n val] val))\n\n\nWrite a single sequence of bytes.\n\n\nbe \nwritev\n(data: \nByteSeqIter\n val)\n\n\nWrite a sequence of sequences of bytes.\n\n\nPublic Functions\n\n\nfun ref  \nclose\n(): \nNone\n val\n\n\nPerform a graceful shutdown. Don't accept new writes, but don't finish\nclosing until we get a zero length read.\n\n\nfun box  \nlocal_address\n(): \nIPAddress\n val\n\n\nReturn the local IP address.\n\n\nfun box  \nremote_address\n(): \nIPAddress\n val\n\n\nReturn the remote IP address.\n\n\nfun ref  \nset_keepalive\n(secs: \nU32\n val): \nNone\n val\n\n\nSets the TCP keepalive timeout to approximately secs seconds. Exact timing\nis OS dependent. If secs is zero, TCP keepalive is disabled. TCP keepalive\nis disabled by default. This can only be set on a connected socket.\n\n\nfun ref  \nset_nodelay\n(state: \nBool\n val): \nNone\n val\n\n\nTurn Nagle on/off. Defaults to on. This can only be set on a connected\nsocket.\n\n\nfun ref  \nwrite_final\n(data: (\nString\n val | \nArray\n[\nU8\n val] val)): \nNone\n val\n\n\nWrite as much as possible to the socket. Set _writeable to false if not\neverything was written. On an error, close the connection. This is for\ndata that has already been transformed by the notifier.\n\n\nPrivate Behaviours\n\n\nbe \nevent\nnotify\n(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nHandle socket events.\n\n\nbe \nread\nagain\n()\n\n\nResume reading.\n\n\nPrivate Functions\n\n\nfun ref  \ncomplete\nreads\n(len: \nU32\n val): \nNone\n val\n\n\nThe OS has informed as that len bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.\n\n\nfun ref  \ncomplete\nwrites\n(len: \nU32\n val): \nNone\n val\n\n\nThe OS has informed as that len bytes of pending writes have completed.\nThis occurs only with IOCP on Windows.\n\n\nfun ref  \nhard\nclose\n(): \nNone\n val\n\n\nWhen an error happens, do a non-graceful close.\n\n\nfun ref  \nnotify\nconnecting\n(): \nNone\n val\n\n\nInform the notifier that we're connecting.\n\n\nfun ref  \npending\nreads\n(): \nNone\n val\n\n\nRead while data is available, guessing the next packet length as we go. If\nwe read 4 kb of data, send ourself a resume message and stop reading, to\navoid starving other actors.\n\n\nfun ref  \npending\nwrites\n(): \nNone\n val\n\n\nSend pending data. If any data can't be sent, keep it and mark as not\nwriteable. On an error, dispose of the connection.\n\n\nfun ref  \nqueue\nread\n(): \nNone\n val\n\n\nQueue an IOCP read on Windows.\n\n\nfun ref  \ntry\nshutdown\n(): \nNone\n val\n\n\nIf we have closed and we have no remaining writes or pending connections,\nthen shutdown.", 
            "title": "actor TCPConnection"
        }, 
        {
            "location": "/net-TCPConnection/#actor-nettcpconnection", 
            "text": "Default capability :  tag  A TCP connection. When connecting, the Happy Eyeballs algorithm is used.", 
            "title": "actor net/TCPConnection"
        }, 
        {
            "location": "/net-TCPConnection/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-TCPConnection/#new-_acceptlisten-tcplistener-tag-notify-tcpconnectionnotify-iso-fd-u32-val", 
            "text": "", 
            "title": "new _accept(listen: TCPListener tag, notify: TCPConnectionNotify iso, fd: U32 val)"
        }, 
        {
            "location": "/net-TCPConnection/#new-createnotify-tcpconnectionnotify-iso-host-string-val-service-string-val-optional-from-string-val", 
            "text": "", 
            "title": "new create(notify: TCPConnectionNotify iso, host: String val, service: String val, optional from: String val)"
        }, 
        {
            "location": "/net-TCPConnection/#new-ip4notify-tcpconnectionnotify-iso-host-string-val-service-string-val-optional-from-string-val", 
            "text": "", 
            "title": "new ip4(notify: TCPConnectionNotify iso, host: String val, service: String val, optional from: String val)"
        }, 
        {
            "location": "/net-TCPConnection/#new-ip6notify-tcpconnectionnotify-iso-host-string-val-service-string-val-optional-from-string-val", 
            "text": "", 
            "title": "new ip6(notify: TCPConnectionNotify iso, host: String val, service: String val, optional from: String val)"
        }, 
        {
            "location": "/net-TCPConnection/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-TCPConnection/#be-dispose", 
            "text": "Close the connection gracefully once all writes are sent.", 
            "title": "be dispose()"
        }, 
        {
            "location": "/net-TCPConnection/#be-set_notifynotify-tcpconnectionnotify-iso", 
            "text": "Change the notifier.", 
            "title": "be set_notify(notify: TCPConnectionNotify iso)"
        }, 
        {
            "location": "/net-TCPConnection/#be-writedata-string-val-array91u8-val93-val", 
            "text": "Write a single sequence of bytes.", 
            "title": "be write(data: (String val | Array[U8 val] val))"
        }, 
        {
            "location": "/net-TCPConnection/#be-writevdata-byteseqiter-val", 
            "text": "Write a sequence of sequences of bytes.", 
            "title": "be writev(data: ByteSeqIter val)"
        }, 
        {
            "location": "/net-TCPConnection/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-close-none-val", 
            "text": "Perform a graceful shutdown. Don't accept new writes, but don't finish\nclosing until we get a zero length read.", 
            "title": "fun ref  close(): None val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-box-local_address-ipaddress-val", 
            "text": "Return the local IP address.", 
            "title": "fun box  local_address(): IPAddress val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-box-remote_address-ipaddress-val", 
            "text": "Return the remote IP address.", 
            "title": "fun box  remote_address(): IPAddress val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-set_keepalivesecs-u32-val-none-val", 
            "text": "Sets the TCP keepalive timeout to approximately secs seconds. Exact timing\nis OS dependent. If secs is zero, TCP keepalive is disabled. TCP keepalive\nis disabled by default. This can only be set on a connected socket.", 
            "title": "fun ref  set_keepalive(secs: U32 val): None val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-set_nodelaystate-bool-val-none-val", 
            "text": "Turn Nagle on/off. Defaults to on. This can only be set on a connected\nsocket.", 
            "title": "fun ref  set_nodelay(state: Bool val): None val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-write_finaldata-string-val-array91u8-val93-val-none-val", 
            "text": "Write as much as possible to the socket. Set _writeable to false if not\neverything was written. On an error, close the connection. This is for\ndata that has already been transformed by the notifier.", 
            "title": "fun ref  write_final(data: (String val | Array[U8 val] val)): None val"
        }, 
        {
            "location": "/net-TCPConnection/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-TCPConnection/#be-eventnotifyevent-pointer91asioevent-val93-tag-flags-u32-val-arg-u32-val", 
            "text": "Handle socket events.", 
            "title": "be eventnotify(event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)"
        }, 
        {
            "location": "/net-TCPConnection/#be-readagain", 
            "text": "Resume reading.", 
            "title": "be readagain()"
        }, 
        {
            "location": "/net-TCPConnection/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-completereadslen-u32-val-none-val", 
            "text": "The OS has informed as that len bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.", 
            "title": "fun ref  completereads(len: U32 val): None val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-completewriteslen-u32-val-none-val", 
            "text": "The OS has informed as that len bytes of pending writes have completed.\nThis occurs only with IOCP on Windows.", 
            "title": "fun ref  completewrites(len: U32 val): None val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-hardclose-none-val", 
            "text": "When an error happens, do a non-graceful close.", 
            "title": "fun ref  hardclose(): None val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-notifyconnecting-none-val", 
            "text": "Inform the notifier that we're connecting.", 
            "title": "fun ref  notifyconnecting(): None val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-pendingreads-none-val", 
            "text": "Read while data is available, guessing the next packet length as we go. If\nwe read 4 kb of data, send ourself a resume message and stop reading, to\navoid starving other actors.", 
            "title": "fun ref  pendingreads(): None val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-pendingwrites-none-val", 
            "text": "Send pending data. If any data can't be sent, keep it and mark as not\nwriteable. On an error, dispose of the connection.", 
            "title": "fun ref  pendingwrites(): None val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-queueread-none-val", 
            "text": "Queue an IOCP read on Windows.", 
            "title": "fun ref  queueread(): None val"
        }, 
        {
            "location": "/net-TCPConnection/#fun-ref-tryshutdown-none-val", 
            "text": "If we have closed and we have no remaining writes or pending connections,\nthen shutdown.", 
            "title": "fun ref  tryshutdown(): None val"
        }, 
        {
            "location": "/net-TCPConnectionNotify/", 
            "text": "interface net/TCPConnectionNotify\n\n\nDefault capability\n: \nref\n\n\nNotifications for TCP connections.\n\n\nPublic Functions\n\n\nfun ref  \naccepted\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nCalled when a TCPConnection is accepted by a TCPListener.\n\n\nfun ref  \nauth_failed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nA raw TCPConnection has no authentication mechanism. However, when\nprotocols are wrapped in other protocols, this can be used to report an\nauthentication failure in a lower level protocol (eg. SSL).\n\n\nfun ref  \nclosed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nCalled when the connection is closed.\n\n\nfun ref  \nconnect_failed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nCalled when we have failed to connect to all possible addresses for the\nserver. At this point, the connection will never be established.\n\n\nfun ref  \nconnected\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nCalled when we have successfully connected to the server.\n\n\nfun ref  \nconnecting\n(conn: \nTCPConnection\n ref, count: \nU32\n val): \nNone\n val\n\n\nCalled if name resolution succeeded for a TCPConnection and we are now\nwaiting for a connection to the server to succeed. The count is the number\nof connections we're trying. The notifier will be informed each time the\ncount changes, until a connection is made or connect_failed() is called.\n\n\nfun ref  \nreceived\n(conn: \nTCPConnection\n ref, data: \nArray\n[\nU8\n val] iso): \nNone\n val\n\n\nCalled when new data is received on the connection.\n\n\nfun ref  \nsent\n(conn: \nTCPConnection\n ref, data: (\nString\n val | \nArray\n[\nU8\n val] val)): (\nString\n val | \nArray\n[\nU8\n val] val) ?\n\n\nCalled when data is sent on the connection. This gives the notifier an\nopportunity to modify sent data before it is written. The notifier can\nraise an error if the data is swallowed entirely.", 
            "title": "interface TCPConnectionNotify"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#interface-nettcpconnectionnotify", 
            "text": "Default capability :  ref  Notifications for TCP connections.", 
            "title": "interface net/TCPConnectionNotify"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#fun-ref-acceptedconn-tcpconnection-ref-none-val", 
            "text": "Called when a TCPConnection is accepted by a TCPListener.", 
            "title": "fun ref  accepted(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#fun-ref-auth_failedconn-tcpconnection-ref-none-val", 
            "text": "A raw TCPConnection has no authentication mechanism. However, when\nprotocols are wrapped in other protocols, this can be used to report an\nauthentication failure in a lower level protocol (eg. SSL).", 
            "title": "fun ref  auth_failed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#fun-ref-closedconn-tcpconnection-ref-none-val", 
            "text": "Called when the connection is closed.", 
            "title": "fun ref  closed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#fun-ref-connect_failedconn-tcpconnection-ref-none-val", 
            "text": "Called when we have failed to connect to all possible addresses for the\nserver. At this point, the connection will never be established.", 
            "title": "fun ref  connect_failed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#fun-ref-connectedconn-tcpconnection-ref-none-val", 
            "text": "Called when we have successfully connected to the server.", 
            "title": "fun ref  connected(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#fun-ref-connectingconn-tcpconnection-ref-count-u32-val-none-val", 
            "text": "Called if name resolution succeeded for a TCPConnection and we are now\nwaiting for a connection to the server to succeed. The count is the number\nof connections we're trying. The notifier will be informed each time the\ncount changes, until a connection is made or connect_failed() is called.", 
            "title": "fun ref  connecting(conn: TCPConnection ref, count: U32 val): None val"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#fun-ref-receivedconn-tcpconnection-ref-data-array91u8-val93-iso-none-val", 
            "text": "Called when new data is received on the connection.", 
            "title": "fun ref  received(conn: TCPConnection ref, data: Array[U8 val] iso): None val"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#fun-ref-sentconn-tcpconnection-ref-data-string-val-array91u8-val93-val-string-val-array91u8-val93-val", 
            "text": "Called when data is sent on the connection. This gives the notifier an\nopportunity to modify sent data before it is written. The notifier can\nraise an error if the data is swallowed entirely.", 
            "title": "fun ref  sent(conn: TCPConnection ref, data: (String val | Array[U8 val] val)): (String val | Array[U8 val] val) ?"
        }, 
        {
            "location": "/net-TCPListenNotify/", 
            "text": "interface net/TCPListenNotify\n\n\nDefault capability\n: \nref\n\n\nNotifications for TCP listeners.\n\n\nPublic Functions\n\n\nfun ref  \nclosed\n(listen: \nTCPListener\n ref): \nNone\n val\n\n\nCalled when the listener is closed.\n\n\nfun ref  \nconnected\n(listen: \nTCPListener\n ref): \nTCPConnectionNotify\n iso^ ?\n\n\nCreate a new TCPConnectionNotify to attach to a new TCPConnection for a\nnewly established connection to the server.\n\n\nfun ref  \nlistening\n(listen: \nTCPListener\n ref): \nNone\n val\n\n\nCalled when the listener has been bound to an address.\n\n\nfun ref  \nnot_listening\n(listen: \nTCPListener\n ref): \nNone\n val\n\n\nCalled if it wasn't possible to bind the listener to an address.", 
            "title": "interface TCPListenNotify"
        }, 
        {
            "location": "/net-TCPListenNotify/#interface-nettcplistennotify", 
            "text": "Default capability :  ref  Notifications for TCP listeners.", 
            "title": "interface net/TCPListenNotify"
        }, 
        {
            "location": "/net-TCPListenNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-TCPListenNotify/#fun-ref-closedlisten-tcplistener-ref-none-val", 
            "text": "Called when the listener is closed.", 
            "title": "fun ref  closed(listen: TCPListener ref): None val"
        }, 
        {
            "location": "/net-TCPListenNotify/#fun-ref-connectedlisten-tcplistener-ref-tcpconnectionnotify-iso", 
            "text": "Create a new TCPConnectionNotify to attach to a new TCPConnection for a\nnewly established connection to the server.", 
            "title": "fun ref  connected(listen: TCPListener ref): TCPConnectionNotify iso^ ?"
        }, 
        {
            "location": "/net-TCPListenNotify/#fun-ref-listeninglisten-tcplistener-ref-none-val", 
            "text": "Called when the listener has been bound to an address.", 
            "title": "fun ref  listening(listen: TCPListener ref): None val"
        }, 
        {
            "location": "/net-TCPListenNotify/#fun-ref-not_listeninglisten-tcplistener-ref-none-val", 
            "text": "Called if it wasn't possible to bind the listener to an address.", 
            "title": "fun ref  not_listening(listen: TCPListener ref): None val"
        }, 
        {
            "location": "/net-TCPListener/", 
            "text": "actor net/TCPListener\n\n\nDefault capability\n: \ntag\n\n\nListens for new network connections.\n\n\nConstructors\n\n\nnew \ncreate\n(notify: \nTCPListenNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional limit: \nUSize\n val)\n\n\nnew \nip4\n(notify: \nTCPListenNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional limit: \nUSize\n val)\n\n\nnew \nip6\n(notify: \nTCPListenNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional limit: \nUSize\n val)\n\n\nPublic Behaviours\n\n\nbe \ndispose\n()\n\n\nStop listening.\n\n\nbe \nset_notify\n(notify: \nTCPListenNotify\n iso)\n\n\nChange the notifier.\n\n\nPublic Functions\n\n\nfun ref  \nclose\n(): \nNone\n val\n\n\nDispose of resources.\n\n\nfun box  \nlocal_address\n(): \nIPAddress\n val\n\n\nReturn the bound IP address.\n\n\nPrivate Behaviours\n\n\nbe \nconn\nclosed\n()\n\n\nAn accepted connection has closed. If we have dropped below the limit, try\nto accept new connections.\n\n\nbe \nevent\nnotify\n(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nWhen we are readable, we accept new connections until none remain.\n\n\nPrivate Functions\n\n\nfun ref  \n_accept\n(optional ns: \nU32\n val): \nNone\n val\n\n\nAccept connections as long as we have spawned fewer than our limit.\n\n\nfun ref  \nnotify\nlistening\n(): \nNone\n val\n\n\nInform the notifier that we're listening.\n\n\nfun ref  \n_spawn\n(ns: \nU32\n val): \nNone\n val\n\n\nSpawn a new connection.", 
            "title": "actor TCPListener"
        }, 
        {
            "location": "/net-TCPListener/#actor-nettcplistener", 
            "text": "Default capability :  tag  Listens for new network connections.", 
            "title": "actor net/TCPListener"
        }, 
        {
            "location": "/net-TCPListener/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-TCPListener/#new-createnotify-tcplistennotify-iso-optional-host-string-val-optional-service-string-val-optional-limit-usize-val", 
            "text": "", 
            "title": "new create(notify: TCPListenNotify iso, optional host: String val, optional service: String val, optional limit: USize val)"
        }, 
        {
            "location": "/net-TCPListener/#new-ip4notify-tcplistennotify-iso-optional-host-string-val-optional-service-string-val-optional-limit-usize-val", 
            "text": "", 
            "title": "new ip4(notify: TCPListenNotify iso, optional host: String val, optional service: String val, optional limit: USize val)"
        }, 
        {
            "location": "/net-TCPListener/#new-ip6notify-tcplistennotify-iso-optional-host-string-val-optional-service-string-val-optional-limit-usize-val", 
            "text": "", 
            "title": "new ip6(notify: TCPListenNotify iso, optional host: String val, optional service: String val, optional limit: USize val)"
        }, 
        {
            "location": "/net-TCPListener/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-TCPListener/#be-dispose", 
            "text": "Stop listening.", 
            "title": "be dispose()"
        }, 
        {
            "location": "/net-TCPListener/#be-set_notifynotify-tcplistennotify-iso", 
            "text": "Change the notifier.", 
            "title": "be set_notify(notify: TCPListenNotify iso)"
        }, 
        {
            "location": "/net-TCPListener/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-TCPListener/#fun-ref-close-none-val", 
            "text": "Dispose of resources.", 
            "title": "fun ref  close(): None val"
        }, 
        {
            "location": "/net-TCPListener/#fun-box-local_address-ipaddress-val", 
            "text": "Return the bound IP address.", 
            "title": "fun box  local_address(): IPAddress val"
        }, 
        {
            "location": "/net-TCPListener/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-TCPListener/#be-connclosed", 
            "text": "An accepted connection has closed. If we have dropped below the limit, try\nto accept new connections.", 
            "title": "be connclosed()"
        }, 
        {
            "location": "/net-TCPListener/#be-eventnotifyevent-pointer91asioevent-val93-tag-flags-u32-val-arg-u32-val", 
            "text": "When we are readable, we accept new connections until none remain.", 
            "title": "be eventnotify(event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)"
        }, 
        {
            "location": "/net-TCPListener/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-TCPListener/#fun-ref-_acceptoptional-ns-u32-val-none-val", 
            "text": "Accept connections as long as we have spawned fewer than our limit.", 
            "title": "fun ref  _accept(optional ns: U32 val): None val"
        }, 
        {
            "location": "/net-TCPListener/#fun-ref-notifylistening-none-val", 
            "text": "Inform the notifier that we're listening.", 
            "title": "fun ref  notifylistening(): None val"
        }, 
        {
            "location": "/net-TCPListener/#fun-ref-_spawnns-u32-val-none-val", 
            "text": "Spawn a new connection.", 
            "title": "fun ref  _spawn(ns: U32 val): None val"
        }, 
        {
            "location": "/net-_TestBroadcast/", 
            "text": "class net/_TestBroadcast is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest broadcasting with UDP.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun ref  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \ntimedout\n(t: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestBroadcast"
        }, 
        {
            "location": "/net-_TestBroadcast/#class-net_testbroadcast-is-unittest-ref", 
            "text": "Default capability :  iso  Test broadcasting with UDP.", 
            "title": "class net/_TestBroadcast is UnitTest ref"
        }, 
        {
            "location": "/net-_TestBroadcast/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-_TestBroadcast/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-_TestBroadcast/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-_TestBroadcast/#fun-ref-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-_TestBroadcast/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-_TestBroadcast/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-_TestBroadcast/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-_TestBroadcast/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-_TestBroadcast/#fun-box-timedoutt-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  timedout(t: TestHelper val): None val"
        }, 
        {
            "location": "/net-_TestBroadcastMgr/", 
            "text": "actor net/_TestBroadcastMgr\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(h: \nTestHelper\n val)\n\n\nPublic Behaviours\n\n\nbe \nfail\n(msg: \nString\n val)\n\n\nbe \npong_listening\n(ip: \nIPAddress\n val)\n\n\nbe \nsucceed\n()", 
            "title": "actor _TestBroadcastMgr"
        }, 
        {
            "location": "/net-_TestBroadcastMgr/#actor-net_testbroadcastmgr", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor net/_TestBroadcastMgr"
        }, 
        {
            "location": "/net-_TestBroadcastMgr/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-_TestBroadcastMgr/#new-createh-testhelper-val", 
            "text": "", 
            "title": "new create(h: TestHelper val)"
        }, 
        {
            "location": "/net-_TestBroadcastMgr/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-_TestBroadcastMgr/#be-failmsg-string-val", 
            "text": "", 
            "title": "be fail(msg: String val)"
        }, 
        {
            "location": "/net-_TestBroadcastMgr/#be-pong_listeningip-ipaddress-val", 
            "text": "", 
            "title": "be pong_listening(ip: IPAddress val)"
        }, 
        {
            "location": "/net-_TestBroadcastMgr/#be-succeed", 
            "text": "", 
            "title": "be succeed()"
        }, 
        {
            "location": "/net-_TestBuffer/", 
            "text": "class net/_TestBuffer is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest adding to and reading from a Buffer.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestBuffer"
        }, 
        {
            "location": "/net-_TestBuffer/#class-net_testbuffer-is-unittest-ref", 
            "text": "Default capability :  iso  Test adding to and reading from a Buffer.", 
            "title": "class net/_TestBuffer is UnitTest ref"
        }, 
        {
            "location": "/net-_TestBuffer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-_TestBuffer/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-_TestBuffer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-_TestBuffer/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/net-_TestBuffer/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-_TestBuffer/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-_TestBuffer/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-_TestBuffer/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-_TestPing/", 
            "text": "class net/_TestPing is \nUDPNotify\n ref\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(mgr: \n_TestBroadcastMgr\n tag, h: \nTestHelper\n val, ip: \nIPAddress\n val)\n\n\nPublic Functions\n\n\nfun ref  \nclosed\n(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nfun ref  \nlistening\n(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nfun ref  \nnot_listening\n(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nfun ref  \nreceived\n(sock: \nUDPSocket\n ref, data: \nArray\n[\nU8\n val] iso, from: \nIPAddress\n val): \nNone\n val", 
            "title": "class _TestPing"
        }, 
        {
            "location": "/net-_TestPing/#class-net_testping-is-udpnotify-ref", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class net/_TestPing is UDPNotify ref"
        }, 
        {
            "location": "/net-_TestPing/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-_TestPing/#new-createmgr-_testbroadcastmgr-tag-h-testhelper-val-ip-ipaddress-val", 
            "text": "", 
            "title": "new create(mgr: _TestBroadcastMgr tag, h: TestHelper val, ip: IPAddress val)"
        }, 
        {
            "location": "/net-_TestPing/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-_TestPing/#fun-ref-closedsock-udpsocket-ref-none-val", 
            "text": "", 
            "title": "fun ref  closed(sock: UDPSocket ref): None val"
        }, 
        {
            "location": "/net-_TestPing/#fun-ref-listeningsock-udpsocket-ref-none-val", 
            "text": "", 
            "title": "fun ref  listening(sock: UDPSocket ref): None val"
        }, 
        {
            "location": "/net-_TestPing/#fun-ref-not_listeningsock-udpsocket-ref-none-val", 
            "text": "", 
            "title": "fun ref  not_listening(sock: UDPSocket ref): None val"
        }, 
        {
            "location": "/net-_TestPing/#fun-ref-receivedsock-udpsocket-ref-data-array91u8-val93-iso-from-ipaddress-val-none-val", 
            "text": "", 
            "title": "fun ref  received(sock: UDPSocket ref, data: Array[U8 val] iso, from: IPAddress val): None val"
        }, 
        {
            "location": "/net-_TestPong/", 
            "text": "class net/_TestPong is \nUDPNotify\n ref\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(mgr: \n_TestBroadcastMgr\n tag, h: \nTestHelper\n val)\n\n\nPublic Functions\n\n\nfun ref  \nclosed\n(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nfun ref  \nlistening\n(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nfun ref  \nnot_listening\n(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nfun ref  \nreceived\n(sock: \nUDPSocket\n ref, data: \nArray\n[\nU8\n val] iso, from: \nIPAddress\n val): \nNone\n val", 
            "title": "class _TestPong"
        }, 
        {
            "location": "/net-_TestPong/#class-net_testpong-is-udpnotify-ref", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class net/_TestPong is UDPNotify ref"
        }, 
        {
            "location": "/net-_TestPong/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-_TestPong/#new-createmgr-_testbroadcastmgr-tag-h-testhelper-val", 
            "text": "", 
            "title": "new create(mgr: _TestBroadcastMgr tag, h: TestHelper val)"
        }, 
        {
            "location": "/net-_TestPong/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-_TestPong/#fun-ref-closedsock-udpsocket-ref-none-val", 
            "text": "", 
            "title": "fun ref  closed(sock: UDPSocket ref): None val"
        }, 
        {
            "location": "/net-_TestPong/#fun-ref-listeningsock-udpsocket-ref-none-val", 
            "text": "", 
            "title": "fun ref  listening(sock: UDPSocket ref): None val"
        }, 
        {
            "location": "/net-_TestPong/#fun-ref-not_listeningsock-udpsocket-ref-none-val", 
            "text": "", 
            "title": "fun ref  not_listening(sock: UDPSocket ref): None val"
        }, 
        {
            "location": "/net-_TestPong/#fun-ref-receivedsock-udpsocket-ref-data-array91u8-val93-iso-from-ipaddress-val-none-val", 
            "text": "", 
            "title": "fun ref  received(sock: UDPSocket ref, data: Array[U8 val] iso, from: IPAddress val): None val"
        }, 
        {
            "location": "/net-UDPNotify/", 
            "text": "interface net/UDPNotify\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nPublic Functions\n\n\nfun ref  \nclosed\n(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nCalled when the socket is closed.\n\n\nfun ref  \nlistening\n(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nCalled when the socket has been bound to an address.\n\n\nfun ref  \nnot_listening\n(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nCalled if it wasn't possible to bind the socket to an address.\n\n\nfun ref  \nreceived\n(sock: \nUDPSocket\n ref, data: \nArray\n[\nU8\n val] iso, from: \nIPAddress\n val): \nNone\n val\n\n\nCalled when new data is received on the socket.", 
            "title": "interface UDPNotify"
        }, 
        {
            "location": "/net-UDPNotify/#interface-netudpnotify", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "interface net/UDPNotify"
        }, 
        {
            "location": "/net-UDPNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-UDPNotify/#fun-ref-closedsock-udpsocket-ref-none-val", 
            "text": "Called when the socket is closed.", 
            "title": "fun ref  closed(sock: UDPSocket ref): None val"
        }, 
        {
            "location": "/net-UDPNotify/#fun-ref-listeningsock-udpsocket-ref-none-val", 
            "text": "Called when the socket has been bound to an address.", 
            "title": "fun ref  listening(sock: UDPSocket ref): None val"
        }, 
        {
            "location": "/net-UDPNotify/#fun-ref-not_listeningsock-udpsocket-ref-none-val", 
            "text": "Called if it wasn't possible to bind the socket to an address.", 
            "title": "fun ref  not_listening(sock: UDPSocket ref): None val"
        }, 
        {
            "location": "/net-UDPNotify/#fun-ref-receivedsock-udpsocket-ref-data-array91u8-val93-iso-from-ipaddress-val-none-val", 
            "text": "Called when new data is received on the socket.", 
            "title": "fun ref  received(sock: UDPSocket ref, data: Array[U8 val] iso, from: IPAddress val): None val"
        }, 
        {
            "location": "/net-UDPSocket/", 
            "text": "actor net/UDPSocket\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(notify: \nUDPNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional size: \nUSize\n val)\n\n\nnew \nip4\n(notify: \nUDPNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional size: \nUSize\n val)\n\n\nnew \nip6\n(notify: \nUDPNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional size: \nUSize\n val)\n\n\nPublic Behaviours\n\n\nbe \ndispose\n()\n\n\nStop listening.\n\n\nbe \nmulticast_join\n(group: \nString\n val, optional to: \nString\n val)\n\n\nAdd a multicast group. This can be limited to packets arriving on a\nspecific interface.\n\n\nbe \nmulticast_leave\n(group: \nString\n val, optional to: \nString\n val)\n\n\nDrop a multicast group. This can be limited to packets arriving on a\nspecific interface. No attempt is made to check that this socket has\npreviously added this group.\n\n\nbe \nset_broadcast\n(state: \nBool\n val)\n\n\nEnable or disable broadcasting from this socket.\n\n\nbe \nset_multicast_interface\n(optional from: \nString\n val)\n\n\nBy default, the OS will choose which address is used to send packets bound\nfor multicast addresses. This can be used to force a specific interface. To\nrevert to allowing the OS to choose, call with an empty string.\n\n\nbe \nset_multicast_loopback\n(loopback: \nBool\n val)\n\n\nBy default, packets sent to a multicast address will be received by the\nsending system if it has subscribed to that address. Disabling loopback\nprevents this.\n\n\nbe \nset_multicast_ttl\n(ttl: \nU8\n val)\n\n\nSet the TTL for multicast sends. Defaults to 1.\n\n\nbe \nset_notify\n(notify: \nUDPNotify\n iso)\n\n\nChange the notifier.\n\n\nbe \nwrite\n(data: (\nString\n val | \nArray\n[\nU8\n val] val), to: \nIPAddress\n val)\n\n\nWrite a single sequence of bytes.\n\n\nbe \nwritev\n(data: \nByteSeqIter\n val, to: \nIPAddress\n val)\n\n\nWrite a sequence of sequences of bytes.\n\n\nPublic Functions\n\n\nfun box  \nlocal_address\n(): \nIPAddress\n val\n\n\nReturn the bound IP address.\n\n\nPrivate Behaviours\n\n\nbe \nevent\nnotify\n(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nWhen we are readable, we accept new connections until none remain.\n\n\nbe \nread\nagain\n()\n\n\nResume reading.\n\n\nPrivate Functions\n\n\nfun ref  \n_close\n(): \nNone\n val\n\n\nInform the notifier that we've closed.\n\n\nfun ref  \ncomplete\nreads\n(len: \nU32\n val): \nNone\n val\n\n\nThe OS has informed as that len bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.\n\n\nfun ref  \nnotify\nlistening\n(): \nNone\n val\n\n\nInform the notifier that we're listening.\n\n\nfun ref  \npending\nreads\n(): \nNone\n val\n\n\nRead while data is available, guessing the next packet length as we go. If\nwe read 4 kb of data, send ourself a resume message and stop reading, to\navoid starving other actors.\n\n\nfun ref  \nstart\nnext_read\n(): \nNone\n val\n\n\nStart our next receive.\nThis is used only with IOCP on Windows.\n\n\nfun ref  \n_write\n(data: (\nString\n val | \nArray\n[\nU8\n val] val), to: \nIPAddress\n val): \nNone\n val\n\n\nWrite the datagram to the socket.", 
            "title": "actor UDPSocket"
        }, 
        {
            "location": "/net-UDPSocket/#actor-netudpsocket", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor net/UDPSocket"
        }, 
        {
            "location": "/net-UDPSocket/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-UDPSocket/#new-createnotify-udpnotify-iso-optional-host-string-val-optional-service-string-val-optional-size-usize-val", 
            "text": "", 
            "title": "new create(notify: UDPNotify iso, optional host: String val, optional service: String val, optional size: USize val)"
        }, 
        {
            "location": "/net-UDPSocket/#new-ip4notify-udpnotify-iso-optional-host-string-val-optional-service-string-val-optional-size-usize-val", 
            "text": "", 
            "title": "new ip4(notify: UDPNotify iso, optional host: String val, optional service: String val, optional size: USize val)"
        }, 
        {
            "location": "/net-UDPSocket/#new-ip6notify-udpnotify-iso-optional-host-string-val-optional-service-string-val-optional-size-usize-val", 
            "text": "", 
            "title": "new ip6(notify: UDPNotify iso, optional host: String val, optional service: String val, optional size: USize val)"
        }, 
        {
            "location": "/net-UDPSocket/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-UDPSocket/#be-dispose", 
            "text": "Stop listening.", 
            "title": "be dispose()"
        }, 
        {
            "location": "/net-UDPSocket/#be-multicast_joingroup-string-val-optional-to-string-val", 
            "text": "Add a multicast group. This can be limited to packets arriving on a\nspecific interface.", 
            "title": "be multicast_join(group: String val, optional to: String val)"
        }, 
        {
            "location": "/net-UDPSocket/#be-multicast_leavegroup-string-val-optional-to-string-val", 
            "text": "Drop a multicast group. This can be limited to packets arriving on a\nspecific interface. No attempt is made to check that this socket has\npreviously added this group.", 
            "title": "be multicast_leave(group: String val, optional to: String val)"
        }, 
        {
            "location": "/net-UDPSocket/#be-set_broadcaststate-bool-val", 
            "text": "Enable or disable broadcasting from this socket.", 
            "title": "be set_broadcast(state: Bool val)"
        }, 
        {
            "location": "/net-UDPSocket/#be-set_multicast_interfaceoptional-from-string-val", 
            "text": "By default, the OS will choose which address is used to send packets bound\nfor multicast addresses. This can be used to force a specific interface. To\nrevert to allowing the OS to choose, call with an empty string.", 
            "title": "be set_multicast_interface(optional from: String val)"
        }, 
        {
            "location": "/net-UDPSocket/#be-set_multicast_loopbackloopback-bool-val", 
            "text": "By default, packets sent to a multicast address will be received by the\nsending system if it has subscribed to that address. Disabling loopback\nprevents this.", 
            "title": "be set_multicast_loopback(loopback: Bool val)"
        }, 
        {
            "location": "/net-UDPSocket/#be-set_multicast_ttlttl-u8-val", 
            "text": "Set the TTL for multicast sends. Defaults to 1.", 
            "title": "be set_multicast_ttl(ttl: U8 val)"
        }, 
        {
            "location": "/net-UDPSocket/#be-set_notifynotify-udpnotify-iso", 
            "text": "Change the notifier.", 
            "title": "be set_notify(notify: UDPNotify iso)"
        }, 
        {
            "location": "/net-UDPSocket/#be-writedata-string-val-array91u8-val93-val-to-ipaddress-val", 
            "text": "Write a single sequence of bytes.", 
            "title": "be write(data: (String val | Array[U8 val] val), to: IPAddress val)"
        }, 
        {
            "location": "/net-UDPSocket/#be-writevdata-byteseqiter-val-to-ipaddress-val", 
            "text": "Write a sequence of sequences of bytes.", 
            "title": "be writev(data: ByteSeqIter val, to: IPAddress val)"
        }, 
        {
            "location": "/net-UDPSocket/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-UDPSocket/#fun-box-local_address-ipaddress-val", 
            "text": "Return the bound IP address.", 
            "title": "fun box  local_address(): IPAddress val"
        }, 
        {
            "location": "/net-UDPSocket/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-UDPSocket/#be-eventnotifyevent-pointer91asioevent-val93-tag-flags-u32-val-arg-u32-val", 
            "text": "When we are readable, we accept new connections until none remain.", 
            "title": "be eventnotify(event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)"
        }, 
        {
            "location": "/net-UDPSocket/#be-readagain", 
            "text": "Resume reading.", 
            "title": "be readagain()"
        }, 
        {
            "location": "/net-UDPSocket/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-UDPSocket/#fun-ref-_close-none-val", 
            "text": "Inform the notifier that we've closed.", 
            "title": "fun ref  _close(): None val"
        }, 
        {
            "location": "/net-UDPSocket/#fun-ref-completereadslen-u32-val-none-val", 
            "text": "The OS has informed as that len bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.", 
            "title": "fun ref  completereads(len: U32 val): None val"
        }, 
        {
            "location": "/net-UDPSocket/#fun-ref-notifylistening-none-val", 
            "text": "Inform the notifier that we're listening.", 
            "title": "fun ref  notifylistening(): None val"
        }, 
        {
            "location": "/net-UDPSocket/#fun-ref-pendingreads-none-val", 
            "text": "Read while data is available, guessing the next packet length as we go. If\nwe read 4 kb of data, send ourself a resume message and stop reading, to\navoid starving other actors.", 
            "title": "fun ref  pendingreads(): None val"
        }, 
        {
            "location": "/net-UDPSocket/#fun-ref-startnext_read-none-val", 
            "text": "Start our next receive.\nThis is used only with IOCP on Windows.", 
            "title": "fun ref  startnext_read(): None val"
        }, 
        {
            "location": "/net-UDPSocket/#fun-ref-_writedata-string-val-array91u8-val93-val-to-ipaddress-val-none-val", 
            "text": "Write the datagram to the socket.", 
            "title": "fun ref  _write(data: (String val | Array[U8 val] val), to: IPAddress val): None val"
        }, 
        {
            "location": "/net-http--index/", 
            "text": "No package doc string provided for net/http.\n\n\nEntities\n\n\n\n\nclass _BuildBad\n\n\nclass _BuildBasic\n\n\nclass _BuildMissingParts\n\n\nclass _BuildNoEncoding\n\n\nclass _Check\n\n\nclass _CheckBad\n\n\nclass _CheckIPv6\n\n\nclass _CheckScheme\n\n\nactor Client\n\n\nactor _ClientConnection\n\n\nclass CommonLog\n\n\nclass ContentsLog\n\n\nclass _Decode\n\n\nclass _DecodeBad\n\n\nprimitive DiscardLog\n\n\nclass _Encode\n\n\nclass _EncodeBad\n\n\nclass _EncodeClean\n\n\nclass _EncodeIPv6\n\n\nclass _HostService\n\n\ninterface Logger\n\n\nactor Main\n\n\nclass Payload\n\n\nprimitive _PayloadBody\n\n\nclass _PayloadBuilder\n\n\nprimitive _PayloadChunk\n\n\nprimitive _PayloadChunkEnd\n\n\nprimitive _PayloadChunkStart\n\n\nprimitive _PayloadContentLength\n\n\nprimitive _PayloadError\n\n\nprimitive _PayloadHeaders\n\n\nprimitive _PayloadReady\n\n\nprimitive _PayloadRequest\n\n\nprimitive _PayloadResponse\n\n\ntype _PayloadState\n\n\nclass _RequestBuilder\n\n\ninterface RequestHandler\n\n\nclass _ResponseBuilder\n\n\ninterface ResponseHandler\n\n\nactor Server\n\n\nactor _ServerConnection\n\n\nclass _ServerListener\n\n\ninterface ServerNotify\n\n\nprimitive _Test\n\n\nclass _ToStringFun\n\n\nclass URL\n\n\nprimitive URLEncode\n\n\ntype URLPart\n\n\nprimitive URLPartFragment\n\n\nprimitive URLPartHost\n\n\nprimitive URLPartPassword\n\n\nprimitive URLPartPath\n\n\nprimitive URLPartQuery\n\n\nprimitive URLPartUser\n\n\nclass _Valid", 
            "title": "Package"
        }, 
        {
            "location": "/net-http--index/#entities", 
            "text": "class _BuildBad  class _BuildBasic  class _BuildMissingParts  class _BuildNoEncoding  class _Check  class _CheckBad  class _CheckIPv6  class _CheckScheme  actor Client  actor _ClientConnection  class CommonLog  class ContentsLog  class _Decode  class _DecodeBad  primitive DiscardLog  class _Encode  class _EncodeBad  class _EncodeClean  class _EncodeIPv6  class _HostService  interface Logger  actor Main  class Payload  primitive _PayloadBody  class _PayloadBuilder  primitive _PayloadChunk  primitive _PayloadChunkEnd  primitive _PayloadChunkStart  primitive _PayloadContentLength  primitive _PayloadError  primitive _PayloadHeaders  primitive _PayloadReady  primitive _PayloadRequest  primitive _PayloadResponse  type _PayloadState  class _RequestBuilder  interface RequestHandler  class _ResponseBuilder  interface ResponseHandler  actor Server  actor _ServerConnection  class _ServerListener  interface ServerNotify  primitive _Test  class _ToStringFun  class URL  primitive URLEncode  type URLPart  primitive URLPartFragment  primitive URLPartHost  primitive URLPartPassword  primitive URLPartPath  primitive URLPartQuery  primitive URLPartUser  class _Valid", 
            "title": "Entities"
        }, 
        {
            "location": "/net-http-_BuildBad/", 
            "text": "class net/http/_BuildBad is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _BuildBad"
        }, 
        {
            "location": "/net-http-_BuildBad/#class-nethttp_buildbad-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_BuildBad is UnitTest ref"
        }, 
        {
            "location": "/net-http-_BuildBad/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_BuildBad/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_BuildBad/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_BuildBad/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_BuildBad/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_BuildBad/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_BuildBad/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_BuildBad/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_BuildBasic/", 
            "text": "class net/http/_BuildBasic is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _BuildBasic"
        }, 
        {
            "location": "/net-http-_BuildBasic/#class-nethttp_buildbasic-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_BuildBasic is UnitTest ref"
        }, 
        {
            "location": "/net-http-_BuildBasic/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_BuildBasic/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_BuildBasic/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_BuildBasic/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/net-http-_BuildBasic/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_BuildBasic/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_BuildBasic/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_BuildBasic/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_BuildMissingParts/", 
            "text": "class net/http/_BuildMissingParts is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _BuildMissingParts"
        }, 
        {
            "location": "/net-http-_BuildMissingParts/#class-nethttp_buildmissingparts-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_BuildMissingParts is UnitTest ref"
        }, 
        {
            "location": "/net-http-_BuildMissingParts/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_BuildMissingParts/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_BuildMissingParts/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_BuildMissingParts/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/net-http-_BuildMissingParts/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_BuildMissingParts/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_BuildMissingParts/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_BuildMissingParts/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_BuildNoEncoding/", 
            "text": "class net/http/_BuildNoEncoding is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _BuildNoEncoding"
        }, 
        {
            "location": "/net-http-_BuildNoEncoding/#class-nethttp_buildnoencoding-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_BuildNoEncoding is UnitTest ref"
        }, 
        {
            "location": "/net-http-_BuildNoEncoding/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_BuildNoEncoding/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_BuildNoEncoding/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_BuildNoEncoding/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/net-http-_BuildNoEncoding/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_BuildNoEncoding/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_BuildNoEncoding/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_BuildNoEncoding/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_Check/", 
            "text": "class net/http/_Check is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _Check"
        }, 
        {
            "location": "/net-http-_Check/#class-nethttp_check-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_Check is UnitTest ref"
        }, 
        {
            "location": "/net-http-_Check/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_Check/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_Check/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_Check/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_Check/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_Check/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_Check/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_Check/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_CheckBad/", 
            "text": "class net/http/_CheckBad is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _CheckBad"
        }, 
        {
            "location": "/net-http-_CheckBad/#class-nethttp_checkbad-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_CheckBad is UnitTest ref"
        }, 
        {
            "location": "/net-http-_CheckBad/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_CheckBad/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_CheckBad/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_CheckBad/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_CheckBad/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_CheckBad/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_CheckBad/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_CheckBad/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_CheckIPv6/", 
            "text": "class net/http/_CheckIPv6 is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _CheckIPv6"
        }, 
        {
            "location": "/net-http-_CheckIPv6/#class-nethttp_checkipv6-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_CheckIPv6 is UnitTest ref"
        }, 
        {
            "location": "/net-http-_CheckIPv6/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_CheckIPv6/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_CheckIPv6/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_CheckIPv6/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_CheckIPv6/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_CheckIPv6/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_CheckIPv6/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_CheckIPv6/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_CheckScheme/", 
            "text": "class net/http/_CheckScheme is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _CheckScheme"
        }, 
        {
            "location": "/net-http-_CheckScheme/#class-nethttp_checkscheme-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_CheckScheme is UnitTest ref"
        }, 
        {
            "location": "/net-http-_CheckScheme/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_CheckScheme/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_CheckScheme/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_CheckScheme/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_CheckScheme/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_CheckScheme/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_CheckScheme/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_CheckScheme/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-Client/", 
            "text": "actor net/http/Client\n\n\nDefault capability\n: \ntag\n\n\nManages a collection of client connections.\n\n\nConstructors\n\n\nnew \ncreate\n(optional sslctx: (\nSSLContext\n val | \nNone\n val), optional pipeline: \nBool\n val)\n\n\nPublic Behaviours\n\n\nbe \napply\n(request: \nPayload\n val)\n\n\nSchedule a request.\n\n\nbe \ncancel\n(request: \nPayload\n val)\n\n\nCancel a request.\n\n\nPrivate Functions\n\n\nfun ref  \nget\nclient\n(url: \nURL\n val): \n_ClientConnection\n tag ?\n\n\nGets or creates a client for the given URL.", 
            "title": "actor Client"
        }, 
        {
            "location": "/net-http-Client/#actor-nethttpclient", 
            "text": "Default capability :  tag  Manages a collection of client connections.", 
            "title": "actor net/http/Client"
        }, 
        {
            "location": "/net-http-Client/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-Client/#new-createoptional-sslctx-sslcontext-val-none-val-optional-pipeline-bool-val", 
            "text": "", 
            "title": "new create(optional sslctx: (SSLContext val | None val), optional pipeline: Bool val)"
        }, 
        {
            "location": "/net-http-Client/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-http-Client/#be-applyrequest-payload-val", 
            "text": "Schedule a request.", 
            "title": "be apply(request: Payload val)"
        }, 
        {
            "location": "/net-http-Client/#be-cancelrequest-payload-val", 
            "text": "Cancel a request.", 
            "title": "be cancel(request: Payload val)"
        }, 
        {
            "location": "/net-http-Client/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-Client/#fun-ref-getclienturl-url-val-_clientconnection-tag", 
            "text": "Gets or creates a client for the given URL.", 
            "title": "fun ref  getclient(url: URL val): _ClientConnection tag ?"
        }, 
        {
            "location": "/net-http-_ClientConnection/", 
            "text": "actor net/http/_ClientConnection\n\n\nDefault capability\n: \ntag\n\n\nManages a persistent and possibly pipelined TCP connection to an HTTP server.\n\n\nConstructors\n\n\nnew \ncreate\n(host: \nString\n val, service: \nString\n val, optional sslctx: (\nSSLContext\n val | \nNone\n val), optional pipeline: \nBool\n val)\n\n\nPublic Behaviours\n\n\nbe \napply\n(request: \nPayload\n val)\n\n\nSchedule a request.\n\n\nbe \ncancel\n(request: \nPayload\n tag)\n\n\nCancel a request.\n\n\nPrivate Behaviours\n\n\nbe \nauth\nfailed\n(conn: \nTCPConnection\n tag)\n\n\nThe connection couldn't be authenticated. Cancel all pending requests.\n\n\nbe \n_closed\n(conn: \nTCPConnection\n tag)\n\n\nThe connection to the server has closed prematurely. Cancel everything.\n\n\nbe \nconnect\nfailed\n(conn: \nTCPConnection\n tag)\n\n\nThe connection couldn't be established. Cancel all pending requests.\n\n\nbe \n_connected\n(conn: \nTCPConnection\n tag)\n\n\nThe connection to the server has been established. Send pending requests.\n\n\nbe \n_response\n(response: \nPayload\n iso)\n\n\nCall the request's handler and supply the response.\n\n\nPrivate Functions\n\n\nfun ref  \ncancel\nall\n(): \nNone\n val\n\n\nCancel all pending requests.\n\n\nfun ref  \nnew\nconn\n(): \nNone\n val\n\n\nCreates a new connection.\n\n\nfun ref  \n_send\n(): \nNone\n val\n\n\nSend pending requests. If the connection is closed, open it. If we have\nnothing to send and we aren't waiting on any responses, close the\nconnection.", 
            "title": "actor _ClientConnection"
        }, 
        {
            "location": "/net-http-_ClientConnection/#actor-nethttp_clientconnection", 
            "text": "Default capability :  tag  Manages a persistent and possibly pipelined TCP connection to an HTTP server.", 
            "title": "actor net/http/_ClientConnection"
        }, 
        {
            "location": "/net-http-_ClientConnection/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ClientConnection/#new-createhost-string-val-service-string-val-optional-sslctx-sslcontext-val-none-val-optional-pipeline-bool-val", 
            "text": "", 
            "title": "new create(host: String val, service: String val, optional sslctx: (SSLContext val | None val), optional pipeline: Bool val)"
        }, 
        {
            "location": "/net-http-_ClientConnection/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-http-_ClientConnection/#be-applyrequest-payload-val", 
            "text": "Schedule a request.", 
            "title": "be apply(request: Payload val)"
        }, 
        {
            "location": "/net-http-_ClientConnection/#be-cancelrequest-payload-tag", 
            "text": "Cancel a request.", 
            "title": "be cancel(request: Payload tag)"
        }, 
        {
            "location": "/net-http-_ClientConnection/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-http-_ClientConnection/#be-authfailedconn-tcpconnection-tag", 
            "text": "The connection couldn't be authenticated. Cancel all pending requests.", 
            "title": "be authfailed(conn: TCPConnection tag)"
        }, 
        {
            "location": "/net-http-_ClientConnection/#be-_closedconn-tcpconnection-tag", 
            "text": "The connection to the server has closed prematurely. Cancel everything.", 
            "title": "be _closed(conn: TCPConnection tag)"
        }, 
        {
            "location": "/net-http-_ClientConnection/#be-connectfailedconn-tcpconnection-tag", 
            "text": "The connection couldn't be established. Cancel all pending requests.", 
            "title": "be connectfailed(conn: TCPConnection tag)"
        }, 
        {
            "location": "/net-http-_ClientConnection/#be-_connectedconn-tcpconnection-tag", 
            "text": "The connection to the server has been established. Send pending requests.", 
            "title": "be _connected(conn: TCPConnection tag)"
        }, 
        {
            "location": "/net-http-_ClientConnection/#be-_responseresponse-payload-iso", 
            "text": "Call the request's handler and supply the response.", 
            "title": "be _response(response: Payload iso)"
        }, 
        {
            "location": "/net-http-_ClientConnection/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-_ClientConnection/#fun-ref-cancelall-none-val", 
            "text": "Cancel all pending requests.", 
            "title": "fun ref  cancelall(): None val"
        }, 
        {
            "location": "/net-http-_ClientConnection/#fun-ref-newconn-none-val", 
            "text": "Creates a new connection.", 
            "title": "fun ref  newconn(): None val"
        }, 
        {
            "location": "/net-http-_ClientConnection/#fun-ref-_send-none-val", 
            "text": "Send pending requests. If the connection is closed, open it. If we have\nnothing to send and we aren't waiting on any responses, close the\nconnection.", 
            "title": "fun ref  _send(): None val"
        }, 
        {
            "location": "/net-http-CommonLog/", 
            "text": "class net/http/CommonLog is \nLogger\n val\n\n\nDefault capability\n: \nref\n\n\nLogs HTTP requests in the common log format.\n\n\nConstructors\n\n\nnew \ncreate\n(out: \nOutStream\n tag)\n\n\nPublic Functions\n\n\nfun val  \napply\n(ip: \nString\n val, request: \nPayload\n val, response: \nPayload\n val): \nNone\n val\n\n\nPrivate Functions\n\n\nfun box  \n_entry\n(s: \nString\n val): \nString\n val", 
            "title": "class CommonLog"
        }, 
        {
            "location": "/net-http-CommonLog/#class-nethttpcommonlog-is-logger-val", 
            "text": "Default capability :  ref  Logs HTTP requests in the common log format.", 
            "title": "class net/http/CommonLog is Logger val"
        }, 
        {
            "location": "/net-http-CommonLog/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-CommonLog/#new-createout-outstream-tag", 
            "text": "", 
            "title": "new create(out: OutStream tag)"
        }, 
        {
            "location": "/net-http-CommonLog/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-CommonLog/#fun-val-applyip-string-val-request-payload-val-response-payload-val-none-val", 
            "text": "", 
            "title": "fun val  apply(ip: String val, request: Payload val, response: Payload val): None val"
        }, 
        {
            "location": "/net-http-CommonLog/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-CommonLog/#fun-box-_entrys-string-val-string-val", 
            "text": "", 
            "title": "fun box  _entry(s: String val): String val"
        }, 
        {
            "location": "/net-http-ContentsLog/", 
            "text": "class net/http/ContentsLog\n\n\nDefault capability\n: \nref\n\n\nLogs the contents of HTTP requests and responses.\n\n\nConstructors\n\n\nnew \ncreate\n(out: \nOutStream\n tag)\n\n\nPublic Functions\n\n\nfun val  \napply\n(ip: \nString\n val, request: \nPayload\n val, response: \nPayload\n val): \nNone\n val", 
            "title": "class ContentsLog"
        }, 
        {
            "location": "/net-http-ContentsLog/#class-nethttpcontentslog", 
            "text": "Default capability :  ref  Logs the contents of HTTP requests and responses.", 
            "title": "class net/http/ContentsLog"
        }, 
        {
            "location": "/net-http-ContentsLog/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-ContentsLog/#new-createout-outstream-tag", 
            "text": "", 
            "title": "new create(out: OutStream tag)"
        }, 
        {
            "location": "/net-http-ContentsLog/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-ContentsLog/#fun-val-applyip-string-val-request-payload-val-response-payload-val-none-val", 
            "text": "", 
            "title": "fun val  apply(ip: String val, request: Payload val, response: Payload val): None val"
        }, 
        {
            "location": "/net-http-_Decode/", 
            "text": "class net/http/_Decode is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _Decode"
        }, 
        {
            "location": "/net-http-_Decode/#class-nethttp_decode-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_Decode is UnitTest ref"
        }, 
        {
            "location": "/net-http-_Decode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_Decode/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_Decode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_Decode/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/net-http-_Decode/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_Decode/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_Decode/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_Decode/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_DecodeBad/", 
            "text": "class net/http/_DecodeBad is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _DecodeBad"
        }, 
        {
            "location": "/net-http-_DecodeBad/#class-nethttp_decodebad-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_DecodeBad is UnitTest ref"
        }, 
        {
            "location": "/net-http-_DecodeBad/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_DecodeBad/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_DecodeBad/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_DecodeBad/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_DecodeBad/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_DecodeBad/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_DecodeBad/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_DecodeBad/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-DiscardLog/", 
            "text": "primitive net/http/DiscardLog\n\n\nDefault capability\n: \nval\n\n\nDoesn't log anything.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun val  \napply\n(ip: \nString\n val, request: \nPayload\n val, response: \nPayload\n val): \nNone\n val\n\n\nfun box  \neq\n(that: \nDiscardLog\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nDiscardLog\n val): \nBool\n val", 
            "title": "primitive DiscardLog"
        }, 
        {
            "location": "/net-http-DiscardLog/#primitive-nethttpdiscardlog", 
            "text": "Default capability :  val  Doesn't log anything.", 
            "title": "primitive net/http/DiscardLog"
        }, 
        {
            "location": "/net-http-DiscardLog/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-DiscardLog/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-DiscardLog/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-DiscardLog/#fun-val-applyip-string-val-request-payload-val-response-payload-val-none-val", 
            "text": "", 
            "title": "fun val  apply(ip: String val, request: Payload val, response: Payload val): None val"
        }, 
        {
            "location": "/net-http-DiscardLog/#fun-box-eqthat-discardlog-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: DiscardLog val): Bool val"
        }, 
        {
            "location": "/net-http-DiscardLog/#fun-box-nethat-discardlog-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: DiscardLog val): Bool val"
        }, 
        {
            "location": "/net-http-_Encode/", 
            "text": "class net/http/_Encode is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _Encode"
        }, 
        {
            "location": "/net-http-_Encode/#class-nethttp_encode-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_Encode is UnitTest ref"
        }, 
        {
            "location": "/net-http-_Encode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_Encode/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_Encode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_Encode/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/net-http-_Encode/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_Encode/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_Encode/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_Encode/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_EncodeBad/", 
            "text": "class net/http/_EncodeBad is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _EncodeBad"
        }, 
        {
            "location": "/net-http-_EncodeBad/#class-nethttp_encodebad-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_EncodeBad is UnitTest ref"
        }, 
        {
            "location": "/net-http-_EncodeBad/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_EncodeBad/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_EncodeBad/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_EncodeBad/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_EncodeBad/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_EncodeBad/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_EncodeBad/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_EncodeBad/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_EncodeClean/", 
            "text": "class net/http/_EncodeClean is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _EncodeClean"
        }, 
        {
            "location": "/net-http-_EncodeClean/#class-nethttp_encodeclean-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_EncodeClean is UnitTest ref"
        }, 
        {
            "location": "/net-http-_EncodeClean/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_EncodeClean/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_EncodeClean/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_EncodeClean/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/net-http-_EncodeClean/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_EncodeClean/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_EncodeClean/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_EncodeClean/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_EncodeIPv6/", 
            "text": "class net/http/_EncodeIPv6 is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _EncodeIPv6"
        }, 
        {
            "location": "/net-http-_EncodeIPv6/#class-nethttp_encodeipv6-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_EncodeIPv6 is UnitTest ref"
        }, 
        {
            "location": "/net-http-_EncodeIPv6/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_EncodeIPv6/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_EncodeIPv6/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_EncodeIPv6/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/net-http-_EncodeIPv6/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_EncodeIPv6/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_EncodeIPv6/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_EncodeIPv6/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_HostService/", 
            "text": "class net/http/_HostService is \nHashable\n ref, \nEquatable\n[\n_HostService\n val] ref\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nPublic fields\n\n\n\n\nlet host: \nString\n val\n\n\nlet scheme: \nString\n val\n\n\nlet service: \nString\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(scheme': \nString\n val, host': \nString\n val, service': \nString\n val)\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_HostService\n box): \nBool\n val\n\n\nfun box  \nhash\n(): \nU64\n val\n\n\nfun box  \nne\n(that: \n_HostService\n val): \nBool\n val", 
            "title": "class _HostService"
        }, 
        {
            "location": "/net-http-_HostService/#class-nethttp_hostservice-is-hashable-ref-equatable91_hostservice-val93-ref", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "class net/http/_HostService is Hashable ref, Equatable[_HostService val] ref"
        }, 
        {
            "location": "/net-http-_HostService/#public-fields", 
            "text": "let host:  String  val  let scheme:  String  val  let service:  String  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/net-http-_HostService/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_HostService/#new-createscheme-string-val-host-string-val-service-string-val", 
            "text": "", 
            "title": "new create(scheme': String val, host': String val, service': String val)"
        }, 
        {
            "location": "/net-http-_HostService/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_HostService/#fun-box-eqthat-_hostservice-box-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _HostService box): Bool val"
        }, 
        {
            "location": "/net-http-_HostService/#fun-box-hash-u64-val", 
            "text": "", 
            "title": "fun box  hash(): U64 val"
        }, 
        {
            "location": "/net-http-_HostService/#fun-box-nethat-_hostservice-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _HostService val): Bool val"
        }, 
        {
            "location": "/net-http-Logger/", 
            "text": "interface net/http/Logger\n\n\nDefault capability\n: \nval\n\n\nHandles logging request/response pairs.\n\n\nPublic Functions\n\n\nfun val  \napply\n(ip: \nString\n val, request: \nPayload\n val, response: \nPayload\n val): \nAny\n tag", 
            "title": "interface Logger"
        }, 
        {
            "location": "/net-http-Logger/#interface-nethttplogger", 
            "text": "Default capability :  val  Handles logging request/response pairs.", 
            "title": "interface net/http/Logger"
        }, 
        {
            "location": "/net-http-Logger/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-Logger/#fun-val-applyip-string-val-request-payload-val-response-payload-val-any-tag", 
            "text": "", 
            "title": "fun val  apply(ip: String val, request: Payload val, response: Payload val): Any tag"
        }, 
        {
            "location": "/net-http-Main/", 
            "text": "actor net/http/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/net-http-Main/#actor-nethttpmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor net/http/Main is TestList ref"
        }, 
        {
            "location": "/net-http-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/net-http-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/net-http-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/net-http-Payload/", 
            "text": "class net/http/Payload\n\n\nDefault capability\n: \niso\n\n\nAn HTTP payload. For a response, the method indicates the status text. For a\nrequest, the status is meaningless.\n\n\nPublic fields\n\n\n\n\nvar handler: (\nResponseHandler\n val | \nNone\n val)\n\n\nvar method: \nString\n val\n\n\nvar proto: \nString\n val\n\n\nvar status: \nU16\n val\n\n\nvar url: \nURL\n val\n\n\n\n\nConstructors\n\n\nnew \n_empty\n(optional response': \nBool\n val)\n\n\nnew \nrequest\n(optional method': \nString\n val, optional url': \nURL\n val, optional handler': (\nResponseHandler\n val | \nNone\n val))\n\n\nnew \nresponse\n(optional status': \nU16\n val, optional description: \nString\n val, optional handler': (\nResponseHandler\n val | \nNone\n val))\n\n\nPublic Functions\n\n\nfun ref  \nadd_chunk\n(data: (\nString\n val | \nArray\n[\nU8\n val] val)): \nPayload\n ref^\n\n\nAdd a chunk to the body.\n\n\nfun box  \napply\n(key: \nString\n val): \nString\n val ?\n\n\nGet a header.\n\n\nfun box  \nbody\n(): this-\nArray\n[(\nString\n val | \nArray\n[\nU8\n val] val)] ref\n\n\nGet the body.\n\n\nfun box  \nbody_size\n(): \nUSize\n val\n\n\nGet the total size of the body.\n\n\nfun iso  \nfail\n(): \nNone\n val\n\n\nTrigger the response handler with an error payload.\n\n\nfun box  \nheaders\n(): this-\nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] ref\n\n\nGet the headers.\n\n\nfun iso  \nrespond\n(response': \nPayload\n iso): \nNone\n val\n\n\nTrigger the response handler.\n\n\nfun ref  \nupdate\n(key: \nString\n val, value: \nString\n val): \nPayload\n ref^\n\n\nSet a header. If we've already received the header, append the value as a\ncomma separated list, as per RFC 2616 section 4.2.\n\n\nPrivate Functions\n\n\nfun box  \nadd\nbody\n(list: \nArray\n[(\nString\n val | \nArray\n[\nU8\n val] val)] iso): \nArray\n[(\nString\n val | \nArray\n[\nU8\n val] val)] iso^\n\n\nAdd the body to the list.\nTODO: don't include the body for HEAD, 204, 304 or 1xx\n\n\nfun box  \nadd\nheaders\n(list: \nArray\n[(\nString\n val | \nArray\n[\nU8\n val] val)] iso): \nArray\n[(\nString\n val | \nArray\n[\nU8\n val] val)] iso^\n\n\nAdd the headers to the list.\n\n\nfun val  \nclient\nfail\n(): \nNone\n val\n\n\nTrigger the response handler with an error payload. This is private to\nprevent request handlers from responding to a request more than once.\n\n\nfun val  \nclient\nrespond\n(response': \nPayload\n iso): \nNone\n val\n\n\nTrigger the response handler. This is private to prevent request handlers\nfrom responding to a request more than once.\n\n\nfun box  \n_write\n(conn: \nTCPConnection\n tag, optional keepalive: \nBool\n val): \nNone\n val\n\n\nWrites the payload to a TCP connection.\n\n\nfun box  \nwrite\nrequest\n(conn: \nTCPConnection\n tag, keepalive: \nBool\n val): \nNone\n val\n\n\nWrites an an HTTP request.\n\n\nfun box  \nwrite\nresponse\n(conn: \nTCPConnection\n tag, keepalive: \nBool\n val): \nNone\n val\n\n\nWrite as an HTTP response.", 
            "title": "class Payload"
        }, 
        {
            "location": "/net-http-Payload/#class-nethttppayload", 
            "text": "Default capability :  iso  An HTTP payload. For a response, the method indicates the status text. For a\nrequest, the status is meaningless.", 
            "title": "class net/http/Payload"
        }, 
        {
            "location": "/net-http-Payload/#public-fields", 
            "text": "var handler: ( ResponseHandler  val |  None  val)  var method:  String  val  var proto:  String  val  var status:  U16  val  var url:  URL  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/net-http-Payload/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-Payload/#new-_emptyoptional-response-bool-val", 
            "text": "", 
            "title": "new _empty(optional response': Bool val)"
        }, 
        {
            "location": "/net-http-Payload/#new-requestoptional-method-string-val-optional-url-url-val-optional-handler-responsehandler-val-none-val", 
            "text": "", 
            "title": "new request(optional method': String val, optional url': URL val, optional handler': (ResponseHandler val | None val))"
        }, 
        {
            "location": "/net-http-Payload/#new-responseoptional-status-u16-val-optional-description-string-val-optional-handler-responsehandler-val-none-val", 
            "text": "", 
            "title": "new response(optional status': U16 val, optional description: String val, optional handler': (ResponseHandler val | None val))"
        }, 
        {
            "location": "/net-http-Payload/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-Payload/#fun-ref-add_chunkdata-string-val-array91u8-val93-val-payload-ref", 
            "text": "Add a chunk to the body.", 
            "title": "fun ref  add_chunk(data: (String val | Array[U8 val] val)): Payload ref^"
        }, 
        {
            "location": "/net-http-Payload/#fun-box-applykey-string-val-string-val", 
            "text": "Get a header.", 
            "title": "fun box  apply(key: String val): String val ?"
        }, 
        {
            "location": "/net-http-Payload/#fun-box-body-this-array91string-val-array91u8-val93-val93-ref", 
            "text": "Get the body.", 
            "title": "fun box  body(): this-&gt;Array[(String val | Array[U8 val] val)] ref"
        }, 
        {
            "location": "/net-http-Payload/#fun-box-body_size-usize-val", 
            "text": "Get the total size of the body.", 
            "title": "fun box  body_size(): USize val"
        }, 
        {
            "location": "/net-http-Payload/#fun-iso-fail-none-val", 
            "text": "Trigger the response handler with an error payload.", 
            "title": "fun iso  fail(): None val"
        }, 
        {
            "location": "/net-http-Payload/#fun-box-headers-this-hashmap91string-val-string-val-hasheq91string-val93-val93-ref", 
            "text": "Get the headers.", 
            "title": "fun box  headers(): this-&gt;HashMap[String val, String val, HashEq[String val] val] ref"
        }, 
        {
            "location": "/net-http-Payload/#fun-iso-respondresponse-payload-iso-none-val", 
            "text": "Trigger the response handler.", 
            "title": "fun iso  respond(response': Payload iso): None val"
        }, 
        {
            "location": "/net-http-Payload/#fun-ref-updatekey-string-val-value-string-val-payload-ref", 
            "text": "Set a header. If we've already received the header, append the value as a\ncomma separated list, as per RFC 2616 section 4.2.", 
            "title": "fun ref  update(key: String val, value: String val): Payload ref^"
        }, 
        {
            "location": "/net-http-Payload/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-Payload/#fun-box-addbodylist-array91string-val-array91u8-val93-val93-iso-array91string-val-array91u8-val93-val93-iso", 
            "text": "Add the body to the list.\nTODO: don't include the body for HEAD, 204, 304 or 1xx", 
            "title": "fun box  addbody(list: Array[(String val | Array[U8 val] val)] iso): Array[(String val | Array[U8 val] val)] iso^"
        }, 
        {
            "location": "/net-http-Payload/#fun-box-addheaderslist-array91string-val-array91u8-val93-val93-iso-array91string-val-array91u8-val93-val93-iso", 
            "text": "Add the headers to the list.", 
            "title": "fun box  addheaders(list: Array[(String val | Array[U8 val] val)] iso): Array[(String val | Array[U8 val] val)] iso^"
        }, 
        {
            "location": "/net-http-Payload/#fun-val-clientfail-none-val", 
            "text": "Trigger the response handler with an error payload. This is private to\nprevent request handlers from responding to a request more than once.", 
            "title": "fun val  clientfail(): None val"
        }, 
        {
            "location": "/net-http-Payload/#fun-val-clientrespondresponse-payload-iso-none-val", 
            "text": "Trigger the response handler. This is private to prevent request handlers\nfrom responding to a request more than once.", 
            "title": "fun val  clientrespond(response': Payload iso): None val"
        }, 
        {
            "location": "/net-http-Payload/#fun-box-_writeconn-tcpconnection-tag-optional-keepalive-bool-val-none-val", 
            "text": "Writes the payload to a TCP connection.", 
            "title": "fun box  _write(conn: TCPConnection tag, optional keepalive: Bool val): None val"
        }, 
        {
            "location": "/net-http-Payload/#fun-box-writerequestconn-tcpconnection-tag-keepalive-bool-val-none-val", 
            "text": "Writes an an HTTP request.", 
            "title": "fun box  writerequest(conn: TCPConnection tag, keepalive: Bool val): None val"
        }, 
        {
            "location": "/net-http-Payload/#fun-box-writeresponseconn-tcpconnection-tag-keepalive-bool-val-none-val", 
            "text": "Write as an HTTP response.", 
            "title": "fun box  writeresponse(conn: TCPConnection tag, keepalive: Bool val): None val"
        }, 
        {
            "location": "/net-http-_PayloadBody/", 
            "text": "primitive net/http/_PayloadBody\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PayloadBody\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PayloadBody\n val): \nBool\n val", 
            "title": "primitive _PayloadBody"
        }, 
        {
            "location": "/net-http-_PayloadBody/#primitive-nethttp_payloadbody", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/_PayloadBody"
        }, 
        {
            "location": "/net-http-_PayloadBody/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_PayloadBody/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_PayloadBody/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_PayloadBody/#fun-box-eqthat-_payloadbody-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PayloadBody val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadBody/#fun-box-nethat-_payloadbody-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PayloadBody val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/", 
            "text": "class net/http/_PayloadBuilder\n\n\nDefault capability\n: \nref\n\n\nThis builds a Payload using received chunks of data.\n\n\nConstructors\n\n\nnew \nrequest\n()\n\n\nnew \nresponse\n()\n\n\nPublic Functions\n\n\nfun ref  \nclosed\n(buffer: \nBuffer\n ref): \nNone\n val\n\n\nThe connection has closed, which may signal that all remaining data is the\npayload body.\n\n\nfun ref  \ndone\n(): \nPayload\n iso^\n\n\nFinish parsing. Returns the payload if it is ready, otherwise an empty\npayload.\n\n\nfun ref  \nparse\n(buffer: \nBuffer\n ref): \nNone\n val\n\n\nParse available data based on our state. _ResponseBody is not listed here.\nIn that state, we wait for the connection to close and treat all pending\ndata as the response body.\n\n\nfun box  \nstate\n(): (((((((((\n_PayloadRequest\n val | \n_PayloadResponse\n val) | \n_PayloadHeaders\n val) | \n_PayloadContentLength\n val) | \n_PayloadChunkStart\n val) | \n_PayloadChunk\n val) | \n_PayloadChunkEnd\n val) | \n_PayloadBody\n val) | \n_PayloadReady\n val) | \n_PayloadError\n val)\n\n\nReturns the parse state.\n\n\nPrivate Functions\n\n\nfun ref  \nparse\nchunk\n(buffer: \nBuffer\n ref): \nNone\n val\n\n\nLook for a chunk.\n\n\nfun ref  \nparse\nchunk_end\n(buffer: \nBuffer\n ref): \nNone\n val\n\n\nLook for a blank line.\n\n\nfun ref  \nparse\nchunk_start\n(buffer: \nBuffer\n ref): \nNone\n val\n\n\nLook for the beginning of a chunk.\n\n\nfun ref  \nparse\ncontent_length\n(buffer: \nBuffer\n ref): \nNone\n val\n\n\nLook for _content_length available bytes.\n\n\nfun ref  \nparse\nheaders\n(buffer: \nBuffer\n ref): \nNone\n val\n\n\nLook for: \"\n:\n\" or an empty line.\n\n\nfun ref  \nparse\nrequest\n(buffer: \nBuffer\n ref): \nNone\n val\n\n\nLook for: \"\n \n \n\".\n\n\nfun ref  \nparse\nresponse\n(buffer: \nBuffer\n ref): \nNone\n val\n\n\nLook for: \"\n \n \n\".", 
            "title": "class _PayloadBuilder"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#class-nethttp_payloadbuilder", 
            "text": "Default capability :  ref  This builds a Payload using received chunks of data.", 
            "title": "class net/http/_PayloadBuilder"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#new-request", 
            "text": "", 
            "title": "new request()"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#new-response", 
            "text": "", 
            "title": "new response()"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#fun-ref-closedbuffer-buffer-ref-none-val", 
            "text": "The connection has closed, which may signal that all remaining data is the\npayload body.", 
            "title": "fun ref  closed(buffer: Buffer ref): None val"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#fun-ref-done-payload-iso", 
            "text": "Finish parsing. Returns the payload if it is ready, otherwise an empty\npayload.", 
            "title": "fun ref  done(): Payload iso^"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#fun-ref-parsebuffer-buffer-ref-none-val", 
            "text": "Parse available data based on our state. _ResponseBody is not listed here.\nIn that state, we wait for the connection to close and treat all pending\ndata as the response body.", 
            "title": "fun ref  parse(buffer: Buffer ref): None val"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#fun-box-state-_payloadrequest-val-_payloadresponse-val-_payloadheaders-val-_payloadcontentlength-val-_payloadchunkstart-val-_payloadchunk-val-_payloadchunkend-val-_payloadbody-val-_payloadready-val-_payloaderror-val", 
            "text": "Returns the parse state.", 
            "title": "fun box  state(): (((((((((_PayloadRequest val | _PayloadResponse val) | _PayloadHeaders val) | _PayloadContentLength val) | _PayloadChunkStart val) | _PayloadChunk val) | _PayloadChunkEnd val) | _PayloadBody val) | _PayloadReady val) | _PayloadError val)"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#fun-ref-parsechunkbuffer-buffer-ref-none-val", 
            "text": "Look for a chunk.", 
            "title": "fun ref  parsechunk(buffer: Buffer ref): None val"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#fun-ref-parsechunk_endbuffer-buffer-ref-none-val", 
            "text": "Look for a blank line.", 
            "title": "fun ref  parsechunk_end(buffer: Buffer ref): None val"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#fun-ref-parsechunk_startbuffer-buffer-ref-none-val", 
            "text": "Look for the beginning of a chunk.", 
            "title": "fun ref  parsechunk_start(buffer: Buffer ref): None val"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#fun-ref-parsecontent_lengthbuffer-buffer-ref-none-val", 
            "text": "Look for _content_length available bytes.", 
            "title": "fun ref  parsecontent_length(buffer: Buffer ref): None val"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#fun-ref-parseheadersbuffer-buffer-ref-none-val", 
            "text": "Look for: \" : \" or an empty line.", 
            "title": "fun ref  parseheaders(buffer: Buffer ref): None val"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#fun-ref-parserequestbuffer-buffer-ref-none-val", 
            "text": "Look for: \"     \".", 
            "title": "fun ref  parserequest(buffer: Buffer ref): None val"
        }, 
        {
            "location": "/net-http-_PayloadBuilder/#fun-ref-parseresponsebuffer-buffer-ref-none-val", 
            "text": "Look for: \"     \".", 
            "title": "fun ref  parseresponse(buffer: Buffer ref): None val"
        }, 
        {
            "location": "/net-http-_PayloadChunk/", 
            "text": "primitive net/http/_PayloadChunk\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PayloadChunk\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PayloadChunk\n val): \nBool\n val", 
            "title": "primitive _PayloadChunk"
        }, 
        {
            "location": "/net-http-_PayloadChunk/#primitive-nethttp_payloadchunk", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/_PayloadChunk"
        }, 
        {
            "location": "/net-http-_PayloadChunk/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_PayloadChunk/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_PayloadChunk/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_PayloadChunk/#fun-box-eqthat-_payloadchunk-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PayloadChunk val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadChunk/#fun-box-nethat-_payloadchunk-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PayloadChunk val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadChunkEnd/", 
            "text": "primitive net/http/_PayloadChunkEnd\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PayloadChunkEnd\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PayloadChunkEnd\n val): \nBool\n val", 
            "title": "primitive _PayloadChunkEnd"
        }, 
        {
            "location": "/net-http-_PayloadChunkEnd/#primitive-nethttp_payloadchunkend", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/_PayloadChunkEnd"
        }, 
        {
            "location": "/net-http-_PayloadChunkEnd/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_PayloadChunkEnd/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_PayloadChunkEnd/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_PayloadChunkEnd/#fun-box-eqthat-_payloadchunkend-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PayloadChunkEnd val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadChunkEnd/#fun-box-nethat-_payloadchunkend-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PayloadChunkEnd val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadChunkStart/", 
            "text": "primitive net/http/_PayloadChunkStart\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PayloadChunkStart\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PayloadChunkStart\n val): \nBool\n val", 
            "title": "primitive _PayloadChunkStart"
        }, 
        {
            "location": "/net-http-_PayloadChunkStart/#primitive-nethttp_payloadchunkstart", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/_PayloadChunkStart"
        }, 
        {
            "location": "/net-http-_PayloadChunkStart/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_PayloadChunkStart/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_PayloadChunkStart/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_PayloadChunkStart/#fun-box-eqthat-_payloadchunkstart-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PayloadChunkStart val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadChunkStart/#fun-box-nethat-_payloadchunkstart-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PayloadChunkStart val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadContentLength/", 
            "text": "primitive net/http/_PayloadContentLength\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PayloadContentLength\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PayloadContentLength\n val): \nBool\n val", 
            "title": "primitive _PayloadContentLength"
        }, 
        {
            "location": "/net-http-_PayloadContentLength/#primitive-nethttp_payloadcontentlength", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/_PayloadContentLength"
        }, 
        {
            "location": "/net-http-_PayloadContentLength/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_PayloadContentLength/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_PayloadContentLength/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_PayloadContentLength/#fun-box-eqthat-_payloadcontentlength-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PayloadContentLength val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadContentLength/#fun-box-nethat-_payloadcontentlength-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PayloadContentLength val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadError/", 
            "text": "primitive net/http/_PayloadError\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PayloadError\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PayloadError\n val): \nBool\n val", 
            "title": "primitive _PayloadError"
        }, 
        {
            "location": "/net-http-_PayloadError/#primitive-nethttp_payloaderror", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/_PayloadError"
        }, 
        {
            "location": "/net-http-_PayloadError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_PayloadError/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_PayloadError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_PayloadError/#fun-box-eqthat-_payloaderror-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PayloadError val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadError/#fun-box-nethat-_payloaderror-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PayloadError val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadHeaders/", 
            "text": "primitive net/http/_PayloadHeaders\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PayloadHeaders\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PayloadHeaders\n val): \nBool\n val", 
            "title": "primitive _PayloadHeaders"
        }, 
        {
            "location": "/net-http-_PayloadHeaders/#primitive-nethttp_payloadheaders", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/_PayloadHeaders"
        }, 
        {
            "location": "/net-http-_PayloadHeaders/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_PayloadHeaders/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_PayloadHeaders/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_PayloadHeaders/#fun-box-eqthat-_payloadheaders-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PayloadHeaders val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadHeaders/#fun-box-nethat-_payloadheaders-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PayloadHeaders val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadReady/", 
            "text": "primitive net/http/_PayloadReady\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PayloadReady\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PayloadReady\n val): \nBool\n val", 
            "title": "primitive _PayloadReady"
        }, 
        {
            "location": "/net-http-_PayloadReady/#primitive-nethttp_payloadready", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/_PayloadReady"
        }, 
        {
            "location": "/net-http-_PayloadReady/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_PayloadReady/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_PayloadReady/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_PayloadReady/#fun-box-eqthat-_payloadready-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PayloadReady val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadReady/#fun-box-nethat-_payloadready-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PayloadReady val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadRequest/", 
            "text": "primitive net/http/_PayloadRequest\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PayloadRequest\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PayloadRequest\n val): \nBool\n val", 
            "title": "primitive _PayloadRequest"
        }, 
        {
            "location": "/net-http-_PayloadRequest/#primitive-nethttp_payloadrequest", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/_PayloadRequest"
        }, 
        {
            "location": "/net-http-_PayloadRequest/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_PayloadRequest/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_PayloadRequest/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_PayloadRequest/#fun-box-eqthat-_payloadrequest-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PayloadRequest val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadRequest/#fun-box-nethat-_payloadrequest-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PayloadRequest val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadResponse/", 
            "text": "primitive net/http/_PayloadResponse\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PayloadResponse\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PayloadResponse\n val): \nBool\n val", 
            "title": "primitive _PayloadResponse"
        }, 
        {
            "location": "/net-http-_PayloadResponse/#primitive-nethttp_payloadresponse", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/_PayloadResponse"
        }, 
        {
            "location": "/net-http-_PayloadResponse/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_PayloadResponse/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_PayloadResponse/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_PayloadResponse/#fun-box-eqthat-_payloadresponse-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PayloadResponse val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadResponse/#fun-box-nethat-_payloadresponse-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PayloadResponse val): Bool val"
        }, 
        {
            "location": "/net-http-_PayloadState/", 
            "text": "type net/http/_PayloadState is (((((((((\n_PayloadRequest\n val | \n_PayloadResponse\n val) | \n_PayloadHeaders\n val) | \n_PayloadContentLength\n val) | \n_PayloadChunkStart\n val) | \n_PayloadChunk\n val) | \n_PayloadChunkEnd\n val) | \n_PayloadBody\n val) | \n_PayloadReady\n val) | \n_PayloadError\n val)\n\n\nNo doc string provided.", 
            "title": "type _PayloadState"
        }, 
        {
            "location": "/net-http-_PayloadState/#type-nethttp_payloadstate-is-_payloadrequest-val-_payloadresponse-val-_payloadheaders-val-_payloadcontentlength-val-_payloadchunkstart-val-_payloadchunk-val-_payloadchunkend-val-_payloadbody-val-_payloadready-val-_payloaderror-val", 
            "text": "No doc string provided.", 
            "title": "type net/http/_PayloadState is (((((((((_PayloadRequest val | _PayloadResponse val) | _PayloadHeaders val) | _PayloadContentLength val) | _PayloadChunkStart val) | _PayloadChunk val) | _PayloadChunkEnd val) | _PayloadBody val) | _PayloadReady val) | _PayloadError val)"
        }, 
        {
            "location": "/net-http-_RequestBuilder/", 
            "text": "class net/http/_RequestBuilder is \nTCPConnectionNotify\n ref\n\n\nDefault capability\n: \nref\n\n\nThis builds a request payload using received chunks of data.\n\n\nConstructors\n\n\nnew \ncreate\n(handler: \nRequestHandler\n val, logger: \nLogger\n val)\n\n\nPublic Functions\n\n\nfun ref  \naccepted\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nCreate a server connection to handle response ordering.\n\n\nfun ref  \nauth_failed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nfun ref  \nclosed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nfun ref  \nconnect_failed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nfun ref  \nconnected\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nfun ref  \nconnecting\n(conn: \nTCPConnection\n ref, count: \nU32\n val): \nNone\n val\n\n\nfun ref  \nreceived\n(conn: \nTCPConnection\n ref, data: \nArray\n[\nU8\n val] iso): \nNone\n val\n\n\nAssemble chunks of data into a request. When we have a whole request,\ndispatch it.\n\n\nfun ref  \nsent\n(conn: \nTCPConnection\n ref, data: (\nString\n val | \nArray\n[\nU8\n val] val)): (\nString\n val | \nArray\n[\nU8\n val] val) ?", 
            "title": "class _RequestBuilder"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#class-nethttp_requestbuilder-is-tcpconnectionnotify-ref", 
            "text": "Default capability :  ref  This builds a request payload using received chunks of data.", 
            "title": "class net/http/_RequestBuilder is TCPConnectionNotify ref"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#new-createhandler-requesthandler-val-logger-logger-val", 
            "text": "", 
            "title": "new create(handler: RequestHandler val, logger: Logger val)"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#fun-ref-acceptedconn-tcpconnection-ref-none-val", 
            "text": "Create a server connection to handle response ordering.", 
            "title": "fun ref  accepted(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#fun-ref-auth_failedconn-tcpconnection-ref-none-val", 
            "text": "", 
            "title": "fun ref  auth_failed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#fun-ref-closedconn-tcpconnection-ref-none-val", 
            "text": "", 
            "title": "fun ref  closed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#fun-ref-connect_failedconn-tcpconnection-ref-none-val", 
            "text": "", 
            "title": "fun ref  connect_failed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#fun-ref-connectedconn-tcpconnection-ref-none-val", 
            "text": "", 
            "title": "fun ref  connected(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#fun-ref-connectingconn-tcpconnection-ref-count-u32-val-none-val", 
            "text": "", 
            "title": "fun ref  connecting(conn: TCPConnection ref, count: U32 val): None val"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#fun-ref-receivedconn-tcpconnection-ref-data-array91u8-val93-iso-none-val", 
            "text": "Assemble chunks of data into a request. When we have a whole request,\ndispatch it.", 
            "title": "fun ref  received(conn: TCPConnection ref, data: Array[U8 val] iso): None val"
        }, 
        {
            "location": "/net-http-_RequestBuilder/#fun-ref-sentconn-tcpconnection-ref-data-string-val-array91u8-val93-val-string-val-array91u8-val93-val", 
            "text": "", 
            "title": "fun ref  sent(conn: TCPConnection ref, data: (String val | Array[U8 val] val)): (String val | Array[U8 val] val) ?"
        }, 
        {
            "location": "/net-http-RequestHandler/", 
            "text": "interface net/http/RequestHandler\n\n\nDefault capability\n: \nval\n\n\nHandles requests. May dispatch based on the URL or other rules.\n\n\nPublic Functions\n\n\nfun val  \napply\n(request: \nPayload\n iso): \nAny\n tag\n\n\nEventually generates a response when handed a request.", 
            "title": "interface RequestHandler"
        }, 
        {
            "location": "/net-http-RequestHandler/#interface-nethttprequesthandler", 
            "text": "Default capability :  val  Handles requests. May dispatch based on the URL or other rules.", 
            "title": "interface net/http/RequestHandler"
        }, 
        {
            "location": "/net-http-RequestHandler/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-RequestHandler/#fun-val-applyrequest-payload-iso-any-tag", 
            "text": "Eventually generates a response when handed a request.", 
            "title": "fun val  apply(request: Payload iso): Any tag"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/", 
            "text": "class net/http/_ResponseBuilder is \nTCPConnectionNotify\n ref\n\n\nDefault capability\n: \nref\n\n\nThis builds a response payload using received chunks of data.\n\n\nConstructors\n\n\nnew \ncreate\n(client: \n_ClientConnection\n tag)\n\n\nPublic Functions\n\n\nfun ref  \naccepted\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nfun ref  \nauth_failed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nSSL authentication failed. Tell the client not to proceed.\n\n\nfun ref  \nclosed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nThe connection has closed, possibly prematurely.\n\n\nfun ref  \nconnect_failed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nThe connection could not be established. Tell the client not to proceed.\n\n\nfun ref  \nconnected\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nTell the client we have connected.\n\n\nfun ref  \nconnecting\n(conn: \nTCPConnection\n ref, count: \nU32\n val): \nNone\n val\n\n\nfun ref  \nreceived\n(conn: \nTCPConnection\n ref, data: \nArray\n[\nU8\n val] iso): \nNone\n val\n\n\nAssemble chunks of data into a response. When we have a whole response,\ngive it to the client and start a new one.\n\n\nfun ref  \nsent\n(conn: \nTCPConnection\n ref, data: (\nString\n val | \nArray\n[\nU8\n val] val)): (\nString\n val | \nArray\n[\nU8\n val] val) ?\n\n\nPrivate Functions\n\n\nfun ref  \n_dispatch\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nDispatch responses if we have any.", 
            "title": "class _ResponseBuilder"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#class-nethttp_responsebuilder-is-tcpconnectionnotify-ref", 
            "text": "Default capability :  ref  This builds a response payload using received chunks of data.", 
            "title": "class net/http/_ResponseBuilder is TCPConnectionNotify ref"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#new-createclient-_clientconnection-tag", 
            "text": "", 
            "title": "new create(client: _ClientConnection tag)"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#fun-ref-acceptedconn-tcpconnection-ref-none-val", 
            "text": "", 
            "title": "fun ref  accepted(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#fun-ref-auth_failedconn-tcpconnection-ref-none-val", 
            "text": "SSL authentication failed. Tell the client not to proceed.", 
            "title": "fun ref  auth_failed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#fun-ref-closedconn-tcpconnection-ref-none-val", 
            "text": "The connection has closed, possibly prematurely.", 
            "title": "fun ref  closed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#fun-ref-connect_failedconn-tcpconnection-ref-none-val", 
            "text": "The connection could not be established. Tell the client not to proceed.", 
            "title": "fun ref  connect_failed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#fun-ref-connectedconn-tcpconnection-ref-none-val", 
            "text": "Tell the client we have connected.", 
            "title": "fun ref  connected(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#fun-ref-connectingconn-tcpconnection-ref-count-u32-val-none-val", 
            "text": "", 
            "title": "fun ref  connecting(conn: TCPConnection ref, count: U32 val): None val"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#fun-ref-receivedconn-tcpconnection-ref-data-array91u8-val93-iso-none-val", 
            "text": "Assemble chunks of data into a response. When we have a whole response,\ngive it to the client and start a new one.", 
            "title": "fun ref  received(conn: TCPConnection ref, data: Array[U8 val] iso): None val"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#fun-ref-sentconn-tcpconnection-ref-data-string-val-array91u8-val93-val-string-val-array91u8-val93-val", 
            "text": "", 
            "title": "fun ref  sent(conn: TCPConnection ref, data: (String val | Array[U8 val] val)): (String val | Array[U8 val] val) ?"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-_ResponseBuilder/#fun-ref-_dispatchconn-tcpconnection-ref-none-val", 
            "text": "Dispatch responses if we have any.", 
            "title": "fun ref  _dispatch(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-http-ResponseHandler/", 
            "text": "interface net/http/ResponseHandler\n\n\nDefault capability\n: \nval\n\n\nHandles responses to HTTP requests.\n\n\nPublic Functions\n\n\nfun val  \napply\n(request: \nPayload\n val, response: \nPayload\n val): \nAny\n tag", 
            "title": "interface ResponseHandler"
        }, 
        {
            "location": "/net-http-ResponseHandler/#interface-nethttpresponsehandler", 
            "text": "Default capability :  val  Handles responses to HTTP requests.", 
            "title": "interface net/http/ResponseHandler"
        }, 
        {
            "location": "/net-http-ResponseHandler/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-ResponseHandler/#fun-val-applyrequest-payload-val-response-payload-val-any-tag", 
            "text": "", 
            "title": "fun val  apply(request: Payload val, response: Payload val): Any tag"
        }, 
        {
            "location": "/net-http-Server/", 
            "text": "actor net/http/Server\n\n\nDefault capability\n: \ntag\n\n\nRuns an HTTP server. When routes are changed, the changes are only reflected\nfor new connections. Existing connections continue to use the old routes.\n\n\nConstructors\n\n\nnew \ncreate\n(notify: \nServerNotify\n iso, handler: \nRequestHandler\n val, optional logger: \nLogger\n val, optional host: \nString\n val, optional service: \nString\n val, optional limit: \nUSize\n val, optional sslctx: (\nSSLContext\n val | \nNone\n val))\n\n\nPublic Behaviours\n\n\nbe \ndispose\n()\n\n\nShut down the server.\n\n\nbe \nset_handler\n(handler: \nRequestHandler\n val)\n\n\nReplace the request handler.\n\n\nbe \nset_logger\n(logger: \nLogger\n val)\n\n\nReplace the logger.\n\n\nPublic Functions\n\n\nfun box  \nlocal_address\n(): \nIPAddress\n val\n\n\nReturns the locally bound address.\n\n\nPrivate Behaviours\n\n\nbe \n_closed\n()\n\n\nCalled when we stop listening.\n\n\nbe \n_listening\n(address: \nIPAddress\n val)\n\n\nCalled when we are listening.\n\n\nbe \nnot\nlistening\n()\n\n\nCalled when we fail to listen.", 
            "title": "actor Server"
        }, 
        {
            "location": "/net-http-Server/#actor-nethttpserver", 
            "text": "Default capability :  tag  Runs an HTTP server. When routes are changed, the changes are only reflected\nfor new connections. Existing connections continue to use the old routes.", 
            "title": "actor net/http/Server"
        }, 
        {
            "location": "/net-http-Server/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-Server/#new-createnotify-servernotify-iso-handler-requesthandler-val-optional-logger-logger-val-optional-host-string-val-optional-service-string-val-optional-limit-usize-val-optional-sslctx-sslcontext-val-none-val", 
            "text": "", 
            "title": "new create(notify: ServerNotify iso, handler: RequestHandler val, optional logger: Logger val, optional host: String val, optional service: String val, optional limit: USize val, optional sslctx: (SSLContext val | None val))"
        }, 
        {
            "location": "/net-http-Server/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-http-Server/#be-dispose", 
            "text": "Shut down the server.", 
            "title": "be dispose()"
        }, 
        {
            "location": "/net-http-Server/#be-set_handlerhandler-requesthandler-val", 
            "text": "Replace the request handler.", 
            "title": "be set_handler(handler: RequestHandler val)"
        }, 
        {
            "location": "/net-http-Server/#be-set_loggerlogger-logger-val", 
            "text": "Replace the logger.", 
            "title": "be set_logger(logger: Logger val)"
        }, 
        {
            "location": "/net-http-Server/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-Server/#fun-box-local_address-ipaddress-val", 
            "text": "Returns the locally bound address.", 
            "title": "fun box  local_address(): IPAddress val"
        }, 
        {
            "location": "/net-http-Server/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-http-Server/#be-_closed", 
            "text": "Called when we stop listening.", 
            "title": "be _closed()"
        }, 
        {
            "location": "/net-http-Server/#be-_listeningaddress-ipaddress-val", 
            "text": "Called when we are listening.", 
            "title": "be _listening(address: IPAddress val)"
        }, 
        {
            "location": "/net-http-Server/#be-notlistening", 
            "text": "Called when we fail to listen.", 
            "title": "be notlistening()"
        }, 
        {
            "location": "/net-http-_ServerConnection/", 
            "text": "actor net/http/_ServerConnection\n\n\nDefault capability\n: \ntag\n\n\nManages a stream of requests to a server, ordering the responses.\n\n\nConstructors\n\n\nnew \ncreate\n(handler: \nRequestHandler\n val, logger: \nLogger\n val, conn: \nTCPConnection\n tag, client_ip: \nString\n val)\n\n\nPublic Behaviours\n\n\nbe \nanswer\n(request: \nPayload\n val, response: \nPayload\n val)\n\n\nAssociate a response with the given request and send responses in the\ncorrect order.\n\n\nbe \ndispatch\n(request: \nPayload\n iso)\n\n\nDispatch requests. We can have many safe requests dispatched at once, or a\nsingle unsafe request, since the client may expect an initial unsafe\nrequest to alter the answer to following requests.\n\n\nPublic Functions\n\n\nfun box  \nis_safe\n(method: \nString\n val): \nBool\n val\n\n\nReturn true for a safe request method, false otherwise.\n\n\nPrivate Functions\n\n\nfun ref  \ndispatch\npending\n(): \nNone\n val\n\n\nIf we have pending requests, dispatch as many as we can.\n\n\nfun ref  \n_send\n(request: \nPayload\n val, response: \nPayload\n val): \nNone\n val\n\n\nSend a single response.\n\n\nfun ref  \nsend\nresponses\n(): \nNone\n val\n\n\nSend available responses in the correct order.", 
            "title": "actor _ServerConnection"
        }, 
        {
            "location": "/net-http-_ServerConnection/#actor-nethttp_serverconnection", 
            "text": "Default capability :  tag  Manages a stream of requests to a server, ordering the responses.", 
            "title": "actor net/http/_ServerConnection"
        }, 
        {
            "location": "/net-http-_ServerConnection/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ServerConnection/#new-createhandler-requesthandler-val-logger-logger-val-conn-tcpconnection-tag-client_ip-string-val", 
            "text": "", 
            "title": "new create(handler: RequestHandler val, logger: Logger val, conn: TCPConnection tag, client_ip: String val)"
        }, 
        {
            "location": "/net-http-_ServerConnection/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-http-_ServerConnection/#be-answerrequest-payload-val-response-payload-val", 
            "text": "Associate a response with the given request and send responses in the\ncorrect order.", 
            "title": "be answer(request: Payload val, response: Payload val)"
        }, 
        {
            "location": "/net-http-_ServerConnection/#be-dispatchrequest-payload-iso", 
            "text": "Dispatch requests. We can have many safe requests dispatched at once, or a\nsingle unsafe request, since the client may expect an initial unsafe\nrequest to alter the answer to following requests.", 
            "title": "be dispatch(request: Payload iso)"
        }, 
        {
            "location": "/net-http-_ServerConnection/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ServerConnection/#fun-box-is_safemethod-string-val-bool-val", 
            "text": "Return true for a safe request method, false otherwise.", 
            "title": "fun box  is_safe(method: String val): Bool val"
        }, 
        {
            "location": "/net-http-_ServerConnection/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-_ServerConnection/#fun-ref-dispatchpending-none-val", 
            "text": "If we have pending requests, dispatch as many as we can.", 
            "title": "fun ref  dispatchpending(): None val"
        }, 
        {
            "location": "/net-http-_ServerConnection/#fun-ref-_sendrequest-payload-val-response-payload-val-none-val", 
            "text": "Send a single response.", 
            "title": "fun ref  _send(request: Payload val, response: Payload val): None val"
        }, 
        {
            "location": "/net-http-_ServerConnection/#fun-ref-sendresponses-none-val", 
            "text": "Send available responses in the correct order.", 
            "title": "fun ref  sendresponses(): None val"
        }, 
        {
            "location": "/net-http-_ServerListener/", 
            "text": "class net/http/_ServerListener is \nTCPListenNotify\n ref\n\n\nDefault capability\n: \nref\n\n\nManages the listening socket for an HTTP server.\n\n\nConstructors\n\n\nnew \ncreate\n(server: \nServer\n tag, sslctx: (\nSSLContext\n val | \nNone\n val), handler: \nRequestHandler\n val, logger: \nLogger\n val)\n\n\nCreates a new listening socket manager.\n\n\nPublic Functions\n\n\nfun ref  \nclosed\n(listen: \nTCPListener\n ref): \nNone\n val\n\n\nInform the server we have stopped listening.\n\n\nfun ref  \nconnected\n(listen: \nTCPListener\n ref): \nTCPConnectionNotify\n iso^\n\n\nCreate a notifier for a specific HTTP socket.\n\n\nfun ref  \nlistening\n(listen: \nTCPListener\n ref): \nNone\n val\n\n\nInform the server of the bound IP address.\n\n\nfun ref  \nnot_listening\n(listen: \nTCPListener\n ref): \nNone\n val\n\n\nInform the server we failed to listen.", 
            "title": "class _ServerListener"
        }, 
        {
            "location": "/net-http-_ServerListener/#class-nethttp_serverlistener-is-tcplistennotify-ref", 
            "text": "Default capability :  ref  Manages the listening socket for an HTTP server.", 
            "title": "class net/http/_ServerListener is TCPListenNotify ref"
        }, 
        {
            "location": "/net-http-_ServerListener/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ServerListener/#new-createserver-server-tag-sslctx-sslcontext-val-none-val-handler-requesthandler-val-logger-logger-val", 
            "text": "Creates a new listening socket manager.", 
            "title": "new create(server: Server tag, sslctx: (SSLContext val | None val), handler: RequestHandler val, logger: Logger val)"
        }, 
        {
            "location": "/net-http-_ServerListener/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ServerListener/#fun-ref-closedlisten-tcplistener-ref-none-val", 
            "text": "Inform the server we have stopped listening.", 
            "title": "fun ref  closed(listen: TCPListener ref): None val"
        }, 
        {
            "location": "/net-http-_ServerListener/#fun-ref-connectedlisten-tcplistener-ref-tcpconnectionnotify-iso", 
            "text": "Create a notifier for a specific HTTP socket.", 
            "title": "fun ref  connected(listen: TCPListener ref): TCPConnectionNotify iso^"
        }, 
        {
            "location": "/net-http-_ServerListener/#fun-ref-listeninglisten-tcplistener-ref-none-val", 
            "text": "Inform the server of the bound IP address.", 
            "title": "fun ref  listening(listen: TCPListener ref): None val"
        }, 
        {
            "location": "/net-http-_ServerListener/#fun-ref-not_listeninglisten-tcplistener-ref-none-val", 
            "text": "Inform the server we failed to listen.", 
            "title": "fun ref  not_listening(listen: TCPListener ref): None val"
        }, 
        {
            "location": "/net-http-ServerNotify/", 
            "text": "interface net/http/ServerNotify\n\n\nDefault capability\n: \nref\n\n\nNotifications for HTTP servers.\n\n\nPublic Functions\n\n\nfun ref  \nclosed\n(server: \nServer\n ref): \nNone\n val\n\n\nCalled when we stop listening.\n\n\nfun ref  \nlistening\n(server: \nServer\n ref): \nNone\n val\n\n\nCalled when we are listening.\n\n\nfun ref  \nnot_listening\n(server: \nServer\n ref): \nNone\n val\n\n\nCalled when we fail to listen.", 
            "title": "interface ServerNotify"
        }, 
        {
            "location": "/net-http-ServerNotify/#interface-nethttpservernotify", 
            "text": "Default capability :  ref  Notifications for HTTP servers.", 
            "title": "interface net/http/ServerNotify"
        }, 
        {
            "location": "/net-http-ServerNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-ServerNotify/#fun-ref-closedserver-server-ref-none-val", 
            "text": "Called when we stop listening.", 
            "title": "fun ref  closed(server: Server ref): None val"
        }, 
        {
            "location": "/net-http-ServerNotify/#fun-ref-listeningserver-server-ref-none-val", 
            "text": "Called when we are listening.", 
            "title": "fun ref  listening(server: Server ref): None val"
        }, 
        {
            "location": "/net-http-ServerNotify/#fun-ref-not_listeningserver-server-ref-none-val", 
            "text": "Called when we fail to listen.", 
            "title": "fun ref  not_listening(server: Server ref): None val"
        }, 
        {
            "location": "/net-http-_Test/", 
            "text": "primitive net/http/_Test\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val, url: \nURL\n val, scheme: \nString\n val, user: \nString\n val, password: \nString\n val, host: \nString\n val, port: \nU16\n val, path: \nString\n val, query: \nString\n val, fragment: \nString\n val): \nNone\n val\n\n\nfun box  \neq\n(that: \n_Test\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_Test\n val): \nBool\n val", 
            "title": "primitive _Test"
        }, 
        {
            "location": "/net-http-_Test/#primitive-nethttp_test", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/_Test"
        }, 
        {
            "location": "/net-http-_Test/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_Test/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_Test/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_Test/#fun-box-applyh-testhelper-val-url-url-val-scheme-string-val-user-string-val-password-string-val-host-string-val-port-u16-val-path-string-val-query-string-val-fragment-string-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val, url: URL val, scheme: String val, user: String val, password: String val, host: String val, port: U16 val, path: String val, query: String val, fragment: String val): None val"
        }, 
        {
            "location": "/net-http-_Test/#fun-box-eqthat-_test-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _Test val): Bool val"
        }, 
        {
            "location": "/net-http-_Test/#fun-box-nethat-_test-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _Test val): Bool val"
        }, 
        {
            "location": "/net-http-_ToStringFun/", 
            "text": "class net/http/_ToStringFun is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _ToStringFun"
        }, 
        {
            "location": "/net-http-_ToStringFun/#class-nethttp_tostringfun-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_ToStringFun is UnitTest ref"
        }, 
        {
            "location": "/net-http-_ToStringFun/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ToStringFun/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_ToStringFun/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ToStringFun/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/net-http-_ToStringFun/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_ToStringFun/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_ToStringFun/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_ToStringFun/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-URL/", 
            "text": "class net/http/URL\n\n\nDefault capability\n: \nval\n\n\nHolds the components of a URL. These are always stored as valid, URL-encoded\nvalues.\n\n\nPublic fields\n\n\n\n\nvar fragment: \nString\n val\n\n\nvar host: \nString\n val\n\n\nvar password: \nString\n val\n\n\nvar path: \nString\n val\n\n\nvar port: \nU16\n val\n\n\nvar query: \nString\n val\n\n\nvar scheme: \nString\n val\n\n\nvar user: \nString\n val\n\n\n\n\nConstructors\n\n\nnew \nbuild\n(from: \nString\n val, optional percent_encoded: \nBool\n val) ?\n\n\nnew \ncreate\n()\n\n\nnew \nvalid\n(from: \nString\n val) ?\n\n\nPublic Functions\n\n\nfun box  \ndefault_port\n(): \nU16\n val\n\n\nReport the default port for our scheme.\nReturns 0 for unrecognised schemes.\n\n\nfun box  \nis_valid\n(): \nBool\n val\n\n\nReturn true if all elements are correctly URL encoded.\n\n\nfun val  \njoin\n(that: \nURL\n val): \nURL\n val\n\n\nUsing this as a base URL, concatenate with another, possibly relative, URL\nin the same way a browser does for a link.\n\n\nfun box  \nstring\n(optional fmt: \nFormatDefault\n val, optional prefix: \nPrefixDefault\n val, optional prec: \nUSize\n val, optional width: \nUSize\n val, optional align: ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val), optional fill: \nU32\n val): \nString\n iso^\n\n\nCombine the components into a string.\n\n\nPrivate Functions\n\n\nfun ref  \n_parse\n(from: \nString\n val): \nNone\n val ?\n\n\nParse the given string as a URL.\nRaises an error on invalid port number.\n\n\nfun box  \nparse\nhostport\n(hostport: \nString\n val): (\nString\n val , \nString\n val)\n\n\nSplit the given \"host and port\" string into the host and port parts.\n\n\nfun box  \nparse\npart\n(from: \nString\n val, prefix: \nString\n val, terminators: \nString\n val, offset: \nISize\n val): (\nISize\n val , \nString\n val)\n\n\nAttempt to parse the specified part out of the given string.\nOnly attempt the parse if the given prefix is found first. Pass \"\" if no\nprefix is needed.\nThe part ends when any one of the given terminator characters is found, or\nthe end of the input is reached.\nThe offset of the terminator is returned, if one is found.\n\n\nfun box  \nparse\nscheme\n(from: \nString\n val): (\nISize\n val , \nString\n val)\n\n\nFind the scheme, if any, at the start of the given string.\nThe offset of the part following the scheme is returned.\n\n\nfun box  \n_split\n(src: \nString\n val, separator: \nU8\n val): (\nString\n val , \nString\n val)\n\n\nSplit the given string in 2 around the first instance of the specified\nseparator.\nIf the string does not contain the separator then the first resulting\nstring is the whole src and the second is empty.", 
            "title": "class URL"
        }, 
        {
            "location": "/net-http-URL/#class-nethttpurl", 
            "text": "Default capability :  val  Holds the components of a URL. These are always stored as valid, URL-encoded\nvalues.", 
            "title": "class net/http/URL"
        }, 
        {
            "location": "/net-http-URL/#public-fields", 
            "text": "var fragment:  String  val  var host:  String  val  var password:  String  val  var path:  String  val  var port:  U16  val  var query:  String  val  var scheme:  String  val  var user:  String  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/net-http-URL/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URL/#new-buildfrom-string-val-optional-percent_encoded-bool-val", 
            "text": "", 
            "title": "new build(from: String val, optional percent_encoded: Bool val) ?"
        }, 
        {
            "location": "/net-http-URL/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-URL/#new-validfrom-string-val", 
            "text": "", 
            "title": "new valid(from: String val) ?"
        }, 
        {
            "location": "/net-http-URL/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URL/#fun-box-default_port-u16-val", 
            "text": "Report the default port for our scheme.\nReturns 0 for unrecognised schemes.", 
            "title": "fun box  default_port(): U16 val"
        }, 
        {
            "location": "/net-http-URL/#fun-box-is_valid-bool-val", 
            "text": "Return true if all elements are correctly URL encoded.", 
            "title": "fun box  is_valid(): Bool val"
        }, 
        {
            "location": "/net-http-URL/#fun-val-jointhat-url-val-url-val", 
            "text": "Using this as a base URL, concatenate with another, possibly relative, URL\nin the same way a browser does for a link.", 
            "title": "fun val  join(that: URL val): URL val"
        }, 
        {
            "location": "/net-http-URL/#fun-box-stringoptional-fmt-formatdefault-val-optional-prefix-prefixdefault-val-optional-prec-usize-val-optional-width-usize-val-optional-align-alignleft-val-alignright-val-aligncenter-val-optional-fill-u32-val-string-iso", 
            "text": "Combine the components into a string.", 
            "title": "fun box  string(optional fmt: FormatDefault val, optional prefix: PrefixDefault val, optional prec: USize val, optional width: USize val, optional align: ((AlignLeft val | AlignRight val) | AlignCenter val), optional fill: U32 val): String iso^"
        }, 
        {
            "location": "/net-http-URL/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-URL/#fun-ref-_parsefrom-string-val-none-val", 
            "text": "Parse the given string as a URL.\nRaises an error on invalid port number.", 
            "title": "fun ref  _parse(from: String val): None val ?"
        }, 
        {
            "location": "/net-http-URL/#fun-box-parsehostporthostport-string-val-string-val-string-val", 
            "text": "Split the given \"host and port\" string into the host and port parts.", 
            "title": "fun box  parsehostport(hostport: String val): (String val , String val)"
        }, 
        {
            "location": "/net-http-URL/#fun-box-parsepartfrom-string-val-prefix-string-val-terminators-string-val-offset-isize-val-isize-val-string-val", 
            "text": "Attempt to parse the specified part out of the given string.\nOnly attempt the parse if the given prefix is found first. Pass \"\" if no\nprefix is needed.\nThe part ends when any one of the given terminator characters is found, or\nthe end of the input is reached.\nThe offset of the terminator is returned, if one is found.", 
            "title": "fun box  parsepart(from: String val, prefix: String val, terminators: String val, offset: ISize val): (ISize val , String val)"
        }, 
        {
            "location": "/net-http-URL/#fun-box-parseschemefrom-string-val-isize-val-string-val", 
            "text": "Find the scheme, if any, at the start of the given string.\nThe offset of the part following the scheme is returned.", 
            "title": "fun box  parsescheme(from: String val): (ISize val , String val)"
        }, 
        {
            "location": "/net-http-URL/#fun-box-_splitsrc-string-val-separator-u8-val-string-val-string-val", 
            "text": "Split the given string in 2 around the first instance of the specified\nseparator.\nIf the string does not contain the separator then the first resulting\nstring is the whole src and the second is empty.", 
            "title": "fun box  _split(src: String val, separator: U8 val): (String val , String val)"
        }, 
        {
            "location": "/net-http-URLEncode/", 
            "text": "primitive net/http/URLEncode\n\n\nDefault capability\n: \nval\n\n\nFunctions for checking, encoding, and decoding parts of URLs.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \ncheck\n(from: \nString\n val, part: (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val)): \nBool\n val\n\n\nCheck that the given string is valid to be the given URL part without\nfurther encoding.\nCanonical form is not checked for, merely validity.\n\n\nfun box  \ncheck_scheme\n(scheme: \nString\n val): \nBool\n val\n\n\nCheck that the given string is a valid scheme.\n\n\nfun box  \ndecode\n(from: \nString\n val): \nString\n val ?\n\n\nURL decode a string. Raise an error on invalid URL encoded.\n\n\nfun box  \nencode\n(from: \nString\n val, part: (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val), optional percent_encoded: \nBool\n val): \nString\n val ?\n\n\nURL encode and normilase the given string.\nThe percent_encoded parameter indicates how '%' characters should be\ninterpretted.\ntrue =\n given string is already at least partially encoded, so '%'s\n  indicate an encoded character.\nfalse =\n given string is not yet encoded at all, so '%'s are just '%'s.\nAn error is raised on invalid existing encoding or illegal characters that\ncannot be encoded.\n\n\nfun box  \neq\n(that: \nURLEncode\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nURLEncode\n val): \nBool\n val\n\n\nPrivate Functions\n\n\nfun box  \n_hex\n(value: \nU8\n val): \nU8\n val ?\n\n\nTurn 4 bits into a hex value.\n\n\nfun box  \nis\nchar_legal\n(value: \nU8\n val, part: (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val)): \nBool\n val\n\n\nDetermine whether the given character is legal to appear in the specified\nURL part.\n\n\nfun box  \nis\nhost_ipv6\n(host: \nString\n val, part: (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val)): \nBool\n val ?\n\n\nCheck whether the given string is a valid IPv6 format host.\nReturns:\n  true if string is a valid IPv6 format host.\n  false if string is not an IPv6 foramt host at all.\n  Raises an error if string is an invalid IPv6 format host.\n\n\nfun box  \nnormal\ndecode\n(value: \nU8\n val, part: (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val)): \nBool\n val\n\n\nDetermine whether the given character should be decoded to give normal\nform.\nSome characters, such as sub-delims, are valid to have either in encoded or\nunencoded form. These should be left as they are when normalising. This\nwill return false for such characters.\n\n\nfun box  \n_unhex\n(value: \nU8\n val): \nU8\n val ?\n\n\nTurn a hex value into 4 bits.", 
            "title": "primitive URLEncode"
        }, 
        {
            "location": "/net-http-URLEncode/#primitive-nethttpurlencode", 
            "text": "Default capability :  val  Functions for checking, encoding, and decoding parts of URLs.", 
            "title": "primitive net/http/URLEncode"
        }, 
        {
            "location": "/net-http-URLEncode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLEncode/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-URLEncode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLEncode/#fun-box-checkfrom-string-val-part-urlpartuser-val-urlpartpassword-val-urlparthost-val-urlpartpath-val-urlpartquery-val-urlpartfragment-val-bool-val", 
            "text": "Check that the given string is valid to be the given URL part without\nfurther encoding.\nCanonical form is not checked for, merely validity.", 
            "title": "fun box  check(from: String val, part: (((((URLPartUser val | URLPartPassword val) | URLPartHost val) | URLPartPath val) | URLPartQuery val) | URLPartFragment val)): Bool val"
        }, 
        {
            "location": "/net-http-URLEncode/#fun-box-check_schemescheme-string-val-bool-val", 
            "text": "Check that the given string is a valid scheme.", 
            "title": "fun box  check_scheme(scheme: String val): Bool val"
        }, 
        {
            "location": "/net-http-URLEncode/#fun-box-decodefrom-string-val-string-val", 
            "text": "URL decode a string. Raise an error on invalid URL encoded.", 
            "title": "fun box  decode(from: String val): String val ?"
        }, 
        {
            "location": "/net-http-URLEncode/#fun-box-encodefrom-string-val-part-urlpartuser-val-urlpartpassword-val-urlparthost-val-urlpartpath-val-urlpartquery-val-urlpartfragment-val-optional-percent_encoded-bool-val-string-val", 
            "text": "URL encode and normilase the given string.\nThe percent_encoded parameter indicates how '%' characters should be\ninterpretted.\ntrue =  given string is already at least partially encoded, so '%'s\n  indicate an encoded character.\nfalse =  given string is not yet encoded at all, so '%'s are just '%'s.\nAn error is raised on invalid existing encoding or illegal characters that\ncannot be encoded.", 
            "title": "fun box  encode(from: String val, part: (((((URLPartUser val | URLPartPassword val) | URLPartHost val) | URLPartPath val) | URLPartQuery val) | URLPartFragment val), optional percent_encoded: Bool val): String val ?"
        }, 
        {
            "location": "/net-http-URLEncode/#fun-box-eqthat-urlencode-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: URLEncode val): Bool val"
        }, 
        {
            "location": "/net-http-URLEncode/#fun-box-nethat-urlencode-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: URLEncode val): Bool val"
        }, 
        {
            "location": "/net-http-URLEncode/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-URLEncode/#fun-box-_hexvalue-u8-val-u8-val", 
            "text": "Turn 4 bits into a hex value.", 
            "title": "fun box  _hex(value: U8 val): U8 val ?"
        }, 
        {
            "location": "/net-http-URLEncode/#fun-box-ischar_legalvalue-u8-val-part-urlpartuser-val-urlpartpassword-val-urlparthost-val-urlpartpath-val-urlpartquery-val-urlpartfragment-val-bool-val", 
            "text": "Determine whether the given character is legal to appear in the specified\nURL part.", 
            "title": "fun box  ischar_legal(value: U8 val, part: (((((URLPartUser val | URLPartPassword val) | URLPartHost val) | URLPartPath val) | URLPartQuery val) | URLPartFragment val)): Bool val"
        }, 
        {
            "location": "/net-http-URLEncode/#fun-box-ishost_ipv6host-string-val-part-urlpartuser-val-urlpartpassword-val-urlparthost-val-urlpartpath-val-urlpartquery-val-urlpartfragment-val-bool-val", 
            "text": "Check whether the given string is a valid IPv6 format host.\nReturns:\n  true if string is a valid IPv6 format host.\n  false if string is not an IPv6 foramt host at all.\n  Raises an error if string is an invalid IPv6 format host.", 
            "title": "fun box  ishost_ipv6(host: String val, part: (((((URLPartUser val | URLPartPassword val) | URLPartHost val) | URLPartPath val) | URLPartQuery val) | URLPartFragment val)): Bool val ?"
        }, 
        {
            "location": "/net-http-URLEncode/#fun-box-normaldecodevalue-u8-val-part-urlpartuser-val-urlpartpassword-val-urlparthost-val-urlpartpath-val-urlpartquery-val-urlpartfragment-val-bool-val", 
            "text": "Determine whether the given character should be decoded to give normal\nform.\nSome characters, such as sub-delims, are valid to have either in encoded or\nunencoded form. These should be left as they are when normalising. This\nwill return false for such characters.", 
            "title": "fun box  normaldecode(value: U8 val, part: (((((URLPartUser val | URLPartPassword val) | URLPartHost val) | URLPartPath val) | URLPartQuery val) | URLPartFragment val)): Bool val"
        }, 
        {
            "location": "/net-http-URLEncode/#fun-box-_unhexvalue-u8-val-u8-val", 
            "text": "Turn a hex value into 4 bits.", 
            "title": "fun box  _unhex(value: U8 val): U8 val ?"
        }, 
        {
            "location": "/net-http-URLPart/", 
            "text": "type net/http/URLPart is (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val)\n\n\nNo doc string provided.", 
            "title": "type URLPart"
        }, 
        {
            "location": "/net-http-URLPart/#type-nethttpurlpart-is-urlpartuser-val-urlpartpassword-val-urlparthost-val-urlpartpath-val-urlpartquery-val-urlpartfragment-val", 
            "text": "No doc string provided.", 
            "title": "type net/http/URLPart is (((((URLPartUser val | URLPartPassword val) | URLPartHost val) | URLPartPath val) | URLPartQuery val) | URLPartFragment val)"
        }, 
        {
            "location": "/net-http-URLPartFragment/", 
            "text": "primitive net/http/URLPartFragment\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nURLPartFragment\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nURLPartFragment\n val): \nBool\n val", 
            "title": "primitive URLPartFragment"
        }, 
        {
            "location": "/net-http-URLPartFragment/#primitive-nethttpurlpartfragment", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/URLPartFragment"
        }, 
        {
            "location": "/net-http-URLPartFragment/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartFragment/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-URLPartFragment/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartFragment/#fun-box-eqthat-urlpartfragment-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: URLPartFragment val): Bool val"
        }, 
        {
            "location": "/net-http-URLPartFragment/#fun-box-nethat-urlpartfragment-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: URLPartFragment val): Bool val"
        }, 
        {
            "location": "/net-http-URLPartHost/", 
            "text": "primitive net/http/URLPartHost\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nURLPartHost\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nURLPartHost\n val): \nBool\n val", 
            "title": "primitive URLPartHost"
        }, 
        {
            "location": "/net-http-URLPartHost/#primitive-nethttpurlparthost", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/URLPartHost"
        }, 
        {
            "location": "/net-http-URLPartHost/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartHost/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-URLPartHost/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartHost/#fun-box-eqthat-urlparthost-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: URLPartHost val): Bool val"
        }, 
        {
            "location": "/net-http-URLPartHost/#fun-box-nethat-urlparthost-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: URLPartHost val): Bool val"
        }, 
        {
            "location": "/net-http-URLPartPassword/", 
            "text": "primitive net/http/URLPartPassword\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nURLPartPassword\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nURLPartPassword\n val): \nBool\n val", 
            "title": "primitive URLPartPassword"
        }, 
        {
            "location": "/net-http-URLPartPassword/#primitive-nethttpurlpartpassword", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/URLPartPassword"
        }, 
        {
            "location": "/net-http-URLPartPassword/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartPassword/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-URLPartPassword/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartPassword/#fun-box-eqthat-urlpartpassword-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: URLPartPassword val): Bool val"
        }, 
        {
            "location": "/net-http-URLPartPassword/#fun-box-nethat-urlpartpassword-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: URLPartPassword val): Bool val"
        }, 
        {
            "location": "/net-http-URLPartPath/", 
            "text": "primitive net/http/URLPartPath\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nURLPartPath\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nURLPartPath\n val): \nBool\n val", 
            "title": "primitive URLPartPath"
        }, 
        {
            "location": "/net-http-URLPartPath/#primitive-nethttpurlpartpath", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/URLPartPath"
        }, 
        {
            "location": "/net-http-URLPartPath/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartPath/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-URLPartPath/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartPath/#fun-box-eqthat-urlpartpath-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: URLPartPath val): Bool val"
        }, 
        {
            "location": "/net-http-URLPartPath/#fun-box-nethat-urlpartpath-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: URLPartPath val): Bool val"
        }, 
        {
            "location": "/net-http-URLPartQuery/", 
            "text": "primitive net/http/URLPartQuery\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nURLPartQuery\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nURLPartQuery\n val): \nBool\n val", 
            "title": "primitive URLPartQuery"
        }, 
        {
            "location": "/net-http-URLPartQuery/#primitive-nethttpurlpartquery", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/URLPartQuery"
        }, 
        {
            "location": "/net-http-URLPartQuery/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartQuery/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-URLPartQuery/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartQuery/#fun-box-eqthat-urlpartquery-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: URLPartQuery val): Bool val"
        }, 
        {
            "location": "/net-http-URLPartQuery/#fun-box-nethat-urlpartquery-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: URLPartQuery val): Bool val"
        }, 
        {
            "location": "/net-http-URLPartUser/", 
            "text": "primitive net/http/URLPartUser\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nURLPartUser\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nURLPartUser\n val): \nBool\n val", 
            "title": "primitive URLPartUser"
        }, 
        {
            "location": "/net-http-URLPartUser/#primitive-nethttpurlpartuser", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/http/URLPartUser"
        }, 
        {
            "location": "/net-http-URLPartUser/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartUser/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-URLPartUser/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartUser/#fun-box-eqthat-urlpartuser-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: URLPartUser val): Bool val"
        }, 
        {
            "location": "/net-http-URLPartUser/#fun-box-nethat-urlpartuser-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: URLPartUser val): Bool val"
        }, 
        {
            "location": "/net-http-_Valid/", 
            "text": "class net/http/_Valid is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _Valid"
        }, 
        {
            "location": "/net-http-_Valid/#class-nethttp_valid-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class net/http/_Valid is UnitTest ref"
        }, 
        {
            "location": "/net-http-_Valid/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_Valid/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-http-_Valid/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_Valid/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/net-http-_Valid/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/net-http-_Valid/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/net-http-_Valid/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-http-_Valid/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/net-ssl--index/", 
            "text": "No package doc string provided for net/ssl.\n\n\nEntities\n\n\n\n\nprimitive _BIO\n\n\nprimitive _GeneralName\n\n\nprimitive _GeneralNameStack\n\n\nprimitive _SSL\n\n\nclass SSL\n\n\nprimitive SSLAuthFail\n\n\nclass SSLConnection\n\n\nprimitive _SSLContext\n\n\nclass SSLContext\n\n\nprimitive SSLError\n\n\nprimitive SSLHandshake\n\n\nprimitive _SSLInit\n\n\nprimitive SSLReady\n\n\ntype SSLState\n\n\nprimitive X509\n\n\nprimitive _X509Name", 
            "title": "Package"
        }, 
        {
            "location": "/net-ssl--index/#entities", 
            "text": "primitive _BIO  primitive _GeneralName  primitive _GeneralNameStack  primitive _SSL  class SSL  primitive SSLAuthFail  class SSLConnection  primitive _SSLContext  class SSLContext  primitive SSLError  primitive SSLHandshake  primitive _SSLInit  primitive SSLReady  type SSLState  primitive X509  primitive _X509Name", 
            "title": "Entities"
        }, 
        {
            "location": "/net-ssl-_BIO/", 
            "text": "primitive net/ssl/_BIO\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_BIO\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_BIO\n val): \nBool\n val", 
            "title": "primitive _BIO"
        }, 
        {
            "location": "/net-ssl-_BIO/#primitive-netssl_bio", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/ssl/_BIO"
        }, 
        {
            "location": "/net-ssl-_BIO/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_BIO/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-_BIO/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_BIO/#fun-box-eqthat-_bio-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _BIO val): Bool val"
        }, 
        {
            "location": "/net-ssl-_BIO/#fun-box-nethat-_bio-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _BIO val): Bool val"
        }, 
        {
            "location": "/net-ssl-_GeneralName/", 
            "text": "primitive net/ssl/_GeneralName\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_GeneralName\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_GeneralName\n val): \nBool\n val", 
            "title": "primitive _GeneralName"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#primitive-netssl_generalname", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/ssl/_GeneralName"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#fun-box-eqthat-_generalname-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _GeneralName val): Bool val"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#fun-box-nethat-_generalname-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _GeneralName val): Bool val"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/", 
            "text": "primitive net/ssl/_GeneralNameStack\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_GeneralNameStack\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_GeneralNameStack\n val): \nBool\n val", 
            "title": "primitive _GeneralNameStack"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#primitive-netssl_generalnamestack", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/ssl/_GeneralNameStack"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#fun-box-eqthat-_generalnamestack-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _GeneralNameStack val): Bool val"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#fun-box-nethat-_generalnamestack-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _GeneralNameStack val): Bool val"
        }, 
        {
            "location": "/net-ssl-_SSL/", 
            "text": "primitive net/ssl/_SSL\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_SSL\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_SSL\n val): \nBool\n val", 
            "title": "primitive _SSL"
        }, 
        {
            "location": "/net-ssl-_SSL/#primitive-netssl_ssl", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/ssl/_SSL"
        }, 
        {
            "location": "/net-ssl-_SSL/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_SSL/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-_SSL/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_SSL/#fun-box-eqthat-_ssl-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _SSL val): Bool val"
        }, 
        {
            "location": "/net-ssl-_SSL/#fun-box-nethat-_ssl-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _SSL val): Bool val"
        }, 
        {
            "location": "/net-ssl-SSL/", 
            "text": "class net/ssl/SSL\n\n\nDefault capability\n: \nref\n\n\nAn SSL session manages handshakes, encryption and decryption. It is not tied\nto any transport layer.\n\n\nConstructors\n\n\nnew \n_create\n(ctx: \nPointer\n[\n_SSLContext\n val] tag, server: \nBool\n val, verify: \nBool\n val, optional hostname: \nString\n val) ?\n\n\nPublic Functions\n\n\nfun ref  \ndispose\n(): \nNone\n val\n\n\nDispose of the session.\n\n\nfun ref  \nread\n(): \nArray\n[\nU8\n val] iso^ ?\n\n\nReturns unencrypted bytes to be passed to the application. Raises an error\nif no data is available.\n\n\nfun ref  \nreceive\n(data: (\nString\n val | \nArray\n[\nU8\n val] val)): \nNone\n val\n\n\nWhen data is received, add it to the SSL session.\n\n\nfun ref  \nsend\n(): \nArray\n[\nU8\n val] val ?\n\n\nReturns encrypted bytes to be passed to the destination. Raises an error\nif no data is available.\n\n\nfun box  \nstate\n(): (((\nSSLHandshake\n val | \nSSLAuthFail\n val) | \nSSLReady\n val) | \nSSLError\n val)\n\n\nReturns the SSL session state.\n\n\nfun ref  \nwrite\n(data: (\nString\n val | \nArray\n[\nU8\n val] val)): \nNone\n val ?\n\n\nWhen application data is sent, add it to the SSL session. Raises an error\nif the handshake is not complete.\n\n\nPrivate Functions\n\n\nfun box  \n_final\n(): \nNone\n val\n\n\nDispose of the session.\n\n\nfun ref  \nverify\nhostname\n(): \nNone\n val\n\n\nVerify that the certificate is valid for the given hostname.", 
            "title": "class SSL"
        }, 
        {
            "location": "/net-ssl-SSL/#class-netsslssl", 
            "text": "Default capability :  ref  An SSL session manages handshakes, encryption and decryption. It is not tied\nto any transport layer.", 
            "title": "class net/ssl/SSL"
        }, 
        {
            "location": "/net-ssl-SSL/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSL/#new-_createctx-pointer91_sslcontext-val93-tag-server-bool-val-verify-bool-val-optional-hostname-string-val", 
            "text": "", 
            "title": "new _create(ctx: Pointer[_SSLContext val] tag, server: Bool val, verify: Bool val, optional hostname: String val) ?"
        }, 
        {
            "location": "/net-ssl-SSL/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSL/#fun-ref-dispose-none-val", 
            "text": "Dispose of the session.", 
            "title": "fun ref  dispose(): None val"
        }, 
        {
            "location": "/net-ssl-SSL/#fun-ref-read-array91u8-val93-iso", 
            "text": "Returns unencrypted bytes to be passed to the application. Raises an error\nif no data is available.", 
            "title": "fun ref  read(): Array[U8 val] iso^ ?"
        }, 
        {
            "location": "/net-ssl-SSL/#fun-ref-receivedata-string-val-array91u8-val93-val-none-val", 
            "text": "When data is received, add it to the SSL session.", 
            "title": "fun ref  receive(data: (String val | Array[U8 val] val)): None val"
        }, 
        {
            "location": "/net-ssl-SSL/#fun-ref-send-array91u8-val93-val", 
            "text": "Returns encrypted bytes to be passed to the destination. Raises an error\nif no data is available.", 
            "title": "fun ref  send(): Array[U8 val] val ?"
        }, 
        {
            "location": "/net-ssl-SSL/#fun-box-state-sslhandshake-val-sslauthfail-val-sslready-val-sslerror-val", 
            "text": "Returns the SSL session state.", 
            "title": "fun box  state(): (((SSLHandshake val | SSLAuthFail val) | SSLReady val) | SSLError val)"
        }, 
        {
            "location": "/net-ssl-SSL/#fun-ref-writedata-string-val-array91u8-val93-val-none-val", 
            "text": "When application data is sent, add it to the SSL session. Raises an error\nif the handshake is not complete.", 
            "title": "fun ref  write(data: (String val | Array[U8 val] val)): None val ?"
        }, 
        {
            "location": "/net-ssl-SSL/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-ssl-SSL/#fun-box-_final-none-val", 
            "text": "Dispose of the session.", 
            "title": "fun box  _final(): None val"
        }, 
        {
            "location": "/net-ssl-SSL/#fun-ref-verifyhostname-none-val", 
            "text": "Verify that the certificate is valid for the given hostname.", 
            "title": "fun ref  verifyhostname(): None val"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/", 
            "text": "primitive net/ssl/SSLAuthFail\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nSSLAuthFail\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nSSLAuthFail\n val): \nBool\n val", 
            "title": "primitive SSLAuthFail"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#primitive-netsslsslauthfail", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/ssl/SSLAuthFail"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#fun-box-eqthat-sslauthfail-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: SSLAuthFail val): Bool val"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#fun-box-nethat-sslauthfail-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: SSLAuthFail val): Bool val"
        }, 
        {
            "location": "/net-ssl-SSLConnection/", 
            "text": "class net/ssl/SSLConnection is \nTCPConnectionNotify\n ref\n\n\nDefault capability\n: \nref\n\n\nWrap another protocol in an SSL connection.\n\n\nConstructors\n\n\nnew \ncreate\n(notify: \nTCPConnectionNotify\n iso, ssl: \nSSL\n iso)\n\n\nPublic Functions\n\n\nfun ref  \naccepted\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nForward to the wrapped protocol.\n\n\nfun ref  \nauth_failed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nfun ref  \nclosed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nForward to the wrapped protocol.\n\n\nfun ref  \nconnect_failed\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nForward to the wrapped protocol.\n\n\nfun ref  \nconnected\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nSwallow this event until the handshake is complete.\n\n\nfun ref  \nconnecting\n(conn: \nTCPConnection\n ref, count: \nU32\n val): \nNone\n val\n\n\nForward to the wrapped protocol.\n\n\nfun ref  \nreceived\n(conn: \nTCPConnection\n ref, data: \nArray\n[\nU8\n val] iso): \nNone\n val\n\n\nPass the data to the SSL session and check for both new application data\nand new destination data.\n\n\nfun ref  \nsent\n(conn: \nTCPConnection\n ref, data: (\nString\n val | \nArray\n[\nU8\n val] val)): (\nString\n val | \nArray\n[\nU8\n val] val) ?\n\n\nPass the data to the SSL session and check for both new application data\nand new destination data.\n\n\nPrivate Functions\n\n\nfun ref  \n_poll\n(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nChecks for both new application data and new destination data. Informs the\nwrapped protocol that is has connected when the handshake is complete.", 
            "title": "class SSLConnection"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#class-netsslsslconnection-is-tcpconnectionnotify-ref", 
            "text": "Default capability :  ref  Wrap another protocol in an SSL connection.", 
            "title": "class net/ssl/SSLConnection is TCPConnectionNotify ref"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#new-createnotify-tcpconnectionnotify-iso-ssl-ssl-iso", 
            "text": "", 
            "title": "new create(notify: TCPConnectionNotify iso, ssl: SSL iso)"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#fun-ref-acceptedconn-tcpconnection-ref-none-val", 
            "text": "Forward to the wrapped protocol.", 
            "title": "fun ref  accepted(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#fun-ref-auth_failedconn-tcpconnection-ref-none-val", 
            "text": "", 
            "title": "fun ref  auth_failed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#fun-ref-closedconn-tcpconnection-ref-none-val", 
            "text": "Forward to the wrapped protocol.", 
            "title": "fun ref  closed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#fun-ref-connect_failedconn-tcpconnection-ref-none-val", 
            "text": "Forward to the wrapped protocol.", 
            "title": "fun ref  connect_failed(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#fun-ref-connectedconn-tcpconnection-ref-none-val", 
            "text": "Swallow this event until the handshake is complete.", 
            "title": "fun ref  connected(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#fun-ref-connectingconn-tcpconnection-ref-count-u32-val-none-val", 
            "text": "Forward to the wrapped protocol.", 
            "title": "fun ref  connecting(conn: TCPConnection ref, count: U32 val): None val"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#fun-ref-receivedconn-tcpconnection-ref-data-array91u8-val93-iso-none-val", 
            "text": "Pass the data to the SSL session and check for both new application data\nand new destination data.", 
            "title": "fun ref  received(conn: TCPConnection ref, data: Array[U8 val] iso): None val"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#fun-ref-sentconn-tcpconnection-ref-data-string-val-array91u8-val93-val-string-val-array91u8-val93-val", 
            "text": "Pass the data to the SSL session and check for both new application data\nand new destination data.", 
            "title": "fun ref  sent(conn: TCPConnection ref, data: (String val | Array[U8 val] val)): (String val | Array[U8 val] val) ?"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#fun-ref-_pollconn-tcpconnection-ref-none-val", 
            "text": "Checks for both new application data and new destination data. Informs the\nwrapped protocol that is has connected when the handshake is complete.", 
            "title": "fun ref  _poll(conn: TCPConnection ref): None val"
        }, 
        {
            "location": "/net-ssl-_SSLContext/", 
            "text": "primitive net/ssl/_SSLContext\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_SSLContext\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_SSLContext\n val): \nBool\n val", 
            "title": "primitive _SSLContext"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#primitive-netssl_sslcontext", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/ssl/_SSLContext"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#fun-box-eqthat-_sslcontext-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _SSLContext val): Bool val"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#fun-box-nethat-_sslcontext-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _SSLContext val): Bool val"
        }, 
        {
            "location": "/net-ssl-SSLContext/", 
            "text": "class net/ssl/SSLContext\n\n\nDefault capability\n: \nval\n\n\nAn SSL context is used to create SSL sessions.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun ref  \nallow_tls_v1\n(state: \nBool\n val): \nSSLContext\n ref^\n\n\nAllow TLS v1. Defaults to true.\n\n\nfun ref  \nallow_tls_v1_1\n(state: \nBool\n val): \nSSLContext\n ref^\n\n\nAllow TLS v1.1. Defaults to true.\n\n\nfun ref  \nallow_tls_v1_2\n(state: \nBool\n val): \nSSLContext\n ref^\n\n\nAllow TLS v1.2. Defaults to true.\n\n\nfun box  \nclient\n(optional hostname: \nString\n val): \nSSL\n iso^ ?\n\n\nCreate a client-side SSL session. If a hostname is supplied, the server\nside certificate must be valid for that hostname.\n\n\nfun ref  \ndispose\n(): \nNone\n val\n\n\nFree the SSL context.\n\n\nfun box  \nserver\n(): \nSSL\n iso^ ?\n\n\nCreate a server-side SSL session.\n\n\nfun ref  \nset_authority\n(file: \nString\n val, optional path: \nString\n val): \nSSLContext\n ref^ ?\n\n\nUse a PEM file and/or a directory of PEM files to specify certificate\nauthorities. Clients must set this. For servers, it is optional. Use an\nempty string to indicate no file or no path. Raises an error if these\nverify locations aren't valid, or if both are empty strings.\n\n\nfun ref  \nset_cert\n(cert: \nString\n val, key: \nString\n val): \nSSLContext\n ref^ ?\n\n\nThe cert file is a PEM certificate chain. The key file is a private key.\nServers must set this. For clients, it is optional.\n\n\nfun ref  \nset_ciphers\n(ciphers: \nString\n val): \nSSLContext\n ref^ ?\n\n\nSet the accepted ciphers. This replaces the existing list. Raises an error\nif the cipher list is invalid.\n\n\nfun ref  \nset_client_verify\n(state: \nBool\n val): \nSSLContext\n ref^\n\n\nSet to true to require verification. Defaults to true.\n\n\nfun ref  \nset_server_verify\n(state: \nBool\n val): \nSSLContext\n ref^\n\n\nSet to true to require verification. Defaults to false.\n\n\nfun ref  \nset_verify_depth\n(depth: \nU32\n val): \nSSLContext\n ref^\n\n\nSet the verify depth. Defaults to 6.\n\n\nPrivate Functions\n\n\nfun box  \n_final\n(): \nNone\n val\n\n\nFree the SSL context.", 
            "title": "class SSLContext"
        }, 
        {
            "location": "/net-ssl-SSLContext/#class-netsslsslcontext", 
            "text": "Default capability :  val  An SSL context is used to create SSL sessions.", 
            "title": "class net/ssl/SSLContext"
        }, 
        {
            "location": "/net-ssl-SSLContext/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLContext/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-SSLContext/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-ref-allow_tls_v1state-bool-val-sslcontext-ref", 
            "text": "Allow TLS v1. Defaults to true.", 
            "title": "fun ref  allow_tls_v1(state: Bool val): SSLContext ref^"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-ref-allow_tls_v1_1state-bool-val-sslcontext-ref", 
            "text": "Allow TLS v1.1. Defaults to true.", 
            "title": "fun ref  allow_tls_v1_1(state: Bool val): SSLContext ref^"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-ref-allow_tls_v1_2state-bool-val-sslcontext-ref", 
            "text": "Allow TLS v1.2. Defaults to true.", 
            "title": "fun ref  allow_tls_v1_2(state: Bool val): SSLContext ref^"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-box-clientoptional-hostname-string-val-ssl-iso", 
            "text": "Create a client-side SSL session. If a hostname is supplied, the server\nside certificate must be valid for that hostname.", 
            "title": "fun box  client(optional hostname: String val): SSL iso^ ?"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-ref-dispose-none-val", 
            "text": "Free the SSL context.", 
            "title": "fun ref  dispose(): None val"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-box-server-ssl-iso", 
            "text": "Create a server-side SSL session.", 
            "title": "fun box  server(): SSL iso^ ?"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-ref-set_authorityfile-string-val-optional-path-string-val-sslcontext-ref", 
            "text": "Use a PEM file and/or a directory of PEM files to specify certificate\nauthorities. Clients must set this. For servers, it is optional. Use an\nempty string to indicate no file or no path. Raises an error if these\nverify locations aren't valid, or if both are empty strings.", 
            "title": "fun ref  set_authority(file: String val, optional path: String val): SSLContext ref^ ?"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-ref-set_certcert-string-val-key-string-val-sslcontext-ref", 
            "text": "The cert file is a PEM certificate chain. The key file is a private key.\nServers must set this. For clients, it is optional.", 
            "title": "fun ref  set_cert(cert: String val, key: String val): SSLContext ref^ ?"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-ref-set_ciphersciphers-string-val-sslcontext-ref", 
            "text": "Set the accepted ciphers. This replaces the existing list. Raises an error\nif the cipher list is invalid.", 
            "title": "fun ref  set_ciphers(ciphers: String val): SSLContext ref^ ?"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-ref-set_client_verifystate-bool-val-sslcontext-ref", 
            "text": "Set to true to require verification. Defaults to true.", 
            "title": "fun ref  set_client_verify(state: Bool val): SSLContext ref^"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-ref-set_server_verifystate-bool-val-sslcontext-ref", 
            "text": "Set to true to require verification. Defaults to false.", 
            "title": "fun ref  set_server_verify(state: Bool val): SSLContext ref^"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-ref-set_verify_depthdepth-u32-val-sslcontext-ref", 
            "text": "Set the verify depth. Defaults to 6.", 
            "title": "fun ref  set_verify_depth(depth: U32 val): SSLContext ref^"
        }, 
        {
            "location": "/net-ssl-SSLContext/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-ssl-SSLContext/#fun-box-_final-none-val", 
            "text": "Free the SSL context.", 
            "title": "fun box  _final(): None val"
        }, 
        {
            "location": "/net-ssl-SSLError/", 
            "text": "primitive net/ssl/SSLError\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nSSLError\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nSSLError\n val): \nBool\n val", 
            "title": "primitive SSLError"
        }, 
        {
            "location": "/net-ssl-SSLError/#primitive-netsslsslerror", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/ssl/SSLError"
        }, 
        {
            "location": "/net-ssl-SSLError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLError/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-SSLError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLError/#fun-box-eqthat-sslerror-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: SSLError val): Bool val"
        }, 
        {
            "location": "/net-ssl-SSLError/#fun-box-nethat-sslerror-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: SSLError val): Bool val"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/", 
            "text": "primitive net/ssl/SSLHandshake\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nSSLHandshake\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nSSLHandshake\n val): \nBool\n val", 
            "title": "primitive SSLHandshake"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#primitive-netsslsslhandshake", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/ssl/SSLHandshake"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#fun-box-eqthat-sslhandshake-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: SSLHandshake val): Bool val"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#fun-box-nethat-sslhandshake-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: SSLHandshake val): Bool val"
        }, 
        {
            "location": "/net-ssl-_SSLInit/", 
            "text": "primitive net/ssl/_SSLInit\n\n\nDefault capability\n: \nval\n\n\nThis initialises SSL when the program begins.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_SSLInit\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_SSLInit\n val): \nBool\n val\n\n\nPrivate Functions\n\n\nfun box  \n_init\n(env: \nEnv\n val): \nNone\n val", 
            "title": "primitive _SSLInit"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#primitive-netssl_sslinit", 
            "text": "Default capability :  val  This initialises SSL when the program begins.", 
            "title": "primitive net/ssl/_SSLInit"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#fun-box-eqthat-_sslinit-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _SSLInit val): Bool val"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#fun-box-nethat-_sslinit-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _SSLInit val): Bool val"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#fun-box-_initenv-env-val-none-val", 
            "text": "", 
            "title": "fun box  _init(env: Env val): None val"
        }, 
        {
            "location": "/net-ssl-SSLReady/", 
            "text": "primitive net/ssl/SSLReady\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nSSLReady\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nSSLReady\n val): \nBool\n val", 
            "title": "primitive SSLReady"
        }, 
        {
            "location": "/net-ssl-SSLReady/#primitive-netsslsslready", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/ssl/SSLReady"
        }, 
        {
            "location": "/net-ssl-SSLReady/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLReady/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-SSLReady/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLReady/#fun-box-eqthat-sslready-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: SSLReady val): Bool val"
        }, 
        {
            "location": "/net-ssl-SSLReady/#fun-box-nethat-sslready-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: SSLReady val): Bool val"
        }, 
        {
            "location": "/net-ssl-SSLState/", 
            "text": "type net/ssl/SSLState is (((\nSSLHandshake\n val | \nSSLAuthFail\n val) | \nSSLReady\n val) | \nSSLError\n val)\n\n\nNo doc string provided.", 
            "title": "type SSLState"
        }, 
        {
            "location": "/net-ssl-SSLState/#type-netsslsslstate-is-sslhandshake-val-sslauthfail-val-sslready-val-sslerror-val", 
            "text": "No doc string provided.", 
            "title": "type net/ssl/SSLState is (((SSLHandshake val | SSLAuthFail val) | SSLReady val) | SSLError val)"
        }, 
        {
            "location": "/net-ssl-X509/", 
            "text": "primitive net/ssl/X509\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \nall_names\n(cert: \nPointer\n[\nX509\n val] ref): \nArray\n[\nString\n val] val\n\n\nReturns an array of all names for the certificate. Any names containing\nNULL bytes are not included. This includes the common name and all subject\nalternate names.\n\n\nfun box  \ncommon_name\n(cert: \nPointer\n[\nX509\n val] ref): \nString\n val ?\n\n\nGet the common name for the certificate. Raises an error if the common name\ncontains any NULL bytes.\n\n\nfun box  \neq\n(that: \nX509\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nX509\n val): \nBool\n val\n\n\nfun box  \nvalid_for_host\n(cert: \nPointer\n[\nX509\n val] ref, host: \nString\n val): \nBool\n val\n\n\nChecks if an OpenSSL X509 certificate is valid for a given host.\n\n\nPrivate Functions\n\n\nfun box  \nmatch\nname\n(host: \nString\n val, name: \nString\n val): \nBool\n val\n\n\nReturns true if the name extracted from the certificate is valid for the\ngiven host.", 
            "title": "primitive X509"
        }, 
        {
            "location": "/net-ssl-X509/#primitive-netsslx509", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/ssl/X509"
        }, 
        {
            "location": "/net-ssl-X509/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-X509/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-X509/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-X509/#fun-box-all_namescert-pointer91x509-val93-ref-array91string-val93-val", 
            "text": "Returns an array of all names for the certificate. Any names containing\nNULL bytes are not included. This includes the common name and all subject\nalternate names.", 
            "title": "fun box  all_names(cert: Pointer[X509 val] ref): Array[String val] val"
        }, 
        {
            "location": "/net-ssl-X509/#fun-box-common_namecert-pointer91x509-val93-ref-string-val", 
            "text": "Get the common name for the certificate. Raises an error if the common name\ncontains any NULL bytes.", 
            "title": "fun box  common_name(cert: Pointer[X509 val] ref): String val ?"
        }, 
        {
            "location": "/net-ssl-X509/#fun-box-eqthat-x509-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: X509 val): Bool val"
        }, 
        {
            "location": "/net-ssl-X509/#fun-box-nethat-x509-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: X509 val): Bool val"
        }, 
        {
            "location": "/net-ssl-X509/#fun-box-valid_for_hostcert-pointer91x509-val93-ref-host-string-val-bool-val", 
            "text": "Checks if an OpenSSL X509 certificate is valid for a given host.", 
            "title": "fun box  valid_for_host(cert: Pointer[X509 val] ref, host: String val): Bool val"
        }, 
        {
            "location": "/net-ssl-X509/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-ssl-X509/#fun-box-matchnamehost-string-val-name-string-val-bool-val", 
            "text": "Returns true if the name extracted from the certificate is valid for the\ngiven host.", 
            "title": "fun box  matchname(host: String val, name: String val): Bool val"
        }, 
        {
            "location": "/net-ssl-_X509Name/", 
            "text": "primitive net/ssl/_X509Name\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_X509Name\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_X509Name\n val): \nBool\n val", 
            "title": "primitive _X509Name"
        }, 
        {
            "location": "/net-ssl-_X509Name/#primitive-netssl_x509name", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive net/ssl/_X509Name"
        }, 
        {
            "location": "/net-ssl-_X509Name/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_X509Name/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/net-ssl-_X509Name/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_X509Name/#fun-box-eqthat-_x509name-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _X509Name val): Bool val"
        }, 
        {
            "location": "/net-ssl-_X509Name/#fun-box-nethat-_x509name-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _X509Name val): Bool val"
        }, 
        {
            "location": "/options--index/", 
            "text": "PonyOptions package\n\n\nEntities\n\n\n\n\nprimitive AmbiguousMatch\n\n\ntype ArgumentType\n\n\nprimitive EnvVars\n\n\nclass _ErrorPrinter\n\n\ntype ErrorReason\n\n\nprimitive F64Argument\n\n\nprimitive I64Argument\n\n\nprimitive InvalidArgument\n\n\nactor Main\n\n\nprimitive MissingArgument\n\n\nclass _Option\n\n\nprimitive Optional\n\n\nclass Options\n\n\ninterface ParseError\n\n\ntype ParsedOption\n\n\nprimitive Required\n\n\nprimitive StringArgument\n\n\nclass _TestArgLeadingDash\n\n\nclass _TestCombineShortArg\n\n\nclass _TestCombineShortOptions\n\n\nclass _TestLongOptions\n\n\nprimitive TestOptions\n\n\nclass _TestShortOptions\n\n\nprimitive UnrecognisedOption", 
            "title": "Package"
        }, 
        {
            "location": "/options--index/#ponyoptions-package", 
            "text": "", 
            "title": "PonyOptions package"
        }, 
        {
            "location": "/options--index/#entities", 
            "text": "primitive AmbiguousMatch  type ArgumentType  primitive EnvVars  class _ErrorPrinter  type ErrorReason  primitive F64Argument  primitive I64Argument  primitive InvalidArgument  actor Main  primitive MissingArgument  class _Option  primitive Optional  class Options  interface ParseError  type ParsedOption  primitive Required  primitive StringArgument  class _TestArgLeadingDash  class _TestCombineShortArg  class _TestCombineShortOptions  class _TestLongOptions  primitive TestOptions  class _TestShortOptions  primitive UnrecognisedOption", 
            "title": "Entities"
        }, 
        {
            "location": "/options-AmbiguousMatch/", 
            "text": "primitive options/AmbiguousMatch\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nAmbiguousMatch\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nAmbiguousMatch\n val): \nBool\n val", 
            "title": "primitive AmbiguousMatch"
        }, 
        {
            "location": "/options-AmbiguousMatch/#primitive-optionsambiguousmatch", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive options/AmbiguousMatch"
        }, 
        {
            "location": "/options-AmbiguousMatch/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-AmbiguousMatch/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-AmbiguousMatch/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-AmbiguousMatch/#fun-box-eqthat-ambiguousmatch-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: AmbiguousMatch val): Bool val"
        }, 
        {
            "location": "/options-AmbiguousMatch/#fun-box-nethat-ambiguousmatch-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: AmbiguousMatch val): Bool val"
        }, 
        {
            "location": "/options-ArgumentType/", 
            "text": "type options/ArgumentType is (((\nNone\n val | \nStringArgument\n val) | \nI64Argument\n val) | \nF64Argument\n val)\n\n\nNo doc string provided.", 
            "title": "type ArgumentType"
        }, 
        {
            "location": "/options-ArgumentType/#type-optionsargumenttype-is-none-val-stringargument-val-i64argument-val-f64argument-val", 
            "text": "No doc string provided.", 
            "title": "type options/ArgumentType is (((None val | StringArgument val) | I64Argument val) | F64Argument val)"
        }, 
        {
            "location": "/options-EnvVars/", 
            "text": "primitive options/EnvVars\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(from: \nArray\n[\nString\n val] val): \nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] val\n\n\nTurns an array of strings that look like environment variables, ie\nkey=value, into a map from string to string.\n\n\nfun box  \neq\n(that: \nEnvVars\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nEnvVars\n val): \nBool\n val", 
            "title": "primitive EnvVars"
        }, 
        {
            "location": "/options-EnvVars/#primitive-optionsenvvars", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive options/EnvVars"
        }, 
        {
            "location": "/options-EnvVars/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-EnvVars/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-EnvVars/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-EnvVars/#fun-box-applyfrom-array91string-val93-val-hashmap91string-val-string-val-hasheq91string-val93-val93-val", 
            "text": "Turns an array of strings that look like environment variables, ie\nkey=value, into a map from string to string.", 
            "title": "fun box  apply(from: Array[String val] val): HashMap[String val, String val, HashEq[String val] val] val"
        }, 
        {
            "location": "/options-EnvVars/#fun-box-eqthat-envvars-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: EnvVars val): Bool val"
        }, 
        {
            "location": "/options-EnvVars/#fun-box-nethat-envvars-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: EnvVars val): Bool val"
        }, 
        {
            "location": "/options-_ErrorPrinter/", 
            "text": "class options/_ErrorPrinter\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \n_ambiguous\n(matches: \nArray\n[\n_Option\n ref] ref)\n\n\nnew \n_invalid\n(argument: \nString\n box, option: \n_Option\n ref)\n\n\nnew \n_missing\n(option: \n_Option\n ref)\n\n\nnew \n_unrecognised\n(option: \nString\n box)\n\n\nPublic Functions\n\n\nfun box  \nreason\n(): (((\nUnrecognisedOption\n val | \nMissingArgument\n val) | \nInvalidArgument\n val) | \nAmbiguousMatch\n val)\n\n\nfun box  \nreport\n(out: \nOutStream\n tag): \nNone\n val", 
            "title": "class _ErrorPrinter"
        }, 
        {
            "location": "/options-_ErrorPrinter/#class-options_errorprinter", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class options/_ErrorPrinter"
        }, 
        {
            "location": "/options-_ErrorPrinter/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-_ErrorPrinter/#new-_ambiguousmatches-array91_option-ref93-ref", 
            "text": "", 
            "title": "new _ambiguous(matches: Array[_Option ref] ref)"
        }, 
        {
            "location": "/options-_ErrorPrinter/#new-_invalidargument-string-box-option-_option-ref", 
            "text": "", 
            "title": "new _invalid(argument: String box, option: _Option ref)"
        }, 
        {
            "location": "/options-_ErrorPrinter/#new-_missingoption-_option-ref", 
            "text": "", 
            "title": "new _missing(option: _Option ref)"
        }, 
        {
            "location": "/options-_ErrorPrinter/#new-_unrecognisedoption-string-box", 
            "text": "", 
            "title": "new _unrecognised(option: String box)"
        }, 
        {
            "location": "/options-_ErrorPrinter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-_ErrorPrinter/#fun-box-reason-unrecognisedoption-val-missingargument-val-invalidargument-val-ambiguousmatch-val", 
            "text": "", 
            "title": "fun box  reason(): (((UnrecognisedOption val | MissingArgument val) | InvalidArgument val) | AmbiguousMatch val)"
        }, 
        {
            "location": "/options-_ErrorPrinter/#fun-box-reportout-outstream-tag-none-val", 
            "text": "", 
            "title": "fun box  report(out: OutStream tag): None val"
        }, 
        {
            "location": "/options-ErrorReason/", 
            "text": "type options/ErrorReason is (((\nUnrecognisedOption\n val | \nMissingArgument\n val) | \nInvalidArgument\n val) | \nAmbiguousMatch\n val)\n\n\nNo doc string provided.", 
            "title": "type ErrorReason"
        }, 
        {
            "location": "/options-ErrorReason/#type-optionserrorreason-is-unrecognisedoption-val-missingargument-val-invalidargument-val-ambiguousmatch-val", 
            "text": "No doc string provided.", 
            "title": "type options/ErrorReason is (((UnrecognisedOption val | MissingArgument val) | InvalidArgument val) | AmbiguousMatch val)"
        }, 
        {
            "location": "/options-F64Argument/", 
            "text": "primitive options/F64Argument\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nF64Argument\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nF64Argument\n val): \nBool\n val", 
            "title": "primitive F64Argument"
        }, 
        {
            "location": "/options-F64Argument/#primitive-optionsf64argument", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive options/F64Argument"
        }, 
        {
            "location": "/options-F64Argument/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-F64Argument/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-F64Argument/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-F64Argument/#fun-box-eqthat-f64argument-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: F64Argument val): Bool val"
        }, 
        {
            "location": "/options-F64Argument/#fun-box-nethat-f64argument-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: F64Argument val): Bool val"
        }, 
        {
            "location": "/options-I64Argument/", 
            "text": "primitive options/I64Argument\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nI64Argument\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nI64Argument\n val): \nBool\n val", 
            "title": "primitive I64Argument"
        }, 
        {
            "location": "/options-I64Argument/#primitive-optionsi64argument", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive options/I64Argument"
        }, 
        {
            "location": "/options-I64Argument/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-I64Argument/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-I64Argument/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-I64Argument/#fun-box-eqthat-i64argument-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: I64Argument val): Bool val"
        }, 
        {
            "location": "/options-I64Argument/#fun-box-nethat-i64argument-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: I64Argument val): Bool val"
        }, 
        {
            "location": "/options-InvalidArgument/", 
            "text": "primitive options/InvalidArgument\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nInvalidArgument\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nInvalidArgument\n val): \nBool\n val", 
            "title": "primitive InvalidArgument"
        }, 
        {
            "location": "/options-InvalidArgument/#primitive-optionsinvalidargument", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive options/InvalidArgument"
        }, 
        {
            "location": "/options-InvalidArgument/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-InvalidArgument/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-InvalidArgument/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-InvalidArgument/#fun-box-eqthat-invalidargument-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: InvalidArgument val): Bool val"
        }, 
        {
            "location": "/options-InvalidArgument/#fun-box-nethat-invalidargument-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: InvalidArgument val): Bool val"
        }, 
        {
            "location": "/options-Main/", 
            "text": "actor options/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/options-Main/#actor-optionsmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor options/Main is TestList ref"
        }, 
        {
            "location": "/options-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/options-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/options-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/options-MissingArgument/", 
            "text": "primitive options/MissingArgument\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nMissingArgument\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nMissingArgument\n val): \nBool\n val", 
            "title": "primitive MissingArgument"
        }, 
        {
            "location": "/options-MissingArgument/#primitive-optionsmissingargument", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive options/MissingArgument"
        }, 
        {
            "location": "/options-MissingArgument/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-MissingArgument/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-MissingArgument/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-MissingArgument/#fun-box-eqthat-missingargument-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: MissingArgument val): Bool val"
        }, 
        {
            "location": "/options-MissingArgument/#fun-box-nethat-missingargument-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: MissingArgument val): Bool val"
        }, 
        {
            "location": "/options-_Option/", 
            "text": "class options/_Option\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nPublic fields\n\n\n\n\nlet arg: (((\nNone\n val | \nStringArgument\n val) | \nI64Argument\n val) | \nF64Argument\n val)\n\n\nlet long: \nString\n val\n\n\nlet mode: (\nRequired\n val | \nOptional\n val)\n\n\nlet short: (\nString\n val | \nNone\n val)\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(long': \nString\n val, short': (\nString\n val | \nNone\n val), arg': (((\nNone\n val | \nStringArgument\n val) | \nI64Argument\n val) | \nF64Argument\n val), mode': (\nRequired\n val | \nOptional\n val))\n\n\nPublic Functions\n\n\nfun box  \naccepts\n(argument: \nString\n box): \nBool\n val\n\n\nfun box  \nhas_argument\n(): \nBool\n val\n\n\nfun box  \nmatches\n(name: \nString\n box, shortmatch: \nBool\n val): \nBool\n val\n\n\nfun box  \nrequires_argument\n(): \nBool\n val", 
            "title": "class _Option"
        }, 
        {
            "location": "/options-_Option/#class-options_option", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class options/_Option"
        }, 
        {
            "location": "/options-_Option/#public-fields", 
            "text": "let arg: ((( None  val |  StringArgument  val) |  I64Argument  val) |  F64Argument  val)  let long:  String  val  let mode: ( Required  val |  Optional  val)  let short: ( String  val |  None  val)", 
            "title": "Public fields"
        }, 
        {
            "location": "/options-_Option/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-_Option/#new-createlong-string-val-short-string-val-none-val-arg-none-val-stringargument-val-i64argument-val-f64argument-val-mode-required-val-optional-val", 
            "text": "", 
            "title": "new create(long': String val, short': (String val | None val), arg': (((None val | StringArgument val) | I64Argument val) | F64Argument val), mode': (Required val | Optional val))"
        }, 
        {
            "location": "/options-_Option/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-_Option/#fun-box-acceptsargument-string-box-bool-val", 
            "text": "", 
            "title": "fun box  accepts(argument: String box): Bool val"
        }, 
        {
            "location": "/options-_Option/#fun-box-has_argument-bool-val", 
            "text": "", 
            "title": "fun box  has_argument(): Bool val"
        }, 
        {
            "location": "/options-_Option/#fun-box-matchesname-string-box-shortmatch-bool-val-bool-val", 
            "text": "", 
            "title": "fun box  matches(name: String box, shortmatch: Bool val): Bool val"
        }, 
        {
            "location": "/options-_Option/#fun-box-requires_argument-bool-val", 
            "text": "", 
            "title": "fun box  requires_argument(): Bool val"
        }, 
        {
            "location": "/options-Optional/", 
            "text": "primitive options/Optional\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nOptional\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nOptional\n val): \nBool\n val", 
            "title": "primitive Optional"
        }, 
        {
            "location": "/options-Optional/#primitive-optionsoptional", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive options/Optional"
        }, 
        {
            "location": "/options-Optional/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-Optional/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-Optional/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-Optional/#fun-box-eqthat-optional-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Optional val): Bool val"
        }, 
        {
            "location": "/options-Optional/#fun-box-nethat-optional-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Optional val): Bool val"
        }, 
        {
            "location": "/options-Options/", 
            "text": "class options/Options is \nIterator\n[(((\nString\n val , (((\nNone\n val | \nString\n val) | \nI64\n val) | \nF64\n val)) | \nParseError\n ref) | \nNone\n val)] ref\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val, optional fatal: \nBool\n val)\n\n\nPublic Functions\n\n\nfun ref  \nadd\n(long: \nString\n val, optional short: (\nNone\n val | \nString\n val), optional arg: (((\nNone\n val | \nStringArgument\n val) | \nI64Argument\n val) | \nF64Argument\n val), optional mode: (\nRequired\n val | \nOptional\n val)): \nOptions\n ref\n\n\nAdds a new named option to the parser configuration.\n\n\nfun box  \nhas_next\n(): \nBool\n val\n\n\nParsing options is done if either an error occurs and fatal error reporting\nis turned on, or if all command line arguments have been processed.\n\n\nfun ref  \nnext\n(): (((\nString\n val , (((\nNone\n val | \nString\n val) | \nI64\n val) | \nF64\n val)) | \nParseError\n ref) | \nNone\n val)\n\n\nSkips all positional arguments and attemps to match named options. Returns\na ParsedOption on success, a ParseError on error, or None if no named\noptions are found.\n\n\nfun ref  \nremaining\n(): \nArray\n[\nString\n ref] ref\n\n\nReturns all unprocessed command line arguments. After parsing all options,\nthis will only include positional arguments, potentially unrecognised and\nambiguous options and invalid arguments.\n\n\nPrivate Functions\n\n\nfun ref  \n_select\n(candidate: \nString\n ref, start: \nISize\n val, offset: \nISize\n val, finish: \nISize\n val): (\n_Option\n ref | \nParseError\n ref)\n\n\nSelects an option from the configuration depending on the current command\nline argument.\n\n\nfun ref  \n_skip\n(): \nBool\n val\n\n\nSkips all non-options. Returns true if a named option has been found, false\notherwise.\n\n\nfun ref  \n_strip\n(opt: \n_Option\n ref, matched: \nString\n ref, start: \nISize\n val, finish: \nISize\n val): \nNone\n val\n\n\nStrips accepted options from the copied array of command line arguments.\n\n\nfun ref  \n_verify\n(opt: \n_Option\n ref, combined: \nBool\n val): ((\nString\n val , (((\nNone\n val | \nString\n val) | \nI64\n val) | \nF64\n val)) | \nParseError\n ref)\n\n\nVerifies whether a parsed option from the command line is well-formed. That\nis, checking whether required or optional arguments are supplied. Returns\na ParsedOption on success, a ParseError otherwise.", 
            "title": "class Options"
        }, 
        {
            "location": "/options-Options/#class-optionsoptions-is-iterator91string-val-none-val-string-val-i64-val-f64-val-parseerror-ref-none-val93-ref", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class options/Options is Iterator[(((String val , (((None val | String val) | I64 val) | F64 val)) | ParseError ref) | None val)] ref"
        }, 
        {
            "location": "/options-Options/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-Options/#new-createenv-env-val-optional-fatal-bool-val", 
            "text": "", 
            "title": "new create(env: Env val, optional fatal: Bool val)"
        }, 
        {
            "location": "/options-Options/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-Options/#fun-ref-addlong-string-val-optional-short-none-val-string-val-optional-arg-none-val-stringargument-val-i64argument-val-f64argument-val-optional-mode-required-val-optional-val-options-ref", 
            "text": "Adds a new named option to the parser configuration.", 
            "title": "fun ref  add(long: String val, optional short: (None val | String val), optional arg: (((None val | StringArgument val) | I64Argument val) | F64Argument val), optional mode: (Required val | Optional val)): Options ref"
        }, 
        {
            "location": "/options-Options/#fun-box-has_next-bool-val", 
            "text": "Parsing options is done if either an error occurs and fatal error reporting\nis turned on, or if all command line arguments have been processed.", 
            "title": "fun box  has_next(): Bool val"
        }, 
        {
            "location": "/options-Options/#fun-ref-next-string-val-none-val-string-val-i64-val-f64-val-parseerror-ref-none-val", 
            "text": "Skips all positional arguments and attemps to match named options. Returns\na ParsedOption on success, a ParseError on error, or None if no named\noptions are found.", 
            "title": "fun ref  next(): (((String val , (((None val | String val) | I64 val) | F64 val)) | ParseError ref) | None val)"
        }, 
        {
            "location": "/options-Options/#fun-ref-remaining-array91string-ref93-ref", 
            "text": "Returns all unprocessed command line arguments. After parsing all options,\nthis will only include positional arguments, potentially unrecognised and\nambiguous options and invalid arguments.", 
            "title": "fun ref  remaining(): Array[String ref] ref"
        }, 
        {
            "location": "/options-Options/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/options-Options/#fun-ref-_selectcandidate-string-ref-start-isize-val-offset-isize-val-finish-isize-val-_option-ref-parseerror-ref", 
            "text": "Selects an option from the configuration depending on the current command\nline argument.", 
            "title": "fun ref  _select(candidate: String ref, start: ISize val, offset: ISize val, finish: ISize val): (_Option ref | ParseError ref)"
        }, 
        {
            "location": "/options-Options/#fun-ref-_skip-bool-val", 
            "text": "Skips all non-options. Returns true if a named option has been found, false\notherwise.", 
            "title": "fun ref  _skip(): Bool val"
        }, 
        {
            "location": "/options-Options/#fun-ref-_stripopt-_option-ref-matched-string-ref-start-isize-val-finish-isize-val-none-val", 
            "text": "Strips accepted options from the copied array of command line arguments.", 
            "title": "fun ref  _strip(opt: _Option ref, matched: String ref, start: ISize val, finish: ISize val): None val"
        }, 
        {
            "location": "/options-Options/#fun-ref-_verifyopt-_option-ref-combined-bool-val-string-val-none-val-string-val-i64-val-f64-val-parseerror-ref", 
            "text": "Verifies whether a parsed option from the command line is well-formed. That\nis, checking whether required or optional arguments are supplied. Returns\na ParsedOption on success, a ParseError otherwise.", 
            "title": "fun ref  _verify(opt: _Option ref, combined: Bool val): ((String val , (((None val | String val) | I64 val) | F64 val)) | ParseError ref)"
        }, 
        {
            "location": "/options-ParseError/", 
            "text": "interface options/ParseError\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nPublic Functions\n\n\nfun box  \nreason\n(): (((\nUnrecognisedOption\n val | \nMissingArgument\n val) | \nInvalidArgument\n val) | \nAmbiguousMatch\n val)\n\n\nfun box  \nreport\n(out: \nOutStream\n tag): \nNone\n val", 
            "title": "interface ParseError"
        }, 
        {
            "location": "/options-ParseError/#interface-optionsparseerror", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "interface options/ParseError"
        }, 
        {
            "location": "/options-ParseError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-ParseError/#fun-box-reason-unrecognisedoption-val-missingargument-val-invalidargument-val-ambiguousmatch-val", 
            "text": "", 
            "title": "fun box  reason(): (((UnrecognisedOption val | MissingArgument val) | InvalidArgument val) | AmbiguousMatch val)"
        }, 
        {
            "location": "/options-ParseError/#fun-box-reportout-outstream-tag-none-val", 
            "text": "", 
            "title": "fun box  report(out: OutStream tag): None val"
        }, 
        {
            "location": "/options-ParsedOption/", 
            "text": "type options/ParsedOption is (\nString\n val , (((\nNone\n val | \nString\n val) | \nI64\n val) | \nF64\n val))\n\n\nNo doc string provided.", 
            "title": "type ParsedOption"
        }, 
        {
            "location": "/options-ParsedOption/#type-optionsparsedoption-is-string-val-none-val-string-val-i64-val-f64-val", 
            "text": "No doc string provided.", 
            "title": "type options/ParsedOption is (String val , (((None val | String val) | I64 val) | F64 val))"
        }, 
        {
            "location": "/options-Required/", 
            "text": "primitive options/Required\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nRequired\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nRequired\n val): \nBool\n val", 
            "title": "primitive Required"
        }, 
        {
            "location": "/options-Required/#primitive-optionsrequired", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive options/Required"
        }, 
        {
            "location": "/options-Required/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-Required/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-Required/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-Required/#fun-box-eqthat-required-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Required val): Bool val"
        }, 
        {
            "location": "/options-Required/#fun-box-nethat-required-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Required val): Bool val"
        }, 
        {
            "location": "/options-StringArgument/", 
            "text": "primitive options/StringArgument\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nStringArgument\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nStringArgument\n val): \nBool\n val", 
            "title": "primitive StringArgument"
        }, 
        {
            "location": "/options-StringArgument/#primitive-optionsstringargument", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive options/StringArgument"
        }, 
        {
            "location": "/options-StringArgument/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-StringArgument/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-StringArgument/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-StringArgument/#fun-box-eqthat-stringargument-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: StringArgument val): Bool val"
        }, 
        {
            "location": "/options-StringArgument/#fun-box-nethat-stringargument-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: StringArgument val): Bool val"
        }, 
        {
            "location": "/options-_TestArgLeadingDash/", 
            "text": "class options/_TestArgLeadingDash is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nArguments can only start with a leading dash if they are separated from\nthe option using '=', otherwise they will be interpreted as named options.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestArgLeadingDash"
        }, 
        {
            "location": "/options-_TestArgLeadingDash/#class-options_testargleadingdash-is-unittest-ref", 
            "text": "Default capability :  iso  Arguments can only start with a leading dash if they are separated from\nthe option using '=', otherwise they will be interpreted as named options.", 
            "title": "class options/_TestArgLeadingDash is UnitTest ref"
        }, 
        {
            "location": "/options-_TestArgLeadingDash/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-_TestArgLeadingDash/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-_TestArgLeadingDash/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-_TestArgLeadingDash/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestArgLeadingDash/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/options-_TestArgLeadingDash/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/options-_TestArgLeadingDash/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestArgLeadingDash/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestCombineShortArg/", 
            "text": "class options/_TestCombineShortArg is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nShort options can be combined up to the first option that takes an argument.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestCombineShortArg"
        }, 
        {
            "location": "/options-_TestCombineShortArg/#class-options_testcombineshortarg-is-unittest-ref", 
            "text": "Default capability :  iso  Short options can be combined up to the first option that takes an argument.", 
            "title": "class options/_TestCombineShortArg is UnitTest ref"
        }, 
        {
            "location": "/options-_TestCombineShortArg/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-_TestCombineShortArg/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-_TestCombineShortArg/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-_TestCombineShortArg/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestCombineShortArg/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/options-_TestCombineShortArg/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/options-_TestCombineShortArg/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestCombineShortArg/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestCombineShortOptions/", 
            "text": "class options/_TestCombineShortOptions is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nShort options can be combined into one string with a single leading dash.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestCombineShortOptions"
        }, 
        {
            "location": "/options-_TestCombineShortOptions/#class-options_testcombineshortoptions-is-unittest-ref", 
            "text": "Default capability :  iso  Short options can be combined into one string with a single leading dash.", 
            "title": "class options/_TestCombineShortOptions is UnitTest ref"
        }, 
        {
            "location": "/options-_TestCombineShortOptions/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-_TestCombineShortOptions/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-_TestCombineShortOptions/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-_TestCombineShortOptions/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestCombineShortOptions/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/options-_TestCombineShortOptions/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/options-_TestCombineShortOptions/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestCombineShortOptions/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestLongOptions/", 
            "text": "class options/_TestLongOptions is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nLong options start with two leading dashes, and can be lone, have a following\narg, or combined arg with =.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestLongOptions"
        }, 
        {
            "location": "/options-_TestLongOptions/#class-options_testlongoptions-is-unittest-ref", 
            "text": "Default capability :  iso  Long options start with two leading dashes, and can be lone, have a following\narg, or combined arg with =.", 
            "title": "class options/_TestLongOptions is UnitTest ref"
        }, 
        {
            "location": "/options-_TestLongOptions/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-_TestLongOptions/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-_TestLongOptions/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-_TestLongOptions/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestLongOptions/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/options-_TestLongOptions/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/options-_TestLongOptions/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestLongOptions/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-TestOptions/", 
            "text": "primitive options/TestOptions\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nTestOptions\n val): \nBool\n val\n\n\nfun box  \nfrom\n(renv: \nEnv\n val, args: \nArray\n[\nString\n val] val): \nOptions\n ref\n\n\nfun box  \nne\n(that: \nTestOptions\n val): \nBool\n val", 
            "title": "primitive TestOptions"
        }, 
        {
            "location": "/options-TestOptions/#primitive-optionstestoptions", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive options/TestOptions"
        }, 
        {
            "location": "/options-TestOptions/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-TestOptions/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-TestOptions/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-TestOptions/#fun-box-eqthat-testoptions-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: TestOptions val): Bool val"
        }, 
        {
            "location": "/options-TestOptions/#fun-box-fromrenv-env-val-args-array91string-val93-val-options-ref", 
            "text": "", 
            "title": "fun box  from(renv: Env val, args: Array[String val] val): Options ref"
        }, 
        {
            "location": "/options-TestOptions/#fun-box-nethat-testoptions-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: TestOptions val): Bool val"
        }, 
        {
            "location": "/options-_TestShortOptions/", 
            "text": "class options/_TestShortOptions is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nShort options start with a single leading dash, and can be lone, have a\nfollowing arg, or combined arg with =.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestShortOptions"
        }, 
        {
            "location": "/options-_TestShortOptions/#class-options_testshortoptions-is-unittest-ref", 
            "text": "Default capability :  iso  Short options start with a single leading dash, and can be lone, have a\nfollowing arg, or combined arg with =.", 
            "title": "class options/_TestShortOptions is UnitTest ref"
        }, 
        {
            "location": "/options-_TestShortOptions/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-_TestShortOptions/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-_TestShortOptions/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-_TestShortOptions/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestShortOptions/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/options-_TestShortOptions/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/options-_TestShortOptions/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-_TestShortOptions/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/options-UnrecognisedOption/", 
            "text": "primitive options/UnrecognisedOption\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \nUnrecognisedOption\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nUnrecognisedOption\n val): \nBool\n val", 
            "title": "primitive UnrecognisedOption"
        }, 
        {
            "location": "/options-UnrecognisedOption/#primitive-optionsunrecognisedoption", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive options/UnrecognisedOption"
        }, 
        {
            "location": "/options-UnrecognisedOption/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-UnrecognisedOption/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/options-UnrecognisedOption/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-UnrecognisedOption/#fun-box-eqthat-unrecognisedoption-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: UnrecognisedOption val): Bool val"
        }, 
        {
            "location": "/options-UnrecognisedOption/#fun-box-nethat-unrecognisedoption-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: UnrecognisedOption val): Bool val"
        }, 
        {
            "location": "/ponytest--index/", 
            "text": "PonyTest package\n\n\nThe PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.\n\n\nTo help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:\n  builtin\n  time\n  collections\n\n\nEach unit test is a class, with a single test function. By default all tests\nrun concurrently.\n\n\nEach test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.\n\n\nWhen any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.\n\n\nExample program\n\n\nTo use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.\n\n\nThe following is a complete program with 2 trivial tests.\n\n\nuse \nponytest\n\n\nactor Main is TestList\n  new create(env: Env) =\n\n    PonyTest(env, this)\n\n  new make() =\n\n    None\n\n  fun tag tests(test: PonyTest) =\n\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String =\n \naddition\n\n\n  fun apply(h: TestHelper) =\n\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String =\n \nsubtraction\n\n\n  fun apply(h: TestHelper) =\n\n    h.assert_eq[U32](2, 4 - 2)\n\n\n\n\nThe make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.\n\n\nMain.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.\n\n\nTest names\n\n\nTests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.\n\n\nArbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.\n\n\nAggregation\n\n\nOften it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.\n\n\nThis can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages \nfoo\n and \nbar\n.\n\n\nuse \nponytest\n\nuse foo = \nfoo\n\nuse bar = \nbar\n\n\nactor Main is TestList\n  new create(env: Env) =\n\n    PonyTest(env, this)\n\n  new make() =\n\n    None\n\n  fun tag tests(test: PonyTest) =\n\n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)\n\n\n\n\nAggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.\n\n\nLong tests\n\n\nSimple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.\n\n\nLong tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.\n\n\nThe complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.\n\n\nSince failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.\n\n\nOn a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.\n\n\nNote that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.\n\n\nTimeouts should not be used as the standard method of detecting if a test has\nfailed.\n\n\nExclusion groups\n\n\nBy default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.\n\n\nNo tests that are in the same exclusion group will be run concurrently.\n\n\nExclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.\n\n\nThe command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.\n\n\nTear down\n\n\nEach unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.\n\n\nThe tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.\n\n\nWhen a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.\n\n\nThe test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.\n\n\nEntities\n\n\n\n\nprimitive _Color\n\n\nactor _ExclusiveGroup\n\n\ntrait _Group\n\n\ninterface ITest\n\n\nactor PonyTest\n\n\nactor _SimultaneousGroup\n\n\nclass TestHelper\n\n\ntrait TestList\n\n\nclass _TestRecord\n\n\nactor _TestRunner\n\n\ntrait UnitTest", 
            "title": "Package"
        }, 
        {
            "location": "/ponytest--index/#ponytest-package", 
            "text": "The PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.  To help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:\n  builtin\n  time\n  collections  Each unit test is a class, with a single test function. By default all tests\nrun concurrently.  Each test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.  When any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.", 
            "title": "PonyTest package"
        }, 
        {
            "location": "/ponytest--index/#example-program", 
            "text": "To use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.  The following is a complete program with 2 trivial tests.  use  ponytest \n\nactor Main is TestList\n  new create(env: Env) = \n    PonyTest(env, this)\n\n  new make() = \n    None\n\n  fun tag tests(test: PonyTest) = \n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String =   addition \n\n  fun apply(h: TestHelper) = \n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String =   subtraction \n\n  fun apply(h: TestHelper) = \n    h.assert_eq[U32](2, 4 - 2)  The make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.  Main.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.", 
            "title": "Example program"
        }, 
        {
            "location": "/ponytest--index/#test-names", 
            "text": "Tests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.  Arbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.", 
            "title": "Test names"
        }, 
        {
            "location": "/ponytest--index/#aggregation", 
            "text": "Often it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.  This can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages  foo  and  bar .  use  ponytest \nuse foo =  foo \nuse bar =  bar \n\nactor Main is TestList\n  new create(env: Env) = \n    PonyTest(env, this)\n\n  new make() = \n    None\n\n  fun tag tests(test: PonyTest) = \n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)  Aggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.", 
            "title": "Aggregation"
        }, 
        {
            "location": "/ponytest--index/#long-tests", 
            "text": "Simple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.  Long tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.  The complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.  Since failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.  On a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.  Note that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.  Timeouts should not be used as the standard method of detecting if a test has\nfailed.", 
            "title": "Long tests"
        }, 
        {
            "location": "/ponytest--index/#exclusion-groups", 
            "text": "By default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.  No tests that are in the same exclusion group will be run concurrently.  Exclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.  The command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.", 
            "title": "Exclusion groups"
        }, 
        {
            "location": "/ponytest--index/#tear-down", 
            "text": "Each unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.  The tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.  When a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.  The test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.", 
            "title": "Tear down"
        }, 
        {
            "location": "/ponytest--index/#entities", 
            "text": "primitive _Color  actor _ExclusiveGroup  trait _Group  interface ITest  actor PonyTest  actor _SimultaneousGroup  class TestHelper  trait TestList  class _TestRecord  actor _TestRunner  trait UnitTest", 
            "title": "Entities"
        }, 
        {
            "location": "/ponytest-_Color/", 
            "text": "primitive ponytest/_Color\n\n\nDefault capability\n: \nval\n\n\nStrings to embedded in text to specify colours.\nThese are copies of the strings defined in packages/term. They are duplicated\nhere to avoid a dependency.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_Color\n val): \nBool\n val\n\n\nfun box  \ngreen\n(): \nString\n val\n\n\nBright green text.\n\n\nfun box  \nne\n(that: \n_Color\n val): \nBool\n val\n\n\nfun box  \nred\n(): \nString\n val\n\n\nBright red text.\n\n\nfun box  \nreset\n(): \nString\n val\n\n\nResets all colours and text styles to the default.", 
            "title": "primitive _Color"
        }, 
        {
            "location": "/ponytest-_Color/#primitive-ponytest_color", 
            "text": "Default capability :  val  Strings to embedded in text to specify colours.\nThese are copies of the strings defined in packages/term. They are duplicated\nhere to avoid a dependency.", 
            "title": "primitive ponytest/_Color"
        }, 
        {
            "location": "/ponytest-_Color/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-_Color/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/ponytest-_Color/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ponytest-_Color/#fun-box-eqthat-_color-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _Color val): Bool val"
        }, 
        {
            "location": "/ponytest-_Color/#fun-box-green-string-val", 
            "text": "Bright green text.", 
            "title": "fun box  green(): String val"
        }, 
        {
            "location": "/ponytest-_Color/#fun-box-nethat-_color-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _Color val): Bool val"
        }, 
        {
            "location": "/ponytest-_Color/#fun-box-red-string-val", 
            "text": "Bright red text.", 
            "title": "fun box  red(): String val"
        }, 
        {
            "location": "/ponytest-_Color/#fun-box-reset-string-val", 
            "text": "Resets all colours and text styles to the default.", 
            "title": "fun box  reset(): String val"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/", 
            "text": "actor ponytest/_ExclusiveGroup is \n_Group\n tag\n\n\nDefault capability\n: \ntag\n\n\nTest group in which we only ever have one test running at a time.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Behaviours\n\n\nbe \napply\n(runner: \n_TestRunner\n tag)\n\n\nPrivate Behaviours\n\n\nbe \ntest\ncomplete\n(runner: \n_TestRunner\n tag)", 
            "title": "actor _ExclusiveGroup"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#actor-ponytest_exclusivegroup-is-_group-tag", 
            "text": "Default capability :  tag  Test group in which we only ever have one test running at a time.", 
            "title": "actor ponytest/_ExclusiveGroup is _Group tag"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#be-applyrunner-_testrunner-tag", 
            "text": "", 
            "title": "be apply(runner: _TestRunner tag)"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#be-testcompleterunner-_testrunner-tag", 
            "text": "", 
            "title": "be testcomplete(runner: _TestRunner tag)"
        }, 
        {
            "location": "/ponytest-_Group/", 
            "text": "trait ponytest/_Group\n\n\nDefault capability\n: \ntag\n\n\nTest exclusion is achieved by organising tests into groups. Each group can be\nexclusive, ie only one test is run at a time, or simultaneous, ie all tests\nare run concurrently.\n\n\nPublic Behaviours\n\n\nbe \napply\n(runner: \n_TestRunner\n tag)\n\n\nRun the given test, or queue it and run later, as appropriate.\n\n\nPrivate Behaviours\n\n\nbe \ntest\ncomplete\n(runner: \n_TestRunner\n tag)\n\n\nThe specified test has completed.", 
            "title": "trait _Group"
        }, 
        {
            "location": "/ponytest-_Group/#trait-ponytest_group", 
            "text": "Default capability :  tag  Test exclusion is achieved by organising tests into groups. Each group can be\nexclusive, ie only one test is run at a time, or simultaneous, ie all tests\nare run concurrently.", 
            "title": "trait ponytest/_Group"
        }, 
        {
            "location": "/ponytest-_Group/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponytest-_Group/#be-applyrunner-_testrunner-tag", 
            "text": "Run the given test, or queue it and run later, as appropriate.", 
            "title": "be apply(runner: _TestRunner tag)"
        }, 
        {
            "location": "/ponytest-_Group/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponytest-_Group/#be-testcompleterunner-_testrunner-tag", 
            "text": "The specified test has completed.", 
            "title": "be testcomplete(runner: _TestRunner tag)"
        }, 
        {
            "location": "/ponytest-ITest/", 
            "text": "interface ponytest/ITest\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nPublic Functions\n\n\nfun box  \napply\n(): \nNone\n val ?", 
            "title": "interface ITest"
        }, 
        {
            "location": "/ponytest-ITest/#interface-ponytestitest", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "interface ponytest/ITest"
        }, 
        {
            "location": "/ponytest-ITest/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ponytest-ITest/#fun-box-apply-none-val", 
            "text": "", 
            "title": "fun box  apply(): None val ?"
        }, 
        {
            "location": "/ponytest-PonyTest/", 
            "text": "actor ponytest/PonyTest\n\n\nDefault capability\n: \ntag\n\n\nMain test framework actor that organises tests, collates information and\nprints results.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val, list: \nTestList\n tag)\n\n\nPublic Behaviours\n\n\nbe \napply\n(test: \nUnitTest\n iso)\n\n\nRun the given test, subject to our filter and options.\n\n\nPrivate Behaviours\n\n\nbe \nall\ntests_applied\n()\n\n\nAll our tests have been handed to apply(), setup for finishing\n\n\nbe \ntest\ncomplete\n(id: \nUSize\n val, pass: \nBool\n val, log: \nArray\n[\nString\n val] val)\n\n\nA test has completed, restore its result and update our status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.\n\n\nbe \ntest\nstarted\n(id: \nUSize\n val)\n\n\nA test has started running, update status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.\n\n\nPrivate Functions\n\n\nfun ref  \nfind\ngroup\n(group_name: \nString\n val): \n_Group\n tag\n\n\nFind the group to use for the given group name, subject to the\n--sequential flag.\n\n\nfun box  \n_plural\n(n: \nUSize\n val): \nString\n val\n\n\nReturn a \"s\" or an empty string depending on whether the given number is 1.\nFor use when printing possibly plural words, eg \"test\" or \"tests\".\n\n\nfun box  \nprint\nreport\n(): \nNone\n val\n\n\nThe tests are all complete, print out the results.\n\n\nfun ref  \nprocess\nopts\n(): \nNone\n val\n\n\nProcess our command line options.\nAll command line arguments given must be recognised and make sense.\nState for specified options is stored in object fields.\nWe don't use the options package because we aren't already dependencies.", 
            "title": "actor PonyTest"
        }, 
        {
            "location": "/ponytest-PonyTest/#actor-ponytestponytest", 
            "text": "Default capability :  tag  Main test framework actor that organises tests, collates information and\nprints results.", 
            "title": "actor ponytest/PonyTest"
        }, 
        {
            "location": "/ponytest-PonyTest/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-PonyTest/#new-createenv-env-val-list-testlist-tag", 
            "text": "", 
            "title": "new create(env: Env val, list: TestList tag)"
        }, 
        {
            "location": "/ponytest-PonyTest/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponytest-PonyTest/#be-applytest-unittest-iso", 
            "text": "Run the given test, subject to our filter and options.", 
            "title": "be apply(test: UnitTest iso)"
        }, 
        {
            "location": "/ponytest-PonyTest/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponytest-PonyTest/#be-alltests_applied", 
            "text": "All our tests have been handed to apply(), setup for finishing", 
            "title": "be alltests_applied()"
        }, 
        {
            "location": "/ponytest-PonyTest/#be-testcompleteid-usize-val-pass-bool-val-log-array91string-val93-val", 
            "text": "A test has completed, restore its result and update our status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.", 
            "title": "be testcomplete(id: USize val, pass: Bool val, log: Array[String val] val)"
        }, 
        {
            "location": "/ponytest-PonyTest/#be-teststartedid-usize-val", 
            "text": "A test has started running, update status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.", 
            "title": "be teststarted(id: USize val)"
        }, 
        {
            "location": "/ponytest-PonyTest/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/ponytest-PonyTest/#fun-ref-findgroupgroup_name-string-val-_group-tag", 
            "text": "Find the group to use for the given group name, subject to the\n--sequential flag.", 
            "title": "fun ref  findgroup(group_name: String val): _Group tag"
        }, 
        {
            "location": "/ponytest-PonyTest/#fun-box-_pluraln-usize-val-string-val", 
            "text": "Return a \"s\" or an empty string depending on whether the given number is 1.\nFor use when printing possibly plural words, eg \"test\" or \"tests\".", 
            "title": "fun box  _plural(n: USize val): String val"
        }, 
        {
            "location": "/ponytest-PonyTest/#fun-box-printreport-none-val", 
            "text": "The tests are all complete, print out the results.", 
            "title": "fun box  printreport(): None val"
        }, 
        {
            "location": "/ponytest-PonyTest/#fun-ref-processopts-none-val", 
            "text": "Process our command line options.\nAll command line arguments given must be recognised and make sense.\nState for specified options is stored in object fields.\nWe don't use the options package because we aren't already dependencies.", 
            "title": "fun ref  processopts(): None val"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/", 
            "text": "actor ponytest/_SimultaneousGroup is \n_Group\n tag\n\n\nDefault capability\n: \ntag\n\n\nTest group in which all tests can run concurrently.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Behaviours\n\n\nbe \napply\n(runner: \n_TestRunner\n tag)\n\n\nPrivate Behaviours\n\n\nbe \ntest\ncomplete\n(runner: \n_TestRunner\n tag)", 
            "title": "actor _SimultaneousGroup"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#actor-ponytest_simultaneousgroup-is-_group-tag", 
            "text": "Default capability :  tag  Test group in which all tests can run concurrently.", 
            "title": "actor ponytest/_SimultaneousGroup is _Group tag"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#be-applyrunner-_testrunner-tag", 
            "text": "", 
            "title": "be apply(runner: _TestRunner tag)"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#be-testcompleterunner-_testrunner-tag", 
            "text": "", 
            "title": "be testcomplete(runner: _TestRunner tag)"
        }, 
        {
            "location": "/ponytest-TestHelper/", 
            "text": "class ponytest/TestHelper\n\n\nDefault capability\n: \nval\n\n\nPer unit test class that provides control, logging and assertion functions.\n\n\nEach unit test is given a TestHelper when it is run. This is val and so can\nbe passed between methods and actors within the test without restriction.\n\n\nThe assertion functions check the relevant condition and mark the test as a\nfailure if appropriate. The success or failure of the condition is reported\nback as a Bool which can be checked if a different code path is needed when\nthat condition fails.\n\n\nAll assert functions take an optional message argument. This is simply a\nstring that is printed as part of the error message when the condition fails.\nIt is intended to aid identifying what failed.\n\n\nPublic fields\n\n\n\n\nlet env: \nEnv\n val\n\n\n\n\nConstructors\n\n\nnew \n_create\n(runner: \n_TestRunner\n tag, env': \nEnv\n val)\n\n\nCreate a new TestHelper.\n\n\nPublic Functions\n\n\nfun box  \nassert_array_eq\n[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] #read)](expect: \nReadSeq\n[A #read] box, actual: \nReadSeq\n[A #read] box, optional msg: \nString\n val, optional loc: \nSourceLoc\n val): \nBool\n val\n\n\nAssert that the contents of the 2 given ReadSeqs are equal.\n\n\nfun box  \nassert_array_eq_unordered\n[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] #read)](expect: \nReadSeq\n[A #read] box, actual: \nReadSeq\n[A #read] box, optional msg: \nString\n val, optional loc: \nSourceLoc\n val): \nBool\n val\n\n\nAssert that the contents of the 2 given ReadSeqs are equal ignoring order.\n\n\nfun box  \nassert_eq\n[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] #read)](expect: A #read, actual: A #read, optional msg: \nString\n val, optional loc: \nSourceLoc\n val): \nBool\n val\n\n\nAssert that the 2 given expressions are equal.\n\n\nfun box  \nassert_error\n(test: \nITest\n box, optional msg: \nString\n val, optional loc: \nSourceLoc\n val): \nBool\n val\n\n\nAssert that the given test function throws an error when run.\n\n\nfun box  \nassert_false\n(actual: \nBool\n val, optional msg: \nString\n val, optional loc: \nSourceLoc\n val): \nBool\n val\n\n\nAssert that the given expression is false.\n\n\nfun box  \nassert_is\n[A: A](expect: A, actual: A, optional msg: \nString\n val, optional loc: \nSourceLoc\n val): \nBool\n val\n\n\nAssert that the 2 given expressions resolve to the same instance\n\n\nfun box  \nassert_isnt\n[A: A](not_expect: A, actual: A, optional msg: \nString\n val, optional loc: \nSourceLoc\n val): \nBool\n val\n\n\nAssert that the 2 given expressions resolve to different instances.\n\n\nfun box  \nassert_ne\n[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] #read)](not_expect: A #read, actual: A #read, optional msg: \nString\n val, optional loc: \nSourceLoc\n val): \nBool\n val\n\n\nAssert that the 2 given expressions are not equal.\n\n\nfun box  \nassert_true\n(actual: \nBool\n val, optional msg: \nString\n val, optional loc: \nSourceLoc\n val): \nBool\n val\n\n\nAssert that the given expression is true.\n\n\nfun box  \ncomplete\n(success: \nBool\n val): \nNone\n val\n\n\nMUST be called by each long test to indicate the test has finished, unless\na timeout occurs.\n\n\nThe \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.\n\n\nOnce this is called tear_down() may be called at any time.\n\n\nfun box  \nfail\n(optional msg: \nString\n val): \nNone\n val\n\n\nFlag the test as having failed.\n\n\nfun box  \nlog\n(msg: \nString\n val, optional verbose: \nBool\n val): \nNone\n val\n\n\nLog the given message.\n\n\nThe verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.\n\n\nLogs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.\n\n\nfun box  \nlong_test\n(timeout: \nU64\n val): \nNone\n val\n\n\nIndicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.\n\n\nPrivate Functions\n\n\nfun box  \ncheck\neq\n[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val])](check: \nString\n val, expect: A #read, actual: A #read, msg: \nString\n val, loc: \nSourceLoc\n val): \nBool\n val\n\n\nCheck that the 2 given expressions are equal.\n\n\nfun box  \ncheck\nne\n[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val])](check: \nString\n val, not_expect: A #read, actual: A #read, msg: \nString\n val, loc: \nSourceLoc\n val): \nBool\n val\n\n\nCheck that the 2 given expressions are not equal.\n\n\nfun box  \nformat\nloc\n(loc: \nSourceLoc\n val): \nString\n val\n\n\nfun box  \nprint\narray\n[A: \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] #read](array: \nReadSeq\n[A #read] box): \nString\n val\n\n\nGenerate a printable string of the contents of the given readseq to use in\nerror messages.", 
            "title": "class TestHelper"
        }, 
        {
            "location": "/ponytest-TestHelper/#class-ponytesttesthelper", 
            "text": "Default capability :  val  Per unit test class that provides control, logging and assertion functions.  Each unit test is given a TestHelper when it is run. This is val and so can\nbe passed between methods and actors within the test without restriction.  The assertion functions check the relevant condition and mark the test as a\nfailure if appropriate. The success or failure of the condition is reported\nback as a Bool which can be checked if a different code path is needed when\nthat condition fails.  All assert functions take an optional message argument. This is simply a\nstring that is printed as part of the error message when the condition fails.\nIt is intended to aid identifying what failed.", 
            "title": "class ponytest/TestHelper"
        }, 
        {
            "location": "/ponytest-TestHelper/#public-fields", 
            "text": "let env:  Env  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/ponytest-TestHelper/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-TestHelper/#new-_createrunner-_testrunner-tag-env-env-val", 
            "text": "Create a new TestHelper.", 
            "title": "new _create(runner: _TestRunner tag, env': Env val)"
        }, 
        {
            "location": "/ponytest-TestHelper/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-assert_array_eq91a-equatable91a-read93-read-stringable91formatdefault-val-prefixdefault-val93-read93expect-readseq91a-read93-box-actual-readseq91a-read93-box-optional-msg-string-val-optional-loc-sourceloc-val-bool-val", 
            "text": "Assert that the contents of the 2 given ReadSeqs are equal.", 
            "title": "fun box  assert_array_eq[A: (Equatable[A #read] #read &amp; Stringable[FormatDefault val, PrefixDefault val] #read)](expect: ReadSeq[A #read] box, actual: ReadSeq[A #read] box, optional msg: String val, optional loc: SourceLoc val): Bool val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-assert_array_eq_unordered91a-equatable91a-read93-read-stringable91formatdefault-val-prefixdefault-val93-read93expect-readseq91a-read93-box-actual-readseq91a-read93-box-optional-msg-string-val-optional-loc-sourceloc-val-bool-val", 
            "text": "Assert that the contents of the 2 given ReadSeqs are equal ignoring order.", 
            "title": "fun box  assert_array_eq_unordered[A: (Equatable[A #read] #read &amp; Stringable[FormatDefault val, PrefixDefault val] #read)](expect: ReadSeq[A #read] box, actual: ReadSeq[A #read] box, optional msg: String val, optional loc: SourceLoc val): Bool val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-assert_eq91a-equatable91a-read93-read-stringable91formatdefault-val-prefixdefault-val93-read93expect-a-read-actual-a-read-optional-msg-string-val-optional-loc-sourceloc-val-bool-val", 
            "text": "Assert that the 2 given expressions are equal.", 
            "title": "fun box  assert_eq[A: (Equatable[A #read] #read &amp; Stringable[FormatDefault val, PrefixDefault val] #read)](expect: A #read, actual: A #read, optional msg: String val, optional loc: SourceLoc val): Bool val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-assert_errortest-itest-box-optional-msg-string-val-optional-loc-sourceloc-val-bool-val", 
            "text": "Assert that the given test function throws an error when run.", 
            "title": "fun box  assert_error(test: ITest box, optional msg: String val, optional loc: SourceLoc val): Bool val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-assert_falseactual-bool-val-optional-msg-string-val-optional-loc-sourceloc-val-bool-val", 
            "text": "Assert that the given expression is false.", 
            "title": "fun box  assert_false(actual: Bool val, optional msg: String val, optional loc: SourceLoc val): Bool val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-assert_is91a-a93expect-a-actual-a-optional-msg-string-val-optional-loc-sourceloc-val-bool-val", 
            "text": "Assert that the 2 given expressions resolve to the same instance", 
            "title": "fun box  assert_is[A: A](expect: A, actual: A, optional msg: String val, optional loc: SourceLoc val): Bool val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-assert_isnt91a-a93not_expect-a-actual-a-optional-msg-string-val-optional-loc-sourceloc-val-bool-val", 
            "text": "Assert that the 2 given expressions resolve to different instances.", 
            "title": "fun box  assert_isnt[A: A](not_expect: A, actual: A, optional msg: String val, optional loc: SourceLoc val): Bool val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-assert_ne91a-equatable91a-read93-read-stringable91formatdefault-val-prefixdefault-val93-read93not_expect-a-read-actual-a-read-optional-msg-string-val-optional-loc-sourceloc-val-bool-val", 
            "text": "Assert that the 2 given expressions are not equal.", 
            "title": "fun box  assert_ne[A: (Equatable[A #read] #read &amp; Stringable[FormatDefault val, PrefixDefault val] #read)](not_expect: A #read, actual: A #read, optional msg: String val, optional loc: SourceLoc val): Bool val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-assert_trueactual-bool-val-optional-msg-string-val-optional-loc-sourceloc-val-bool-val", 
            "text": "Assert that the given expression is true.", 
            "title": "fun box  assert_true(actual: Bool val, optional msg: String val, optional loc: SourceLoc val): Bool val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-completesuccess-bool-val-none-val", 
            "text": "MUST be called by each long test to indicate the test has finished, unless\na timeout occurs.  The \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.  Once this is called tear_down() may be called at any time.", 
            "title": "fun box  complete(success: Bool val): None val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-failoptional-msg-string-val-none-val", 
            "text": "Flag the test as having failed.", 
            "title": "fun box  fail(optional msg: String val): None val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-logmsg-string-val-optional-verbose-bool-val-none-val", 
            "text": "Log the given message.  The verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.  Logs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.", 
            "title": "fun box  log(msg: String val, optional verbose: Bool val): None val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-long_testtimeout-u64-val-none-val", 
            "text": "Indicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.", 
            "title": "fun box  long_test(timeout: U64 val): None val"
        }, 
        {
            "location": "/ponytest-TestHelper/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-checkeq91a-equatable91a-read93-read-stringable91formatdefault-val-prefixdefault-val9393check-string-val-expect-a-read-actual-a-read-msg-string-val-loc-sourceloc-val-bool-val", 
            "text": "Check that the 2 given expressions are equal.", 
            "title": "fun box  checkeq[A: (Equatable[A #read] #read &amp; Stringable[FormatDefault val, PrefixDefault val])](check: String val, expect: A #read, actual: A #read, msg: String val, loc: SourceLoc val): Bool val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-checkne91a-equatable91a-read93-read-stringable91formatdefault-val-prefixdefault-val9393check-string-val-not_expect-a-read-actual-a-read-msg-string-val-loc-sourceloc-val-bool-val", 
            "text": "Check that the 2 given expressions are not equal.", 
            "title": "fun box  checkne[A: (Equatable[A #read] #read &amp; Stringable[FormatDefault val, PrefixDefault val])](check: String val, not_expect: A #read, actual: A #read, msg: String val, loc: SourceLoc val): Bool val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-formatlocloc-sourceloc-val-string-val", 
            "text": "", 
            "title": "fun box  formatloc(loc: SourceLoc val): String val"
        }, 
        {
            "location": "/ponytest-TestHelper/#fun-box-printarray91a-stringable91formatdefault-val-prefixdefault-val93-read93array-readseq91a-read93-box-string-val", 
            "text": "Generate a printable string of the contents of the given readseq to use in\nerror messages.", 
            "title": "fun box  printarray[A: Stringable[FormatDefault val, PrefixDefault val] #read](array: ReadSeq[A #read] box): String val"
        }, 
        {
            "location": "/ponytest-TestList/", 
            "text": "trait ponytest/TestList\n\n\nDefault capability\n: \nref\n\n\nSource of unit tests for a PonyTest object.\nSee package doc string for further information and example use.\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val\n\n\nAdd all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:\n\n\nfun tests(test: PonyTest) =\n\n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)", 
            "title": "trait TestList"
        }, 
        {
            "location": "/ponytest-TestList/#trait-ponytesttestlist", 
            "text": "Default capability :  ref  Source of unit tests for a PonyTest object.\nSee package doc string for further information and example use.", 
            "title": "trait ponytest/TestList"
        }, 
        {
            "location": "/ponytest-TestList/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ponytest-TestList/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "Add all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:  fun tests(test: PonyTest) = \n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/ponytest-_TestRecord/", 
            "text": "class ponytest/_TestRecord\n\n\nDefault capability\n: \nref\n\n\nStore and report the result and log from a single test.\n\n\nPublic fields\n\n\n\n\nlet name: \nString\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val, name': \nString\n val)\n\n\nPrivate Functions\n\n\nfun box  \nlist\nfailed\n(): \nNone\n val\n\n\nPrint our test name out in the list of failed test, if we failed.\n\n\nfun box  \nreport\n(log\nall: \nBool\n val): \nBool\n val\n\n\nPrint our test summary, including the log if appropriate.\nThe log_all parameter indicates whether we've been told to print logs for\nall tests. The default is to only print logs for tests that fail.\nReturns our pass / fail status.\n\n\nfun ref  \n_result\n(pass: \nBool\n val, log: \nArray\n[\nString\n val] val): \nNone\n val\n\n\nOur test has completed, store the result.", 
            "title": "class _TestRecord"
        }, 
        {
            "location": "/ponytest-_TestRecord/#class-ponytest_testrecord", 
            "text": "Default capability :  ref  Store and report the result and log from a single test.", 
            "title": "class ponytest/_TestRecord"
        }, 
        {
            "location": "/ponytest-_TestRecord/#public-fields", 
            "text": "let name:  String  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/ponytest-_TestRecord/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-_TestRecord/#new-createenv-env-val-name-string-val", 
            "text": "", 
            "title": "new create(env: Env val, name': String val)"
        }, 
        {
            "location": "/ponytest-_TestRecord/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/ponytest-_TestRecord/#fun-box-listfailed-none-val", 
            "text": "Print our test name out in the list of failed test, if we failed.", 
            "title": "fun box  listfailed(): None val"
        }, 
        {
            "location": "/ponytest-_TestRecord/#fun-box-reportlogall-bool-val-bool-val", 
            "text": "Print our test summary, including the log if appropriate.\nThe log_all parameter indicates whether we've been told to print logs for\nall tests. The default is to only print logs for tests that fail.\nReturns our pass / fail status.", 
            "title": "fun box  report(logall: Bool val): Bool val"
        }, 
        {
            "location": "/ponytest-_TestRecord/#fun-ref-_resultpass-bool-val-log-array91string-val93-val-none-val", 
            "text": "Our test has completed, store the result.", 
            "title": "fun ref  _result(pass: Bool val, log: Array[String val] val): None val"
        }, 
        {
            "location": "/ponytest-_TestRunner/", 
            "text": "actor ponytest/_TestRunner\n\n\nDefault capability\n: \ntag\n\n\nPer unit test actor that runs the test and keeps the log for it.\n\n\nConstructors\n\n\nnew \ncreate\n(ponytest: \nPonyTest\n tag, id: \nUSize\n val, test: \nUnitTest\n iso, group: \n_Group\n tag, verbose: \nBool\n val, env: \nEnv\n val, timers: \nTimers\n tag)\n\n\nPublic Behaviours\n\n\nbe \ncomplete\n(success: \nBool\n val)\n\n\nMUST be called by each long test to indicate the test has finished, unless\na timeout occurs.\n\n\nThe \"success\" parameter specifies whether the test succeeded. However if\nthe test has already been flagged as failing, then the test is considered a\nfailure, regardless of the value of this parameter.\n\n\nOnce this is called tear_down() may be called at any time.\n\n\nbe \nfail\n(msg: \nString\n val)\n\n\nFlag the test as having failed.\n\n\nbe \nlog\n(msg: \nString\n val, verbose: \nBool\n val)\n\n\nLog the given message.\n\n\nThe verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used.\n\n\nLogs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.\n\n\nbe \nlong_test\n(timeout: \nU64\n val)\n\n\nThe test has been flagged as a long test.\n\n\nbe \nrun\n()\n\n\nRun our test.\n\n\nPrivate Behaviours\n\n\nbe \n_close\n()\n\n\nClose down this test and send a report.\n\n\nbe \n_finished\n()\n\n\nCalled when the test function completes.\nIf long_test() is going to be called, it must have been by now.\n\n\nbe \n_timeout\n()\n\n\nCalled when the long test timeout expires.\n\n\nPrivate Functions\n\n\nfun ref  \n_log\n(msg: \nString\n val, verbose: \nBool\n val): \nNone\n val\n\n\nWrite the given message direct to our log.\n\n\nfun ref  \ntear\ndown\n(): \nNone\n val\n\n\nCheck if the test has finished and tear it down if necessary.", 
            "title": "actor _TestRunner"
        }, 
        {
            "location": "/ponytest-_TestRunner/#actor-ponytest_testrunner", 
            "text": "Default capability :  tag  Per unit test actor that runs the test and keeps the log for it.", 
            "title": "actor ponytest/_TestRunner"
        }, 
        {
            "location": "/ponytest-_TestRunner/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-_TestRunner/#new-createponytest-ponytest-tag-id-usize-val-test-unittest-iso-group-_group-tag-verbose-bool-val-env-env-val-timers-timers-tag", 
            "text": "", 
            "title": "new create(ponytest: PonyTest tag, id: USize val, test: UnitTest iso, group: _Group tag, verbose: Bool val, env: Env val, timers: Timers tag)"
        }, 
        {
            "location": "/ponytest-_TestRunner/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponytest-_TestRunner/#be-completesuccess-bool-val", 
            "text": "MUST be called by each long test to indicate the test has finished, unless\na timeout occurs.  The \"success\" parameter specifies whether the test succeeded. However if\nthe test has already been flagged as failing, then the test is considered a\nfailure, regardless of the value of this parameter.  Once this is called tear_down() may be called at any time.", 
            "title": "be complete(success: Bool val)"
        }, 
        {
            "location": "/ponytest-_TestRunner/#be-failmsg-string-val", 
            "text": "Flag the test as having failed.", 
            "title": "be fail(msg: String val)"
        }, 
        {
            "location": "/ponytest-_TestRunner/#be-logmsg-string-val-verbose-bool-val", 
            "text": "Log the given message.  The verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used.  Logs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.", 
            "title": "be log(msg: String val, verbose: Bool val)"
        }, 
        {
            "location": "/ponytest-_TestRunner/#be-long_testtimeout-u64-val", 
            "text": "The test has been flagged as a long test.", 
            "title": "be long_test(timeout: U64 val)"
        }, 
        {
            "location": "/ponytest-_TestRunner/#be-run", 
            "text": "Run our test.", 
            "title": "be run()"
        }, 
        {
            "location": "/ponytest-_TestRunner/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponytest-_TestRunner/#be-_close", 
            "text": "Close down this test and send a report.", 
            "title": "be _close()"
        }, 
        {
            "location": "/ponytest-_TestRunner/#be-_finished", 
            "text": "Called when the test function completes.\nIf long_test() is going to be called, it must have been by now.", 
            "title": "be _finished()"
        }, 
        {
            "location": "/ponytest-_TestRunner/#be-_timeout", 
            "text": "Called when the long test timeout expires.", 
            "title": "be _timeout()"
        }, 
        {
            "location": "/ponytest-_TestRunner/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/ponytest-_TestRunner/#fun-ref-_logmsg-string-val-verbose-bool-val-none-val", 
            "text": "Write the given message direct to our log.", 
            "title": "fun ref  _log(msg: String val, verbose: Bool val): None val"
        }, 
        {
            "location": "/ponytest-_TestRunner/#fun-ref-teardown-none-val", 
            "text": "Check if the test has finished and tear it down if necessary.", 
            "title": "fun ref  teardown(): None val"
        }, 
        {
            "location": "/ponytest-UnitTest/", 
            "text": "trait ponytest/UnitTest\n\n\nDefault capability\n: \nref\n\n\nEach unit test class must provide this trait. Simple tests only need to\ndefine the name() and apply() functions. The remaining functions specify\nadditional test options.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nRun the test.\nRaising an error is interpreted as a test failure.\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nReport the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.\n\n\nfun box  \nname\n(): \nString\n val\n\n\nReport the test name, which is used when printing test results and on the\ncommand line to select tests to run.\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nTidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val\n\n\nTear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.", 
            "title": "trait UnitTest"
        }, 
        {
            "location": "/ponytest-UnitTest/#trait-ponytestunittest", 
            "text": "Default capability :  ref  Each unit test class must provide this trait. Simple tests only need to\ndefine the name() and apply() functions. The remaining functions specify\nadditional test options.", 
            "title": "trait ponytest/UnitTest"
        }, 
        {
            "location": "/ponytest-UnitTest/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ponytest-UnitTest/#fun-ref-applyh-testhelper-val-none-val", 
            "text": "Run the test.\nRaising an error is interpreted as a test failure.", 
            "title": "fun ref  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/ponytest-UnitTest/#fun-box-exclusion_group-string-val", 
            "text": "Report the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/ponytest-UnitTest/#fun-box-name-string-val", 
            "text": "Report the test name, which is used when printing test results and on the\ncommand line to select tests to run.", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/ponytest-UnitTest/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "Tidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/ponytest-UnitTest/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "Tear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/promises--index/", 
            "text": "No package doc string provided for promises.\n\n\nEntities\n\n\n\n\ninterface Fulfill\n\n\nclass FulfillIdentity\n\n\ninterface _IThen\n\n\nprimitive _Pending\n\n\nactor Promise\n\n\nprimitive _Reject\n\n\ninterface Reject\n\n\nclass RejectAlways\n\n\nclass _Then", 
            "title": "Package"
        }, 
        {
            "location": "/promises--index/#entities", 
            "text": "interface Fulfill  class FulfillIdentity  interface _IThen  primitive _Pending  actor Promise  primitive _Reject  interface Reject  class RejectAlways  class _Then", 
            "title": "Entities"
        }, 
        {
            "location": "/promises-Fulfill/", 
            "text": "interface promises/Fulfill[A: \nAny\n #share, B: \nAny\n #share]\n\n\nDefault capability\n: \niso\n\n\nA function from A to B that is called when a promise is fulfilled.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(value: A #share): B #share ?", 
            "title": "interface Fulfill"
        }, 
        {
            "location": "/promises-Fulfill/#interface-promisesfulfill91a-any-share-b-any-share93", 
            "text": "Default capability :  iso  A function from A to B that is called when a promise is fulfilled.", 
            "title": "interface promises/Fulfill[A: Any #share, B: Any #share]"
        }, 
        {
            "location": "/promises-Fulfill/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-Fulfill/#fun-ref-applyvalue-a-share-b-share", 
            "text": "", 
            "title": "fun ref  apply(value: A #share): B #share ?"
        }, 
        {
            "location": "/promises-FulfillIdentity/", 
            "text": "class promises/FulfillIdentity[A: \nAny\n #share]\n\n\nDefault capability\n: \niso\n\n\nAn identity function for fulfilling promises.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun ref  \napply\n(value: A #share): A #share", 
            "title": "class FulfillIdentity"
        }, 
        {
            "location": "/promises-FulfillIdentity/#class-promisesfulfillidentity91a-any-share93", 
            "text": "Default capability :  iso  An identity function for fulfilling promises.", 
            "title": "class promises/FulfillIdentity[A: Any #share]"
        }, 
        {
            "location": "/promises-FulfillIdentity/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-FulfillIdentity/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/promises-FulfillIdentity/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-FulfillIdentity/#fun-ref-applyvalue-a-share-a-share", 
            "text": "", 
            "title": "fun ref  apply(value: A #share): A #share"
        }, 
        {
            "location": "/promises-_IThen/", 
            "text": "interface promises/_IThen[A: \nAny\n #share]\n\n\nDefault capability\n: \nref\n\n\nAn interface representing an abstract Then. This allows for any Then that\naccepts an input of type A, regardless of the output type.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(value: A #share): \nNone\n val\n\n\nfun ref  \nreject\n(): \nNone\n val", 
            "title": "interface _IThen"
        }, 
        {
            "location": "/promises-_IThen/#interface-promises_ithen91a-any-share93", 
            "text": "Default capability :  ref  An interface representing an abstract Then. This allows for any Then that\naccepts an input of type A, regardless of the output type.", 
            "title": "interface promises/_IThen[A: Any #share]"
        }, 
        {
            "location": "/promises-_IThen/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-_IThen/#fun-ref-applyvalue-a-share-none-val", 
            "text": "", 
            "title": "fun ref  apply(value: A #share): None val"
        }, 
        {
            "location": "/promises-_IThen/#fun-ref-reject-none-val", 
            "text": "", 
            "title": "fun ref  reject(): None val"
        }, 
        {
            "location": "/promises-_Pending/", 
            "text": "primitive promises/_Pending\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_Pending\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_Pending\n val): \nBool\n val", 
            "title": "primitive _Pending"
        }, 
        {
            "location": "/promises-_Pending/#primitive-promises_pending", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive promises/_Pending"
        }, 
        {
            "location": "/promises-_Pending/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-_Pending/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/promises-_Pending/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-_Pending/#fun-box-eqthat-_pending-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _Pending val): Bool val"
        }, 
        {
            "location": "/promises-_Pending/#fun-box-nethat-_pending-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _Pending val): Bool val"
        }, 
        {
            "location": "/promises-Promise/", 
            "text": "actor promises/Promise[A: \nAny\n #share]\n\n\nDefault capability\n: \ntag\n\n\nA promise to eventually produce a result of type A. This promise can either\nbe fulfilled or rejected.\n\n\nAny number of promises can be\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Behaviours\n\n\nbe \napply\n(value: A #share)\n\n\nFulfill the promise.\n\n\nbe \nreject\n()\n\n\nReject the promise.\n\n\nPublic Functions\n\n\nfun tag  \nnext\n[B: \nAny\n #share](fulfill: \nFulfill\n[A #share, B #share] iso, optional rejected: \nReject\n[B #share] iso): \nPromise\n[B #share] tag\n\n\nChain a promise after this one.\n\n\nWhen this promise is fulfilled, the result of type A is passed to the\nfulfill function, generating in an intermediate result of type B. This\nis then used to fulfill the next promise in the chain.\n\n\nIf there is no fulfill function, or if the fulfill function raises an\nerror, then the next promise in the chain will be rejected.\n\n\nIf this promise is rejected, this step's reject function is called with no\ninput, generating an intermediate result of type B which is used to\nfulfill the next promise in the chain.\n\n\nIf there is no reject function, of if the reject function raises an error,\nthen the next promise in the chain will be rejected.\n\n\nPrivate Behaviours\n\n\nbe \n_attach\n(attach: \n_IThen\n[A #share] iso)\n\n\nAttaches a step asynchronously. If this promise has already been fulfilled\nor rejected, immediately fulfill or reject the incoming step. Otherwise,\nkeep it in a list.", 
            "title": "actor Promise"
        }, 
        {
            "location": "/promises-Promise/#actor-promisespromise91a-any-share93", 
            "text": "Default capability :  tag  A promise to eventually produce a result of type A. This promise can either\nbe fulfilled or rejected.  Any number of promises can be", 
            "title": "actor promises/Promise[A: Any #share]"
        }, 
        {
            "location": "/promises-Promise/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-Promise/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/promises-Promise/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/promises-Promise/#be-applyvalue-a-share", 
            "text": "Fulfill the promise.", 
            "title": "be apply(value: A #share)"
        }, 
        {
            "location": "/promises-Promise/#be-reject", 
            "text": "Reject the promise.", 
            "title": "be reject()"
        }, 
        {
            "location": "/promises-Promise/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-Promise/#fun-tag-next91b-any-share93fulfill-fulfill91a-share-b-share93-iso-optional-rejected-reject91b-share93-iso-promise91b-share93-tag", 
            "text": "Chain a promise after this one.  When this promise is fulfilled, the result of type A is passed to the\nfulfill function, generating in an intermediate result of type B. This\nis then used to fulfill the next promise in the chain.  If there is no fulfill function, or if the fulfill function raises an\nerror, then the next promise in the chain will be rejected.  If this promise is rejected, this step's reject function is called with no\ninput, generating an intermediate result of type B which is used to\nfulfill the next promise in the chain.  If there is no reject function, of if the reject function raises an error,\nthen the next promise in the chain will be rejected.", 
            "title": "fun tag  next[B: Any #share](fulfill: Fulfill[A #share, B #share] iso, optional rejected: Reject[B #share] iso): Promise[B #share] tag"
        }, 
        {
            "location": "/promises-Promise/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/promises-Promise/#be-_attachattach-_ithen91a-share93-iso", 
            "text": "Attaches a step asynchronously. If this promise has already been fulfilled\nor rejected, immediately fulfill or reject the incoming step. Otherwise,\nkeep it in a list.", 
            "title": "be _attach(attach: _IThen[A #share] iso)"
        }, 
        {
            "location": "/promises-_Reject/", 
            "text": "primitive promises/_Reject\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_Reject\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_Reject\n val): \nBool\n val", 
            "title": "primitive _Reject"
        }, 
        {
            "location": "/promises-_Reject/#primitive-promises_reject", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive promises/_Reject"
        }, 
        {
            "location": "/promises-_Reject/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-_Reject/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/promises-_Reject/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-_Reject/#fun-box-eqthat-_reject-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _Reject val): Bool val"
        }, 
        {
            "location": "/promises-_Reject/#fun-box-nethat-_reject-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _Reject val): Bool val"
        }, 
        {
            "location": "/promises-Reject/", 
            "text": "interface promises/Reject[A: \nAny\n #share]\n\n\nDefault capability\n: \niso\n\n\nA function on A that is called when a promise is rejected.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(): A #share ?", 
            "title": "interface Reject"
        }, 
        {
            "location": "/promises-Reject/#interface-promisesreject91a-any-share93", 
            "text": "Default capability :  iso  A function on A that is called when a promise is rejected.", 
            "title": "interface promises/Reject[A: Any #share]"
        }, 
        {
            "location": "/promises-Reject/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-Reject/#fun-ref-apply-a-share", 
            "text": "", 
            "title": "fun ref  apply(): A #share ?"
        }, 
        {
            "location": "/promises-RejectAlways/", 
            "text": "class promises/RejectAlways[A: \nAny\n #share]\n\n\nDefault capability\n: \niso\n\n\nA reject that always raises an error.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun ref  \napply\n(): A #share ?", 
            "title": "class RejectAlways"
        }, 
        {
            "location": "/promises-RejectAlways/#class-promisesrejectalways91a-any-share93", 
            "text": "Default capability :  iso  A reject that always raises an error.", 
            "title": "class promises/RejectAlways[A: Any #share]"
        }, 
        {
            "location": "/promises-RejectAlways/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-RejectAlways/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/promises-RejectAlways/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-RejectAlways/#fun-ref-apply-a-share", 
            "text": "", 
            "title": "fun ref  apply(): A #share ?"
        }, 
        {
            "location": "/promises-_Then/", 
            "text": "class promises/_Then[A: \nAny\n #share, B: \nAny\n #share]\n\n\nDefault capability\n: \nref\n\n\nA step in a promise pipeline.\n\n\nConstructors\n\n\nnew \ncreate\n(fulfill: \nFulfill\n[A #share, B #share] iso, rejected: \nReject\n[B #share] iso)\n\n\nPublic Functions\n\n\nfun ref  \napply\n(value: A #share): \nNone\n val\n\n\nCalled with the result of the previous promise when it is fulfilled.\n\n\nfun box  \npromise\n(): \nPromise\n[B #share] tag\n\n\nReturns the next promise in the chain.\n\n\nfun ref  \nreject\n(): \nNone\n val\n\n\nCalled when the previous promise is rejected.", 
            "title": "class _Then"
        }, 
        {
            "location": "/promises-_Then/#class-promises_then91a-any-share-b-any-share93", 
            "text": "Default capability :  ref  A step in a promise pipeline.", 
            "title": "class promises/_Then[A: Any #share, B: Any #share]"
        }, 
        {
            "location": "/promises-_Then/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-_Then/#new-createfulfill-fulfill91a-share-b-share93-iso-rejected-reject91b-share93-iso", 
            "text": "", 
            "title": "new create(fulfill: Fulfill[A #share, B #share] iso, rejected: Reject[B #share] iso)"
        }, 
        {
            "location": "/promises-_Then/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-_Then/#fun-ref-applyvalue-a-share-none-val", 
            "text": "Called with the result of the previous promise when it is fulfilled.", 
            "title": "fun ref  apply(value: A #share): None val"
        }, 
        {
            "location": "/promises-_Then/#fun-box-promise-promise91b-share93-tag", 
            "text": "Returns the next promise in the chain.", 
            "title": "fun box  promise(): Promise[B #share] tag"
        }, 
        {
            "location": "/promises-_Then/#fun-ref-reject-none-val", 
            "text": "Called when the previous promise is rejected.", 
            "title": "fun ref  reject(): None val"
        }, 
        {
            "location": "/random--index/", 
            "text": "Random package\n\n\nThe Random package provides support generating random numbers. The package\nprovides random number generators you can use in your code, a dice roller and\na trait for implementing your own random number generator.\n\n\nEntities\n\n\n\n\nclass Dice\n\n\nclass MT\n\n\ntrait Random", 
            "title": "Package"
        }, 
        {
            "location": "/random--index/#random-package", 
            "text": "The Random package provides support generating random numbers. The package\nprovides random number generators you can use in your code, a dice roller and\na trait for implementing your own random number generator.", 
            "title": "Random package"
        }, 
        {
            "location": "/random--index/#entities", 
            "text": "class Dice  class MT  trait Random", 
            "title": "Entities"
        }, 
        {
            "location": "/random-Dice/", 
            "text": "class random/Dice\n\n\nDefault capability\n: \nref\n\n\nA simple dice roller.\n\n\nPublic fields\n\n\n\n\nvar r: \nRandom\n ref\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(from: \nRandom\n ref)\n\n\nInitialise with a random number generator.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(count: \nU64\n val, sides: \nU64\n val): \nU64\n val\n\n\nReturn the sum of \ncount\n rolls of a die with the given number of \nsides\n.\nThe die is numbered from 1 to \nsides\n. For example, count = 2 and\nsides = 6 will return a value between 2 and 12.", 
            "title": "class Dice"
        }, 
        {
            "location": "/random-Dice/#class-randomdice", 
            "text": "Default capability :  ref  A simple dice roller.", 
            "title": "class random/Dice"
        }, 
        {
            "location": "/random-Dice/#public-fields", 
            "text": "var r:  Random  ref", 
            "title": "Public fields"
        }, 
        {
            "location": "/random-Dice/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/random-Dice/#new-createfrom-random-ref", 
            "text": "Initialise with a random number generator.", 
            "title": "new create(from: Random ref)"
        }, 
        {
            "location": "/random-Dice/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/random-Dice/#fun-ref-applycount-u64-val-sides-u64-val-u64-val", 
            "text": "Return the sum of  count  rolls of a die with the given number of  sides .\nThe die is numbered from 1 to  sides . For example, count = 2 and\nsides = 6 will return a value between 2 and 12.", 
            "title": "fun ref  apply(count: U64 val, sides: U64 val): U64 val"
        }, 
        {
            "location": "/random-MT/", 
            "text": "class random/MT is \nRandom\n ref\n\n\nDefault capability\n: \nref\n\n\nA Mersenne Twister. This is a non-cryptographic random number generator.\n\n\nConstructors\n\n\nnew \ncreate\n(optional seed: \nU64\n val)\n\n\nCreate with the specified seed. Returned values are deterministic for a\ngiven seed.\n\n\nPublic Functions\n\n\nfun tag  \nhas_next\n(): \nBool\n val\n\n\nfun ref  \nint\n(n: \nU64\n val): \nU64\n val\n\n\nfun ref  \nnext\n(): \nU64\n val\n\n\nA random integer in [0, 2^64 - 1]\n\n\nfun ref  \nreal\n(): \nF64\n val\n\n\nfun ref  \nu128\n(): \nU128\n val\n\n\nfun ref  \nu16\n(): \nU16\n val\n\n\nfun ref  \nu32\n(): \nU32\n val\n\n\nfun ref  \nu64\n(): \nU64\n val\n\n\nfun ref  \nu8\n(): \nU8\n val\n\n\nPrivate Functions\n\n\nfun ref  \n_lower\n(i: \nUSize\n val, x: \nU64\n val): \nU64\n val ?\n\n\nfun tag  \n_m\n(): \nUSize\n val\n\n\nfun tag  \n_mask\n(x: \nU64\n val, y: \nU64\n val): \nU64\n val\n\n\nfun tag  \n_matrix\n(x: \nU64\n val): \nU64\n val\n\n\nfun tag  \n_mix\n(x: \nU64\n val, y: \nU64\n val): \nU64\n val\n\n\nfun tag  \n_n\n(): \nUSize\n val\n\n\nfun tag  \n_n1\n(): \nUSize\n val\n\n\nfun ref  \n_populate\n(): \nNone\n val\n\n\nRepopulates the state array.\n\n\nfun ref  \n_upper\n(i: \nUSize\n val, x: \nU64\n val): \nU64\n val ?", 
            "title": "class MT"
        }, 
        {
            "location": "/random-MT/#class-randommt-is-random-ref", 
            "text": "Default capability :  ref  A Mersenne Twister. This is a non-cryptographic random number generator.", 
            "title": "class random/MT is Random ref"
        }, 
        {
            "location": "/random-MT/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/random-MT/#new-createoptional-seed-u64-val", 
            "text": "Create with the specified seed. Returned values are deterministic for a\ngiven seed.", 
            "title": "new create(optional seed: U64 val)"
        }, 
        {
            "location": "/random-MT/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/random-MT/#fun-tag-has_next-bool-val", 
            "text": "", 
            "title": "fun tag  has_next(): Bool val"
        }, 
        {
            "location": "/random-MT/#fun-ref-intn-u64-val-u64-val", 
            "text": "", 
            "title": "fun ref  int(n: U64 val): U64 val"
        }, 
        {
            "location": "/random-MT/#fun-ref-next-u64-val", 
            "text": "A random integer in [0, 2^64 - 1]", 
            "title": "fun ref  next(): U64 val"
        }, 
        {
            "location": "/random-MT/#fun-ref-real-f64-val", 
            "text": "", 
            "title": "fun ref  real(): F64 val"
        }, 
        {
            "location": "/random-MT/#fun-ref-u128-u128-val", 
            "text": "", 
            "title": "fun ref  u128(): U128 val"
        }, 
        {
            "location": "/random-MT/#fun-ref-u16-u16-val", 
            "text": "", 
            "title": "fun ref  u16(): U16 val"
        }, 
        {
            "location": "/random-MT/#fun-ref-u32-u32-val", 
            "text": "", 
            "title": "fun ref  u32(): U32 val"
        }, 
        {
            "location": "/random-MT/#fun-ref-u64-u64-val", 
            "text": "", 
            "title": "fun ref  u64(): U64 val"
        }, 
        {
            "location": "/random-MT/#fun-ref-u8-u8-val", 
            "text": "", 
            "title": "fun ref  u8(): U8 val"
        }, 
        {
            "location": "/random-MT/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/random-MT/#fun-ref-_loweri-usize-val-x-u64-val-u64-val", 
            "text": "", 
            "title": "fun ref  _lower(i: USize val, x: U64 val): U64 val ?"
        }, 
        {
            "location": "/random-MT/#fun-tag-_m-usize-val", 
            "text": "", 
            "title": "fun tag  _m(): USize val"
        }, 
        {
            "location": "/random-MT/#fun-tag-_maskx-u64-val-y-u64-val-u64-val", 
            "text": "", 
            "title": "fun tag  _mask(x: U64 val, y: U64 val): U64 val"
        }, 
        {
            "location": "/random-MT/#fun-tag-_matrixx-u64-val-u64-val", 
            "text": "", 
            "title": "fun tag  _matrix(x: U64 val): U64 val"
        }, 
        {
            "location": "/random-MT/#fun-tag-_mixx-u64-val-y-u64-val-u64-val", 
            "text": "", 
            "title": "fun tag  _mix(x: U64 val, y: U64 val): U64 val"
        }, 
        {
            "location": "/random-MT/#fun-tag-_n-usize-val", 
            "text": "", 
            "title": "fun tag  _n(): USize val"
        }, 
        {
            "location": "/random-MT/#fun-tag-_n1-usize-val", 
            "text": "", 
            "title": "fun tag  _n1(): USize val"
        }, 
        {
            "location": "/random-MT/#fun-ref-_populate-none-val", 
            "text": "Repopulates the state array.", 
            "title": "fun ref  _populate(): None val"
        }, 
        {
            "location": "/random-MT/#fun-ref-_upperi-usize-val-x-u64-val-u64-val", 
            "text": "", 
            "title": "fun ref  _upper(i: USize val, x: U64 val): U64 val ?"
        }, 
        {
            "location": "/random-Random/", 
            "text": "trait random/Random\n\n\nDefault capability\n: \nref\n\n\nThe \nRandom\n trait should be implemented by all random number generators. The\nonly method you need to implement is \nfun ref next(): 64\n. Once that method\nhas been implemented, the \nRandom\n trait provides default implementations of\nconversions to other number types.\n\n\nPublic Functions\n\n\nfun tag  \nhas_next\n(): \nBool\n val\n\n\nIf used as an iterator, this always has another value.\n\n\nfun ref  \nint\n(n: \nU64\n val): \nU64\n val\n\n\nA random integer in [0, n)\n\n\nfun ref  \nnext\n(): \nU64\n val\n\n\nA random integer in [0, 2^64)\n\n\nfun ref  \nreal\n(): \nF64\n val\n\n\nA random number in [0, 1)\n\n\nfun ref  \nu128\n(): \nU128\n val\n\n\nA random integer in [0, 2^128)\n\n\nfun ref  \nu16\n(): \nU16\n val\n\n\nA random integer in [0, 2^16)\n\n\nfun ref  \nu32\n(): \nU32\n val\n\n\nA random integer in [0, 2^32)\n\n\nfun ref  \nu64\n(): \nU64\n val\n\n\nA random integer in [0, 2^64)\n\n\nfun ref  \nu8\n(): \nU8\n val\n\n\nA random integer in [0, 2^8)", 
            "title": "trait Random"
        }, 
        {
            "location": "/random-Random/#trait-randomrandom", 
            "text": "Default capability :  ref  The  Random  trait should be implemented by all random number generators. The\nonly method you need to implement is  fun ref next(): 64 . Once that method\nhas been implemented, the  Random  trait provides default implementations of\nconversions to other number types.", 
            "title": "trait random/Random"
        }, 
        {
            "location": "/random-Random/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/random-Random/#fun-tag-has_next-bool-val", 
            "text": "If used as an iterator, this always has another value.", 
            "title": "fun tag  has_next(): Bool val"
        }, 
        {
            "location": "/random-Random/#fun-ref-intn-u64-val-u64-val", 
            "text": "A random integer in [0, n)", 
            "title": "fun ref  int(n: U64 val): U64 val"
        }, 
        {
            "location": "/random-Random/#fun-ref-next-u64-val", 
            "text": "A random integer in [0, 2^64)", 
            "title": "fun ref  next(): U64 val"
        }, 
        {
            "location": "/random-Random/#fun-ref-real-f64-val", 
            "text": "A random number in [0, 1)", 
            "title": "fun ref  real(): F64 val"
        }, 
        {
            "location": "/random-Random/#fun-ref-u128-u128-val", 
            "text": "A random integer in [0, 2^128)", 
            "title": "fun ref  u128(): U128 val"
        }, 
        {
            "location": "/random-Random/#fun-ref-u16-u16-val", 
            "text": "A random integer in [0, 2^16)", 
            "title": "fun ref  u16(): U16 val"
        }, 
        {
            "location": "/random-Random/#fun-ref-u32-u32-val", 
            "text": "A random integer in [0, 2^32)", 
            "title": "fun ref  u32(): U32 val"
        }, 
        {
            "location": "/random-Random/#fun-ref-u64-u64-val", 
            "text": "A random integer in [0, 2^64)", 
            "title": "fun ref  u64(): U64 val"
        }, 
        {
            "location": "/random-Random/#fun-ref-u8-u8-val", 
            "text": "A random integer in [0, 2^8)", 
            "title": "fun ref  u8(): U8 val"
        }, 
        {
            "location": "/regex--index/", 
            "text": "Regex package\n\n\nThe Regex package provides support for Perl compatible regular expressions.\n\n\nExample program\n\n\nuse \nregex\n\n\nactor Main\n  new create(env: Env) =\n\n    try\n      let r = Regex(\n\\\\d+\n)\n\n      if r == \n1234\n then\n        env.out.print(\n1234 is a series of numbers\n)\n      end\n\n      if r != \nNot a number\n then\n        env.out.print(\n'Not a number' is not a series of numbers\n)\n      end\n\n      let matched = r(\nThere are 02 numbers in here.\n)\n      env.out.print(matched(0) + \n was matched\n)\n      env.out.print(\nThe match started at \n + matched.start_pos().string())\n      env.out.print(\nThe match ended at \n + matched.end_pos().string())\n    end\n\n    try\n      let r = Regex(\n(\\\\d+)?\\\\.(\\\\d+)?\n)\n      let matched = r(\n123.456\n)\n      env.out.print(matched(0) + \n was matched\n)\n      env.out.print(\nThe first match was \n + matched(1))\n      env.out.print(\nThe second match was \n + matched(2))\n    end\n\n\n\n\nEntities\n\n\n\n\nactor Main\n\n\nprimitive _Match\n\n\nclass Match\n\n\nprimitive _PCRE2\n\n\nprimitive _Pattern\n\n\nclass Regex\n\n\nclass _TestApply\n\n\nclass _TestEq\n\n\nclass _TestError\n\n\nclass _TestGroups\n\n\nclass _TestSplit", 
            "title": "Package"
        }, 
        {
            "location": "/regex--index/#regex-package", 
            "text": "The Regex package provides support for Perl compatible regular expressions.", 
            "title": "Regex package"
        }, 
        {
            "location": "/regex--index/#example-program", 
            "text": "use  regex \n\nactor Main\n  new create(env: Env) = \n    try\n      let r = Regex( \\\\d+ )\n\n      if r ==  1234  then\n        env.out.print( 1234 is a series of numbers )\n      end\n\n      if r !=  Not a number  then\n        env.out.print( 'Not a number' is not a series of numbers )\n      end\n\n      let matched = r( There are 02 numbers in here. )\n      env.out.print(matched(0) +   was matched )\n      env.out.print( The match started at   + matched.start_pos().string())\n      env.out.print( The match ended at   + matched.end_pos().string())\n    end\n\n    try\n      let r = Regex( (\\\\d+)?\\\\.(\\\\d+)? )\n      let matched = r( 123.456 )\n      env.out.print(matched(0) +   was matched )\n      env.out.print( The first match was   + matched(1))\n      env.out.print( The second match was   + matched(2))\n    end", 
            "title": "Example program"
        }, 
        {
            "location": "/regex--index/#entities", 
            "text": "actor Main  primitive _Match  class Match  primitive _PCRE2  primitive _Pattern  class Regex  class _TestApply  class _TestEq  class _TestError  class _TestGroups  class _TestSplit", 
            "title": "Entities"
        }, 
        {
            "location": "/regex-Main/", 
            "text": "actor regex/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/regex-Main/#actor-regexmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor regex/Main is TestList ref"
        }, 
        {
            "location": "/regex-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/regex-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/regex-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/regex-_Match/", 
            "text": "primitive regex/_Match\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_Match\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_Match\n val): \nBool\n val", 
            "title": "primitive _Match"
        }, 
        {
            "location": "/regex-_Match/#primitive-regex_match", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive regex/_Match"
        }, 
        {
            "location": "/regex-_Match/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-_Match/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/regex-_Match/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-_Match/#fun-box-eqthat-_match-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _Match val): Bool val"
        }, 
        {
            "location": "/regex-_Match/#fun-box-nethat-_match-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _Match val): Bool val"
        }, 
        {
            "location": "/regex-Match/", 
            "text": "class regex/Match\n\n\nDefault capability\n: \nref\n\n\nContains match data for a combination of a regex and a subject.\n\n\nConstructors\n\n\nnew \n_create\n(subject: (\nString\n val | \nArray\n[\nU8\n val] val), m: \nPointer\n[\n_Match\n val] ref)\n\n\nStore a match, a subject, and a size.\n\n\nPublic Functions\n\n\nfun box  \napply\n[optional A: ((\nString\n iso | \nArray\n[\nU8\n val] iso) \n \nSeq\n[\nU8\n val] iso)](i: \nU32\n val): A iso^ ?\n\n\nReturns a capture by number. Raises an error if the index is out of bounds.\n\n\nfun ref  \ndispose\n(): \nNone\n val\n\n\nFree the underlying PCRE2 data.\n\n\nfun box  \nend_pos\n(): \nUSize\n val\n\n\nReturns the character position of the last character in the match.\n\n\nfun box  \nfind\n[optional A: ((\nString\n iso | \nArray\n[\nU8\n val] iso) \n \nSeq\n[\nU8\n val] iso)](name: \nString\n box): A iso^ ?\n\n\nReturns a capture by name. Raises an error if the named capture does not\nexist.\n\n\nfun box  \ngroups\n(): \nArray\n[\nString\n val] iso^\n\n\nReturns all of the captured subgroups.  Groups that failed to capture\nanything will contain the empty string.\n\n\nfun box  \nsize\n(): \nU32\n val\n\n\nReturns the capture size of the match.\n\n\nfun box  \nstart_pos\n(): \nUSize\n val\n\n\nReturns the character position of the first character in the match.\n\n\nPrivate Functions\n\n\nfun box  \n_final\n(): \nNone\n val\n\n\nFree the underlying PCRE2 data.", 
            "title": "class Match"
        }, 
        {
            "location": "/regex-Match/#class-regexmatch", 
            "text": "Default capability :  ref  Contains match data for a combination of a regex and a subject.", 
            "title": "class regex/Match"
        }, 
        {
            "location": "/regex-Match/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-Match/#new-_createsubject-string-val-array91u8-val93-val-m-pointer91_match-val93-ref", 
            "text": "Store a match, a subject, and a size.", 
            "title": "new _create(subject: (String val | Array[U8 val] val), m: Pointer[_Match val] ref)"
        }, 
        {
            "location": "/regex-Match/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-Match/#fun-box-apply91optional-a-string-iso-array91u8-val93-iso-seq91u8-val93-iso93i-u32-val-a-iso", 
            "text": "Returns a capture by number. Raises an error if the index is out of bounds.", 
            "title": "fun box  apply[optional A: ((String iso | Array[U8 val] iso) &amp; Seq[U8 val] iso)](i: U32 val): A iso^ ?"
        }, 
        {
            "location": "/regex-Match/#fun-ref-dispose-none-val", 
            "text": "Free the underlying PCRE2 data.", 
            "title": "fun ref  dispose(): None val"
        }, 
        {
            "location": "/regex-Match/#fun-box-end_pos-usize-val", 
            "text": "Returns the character position of the last character in the match.", 
            "title": "fun box  end_pos(): USize val"
        }, 
        {
            "location": "/regex-Match/#fun-box-find91optional-a-string-iso-array91u8-val93-iso-seq91u8-val93-iso93name-string-box-a-iso", 
            "text": "Returns a capture by name. Raises an error if the named capture does not\nexist.", 
            "title": "fun box  find[optional A: ((String iso | Array[U8 val] iso) &amp; Seq[U8 val] iso)](name: String box): A iso^ ?"
        }, 
        {
            "location": "/regex-Match/#fun-box-groups-array91string-val93-iso", 
            "text": "Returns all of the captured subgroups.  Groups that failed to capture\nanything will contain the empty string.", 
            "title": "fun box  groups(): Array[String val] iso^"
        }, 
        {
            "location": "/regex-Match/#fun-box-size-u32-val", 
            "text": "Returns the capture size of the match.", 
            "title": "fun box  size(): U32 val"
        }, 
        {
            "location": "/regex-Match/#fun-box-start_pos-usize-val", 
            "text": "Returns the character position of the first character in the match.", 
            "title": "fun box  start_pos(): USize val"
        }, 
        {
            "location": "/regex-Match/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/regex-Match/#fun-box-_final-none-val", 
            "text": "Free the underlying PCRE2 data.", 
            "title": "fun box  _final(): None val"
        }, 
        {
            "location": "/regex-_PCRE2/", 
            "text": "primitive regex/_PCRE2\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_PCRE2\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_PCRE2\n val): \nBool\n val\n\n\nfun box  \nnot_empty\n(): \nU32\n val\n\n\nfun box  \nsubstitute_global\n(): \nU32\n val\n\n\nfun box  \nutf\n(): \nU32\n val", 
            "title": "primitive _PCRE2"
        }, 
        {
            "location": "/regex-_PCRE2/#primitive-regex_pcre2", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive regex/_PCRE2"
        }, 
        {
            "location": "/regex-_PCRE2/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-_PCRE2/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/regex-_PCRE2/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-_PCRE2/#fun-box-eqthat-_pcre2-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _PCRE2 val): Bool val"
        }, 
        {
            "location": "/regex-_PCRE2/#fun-box-nethat-_pcre2-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _PCRE2 val): Bool val"
        }, 
        {
            "location": "/regex-_PCRE2/#fun-box-not_empty-u32-val", 
            "text": "", 
            "title": "fun box  not_empty(): U32 val"
        }, 
        {
            "location": "/regex-_PCRE2/#fun-box-substitute_global-u32-val", 
            "text": "", 
            "title": "fun box  substitute_global(): U32 val"
        }, 
        {
            "location": "/regex-_PCRE2/#fun-box-utf-u32-val", 
            "text": "", 
            "title": "fun box  utf(): U32 val"
        }, 
        {
            "location": "/regex-_Pattern/", 
            "text": "primitive regex/_Pattern\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_Pattern\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_Pattern\n val): \nBool\n val", 
            "title": "primitive _Pattern"
        }, 
        {
            "location": "/regex-_Pattern/#primitive-regex_pattern", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive regex/_Pattern"
        }, 
        {
            "location": "/regex-_Pattern/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-_Pattern/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/regex-_Pattern/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-_Pattern/#fun-box-eqthat-_pattern-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _Pattern val): Bool val"
        }, 
        {
            "location": "/regex-_Pattern/#fun-box-nethat-_pattern-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _Pattern val): Bool val"
        }, 
        {
            "location": "/regex-Regex/", 
            "text": "class regex/Regex\n\n\nDefault capability\n: \nref\n\n\nA perl compatible regular expression. This uses the PCRE2 library, and\nattempts to enable JIT matching whenever possible.\n\n\nConstructors\n\n\nnew \ncreate\n(from: (\nString\n box | \nArray\n[\nU8\n val] box), optional jit: \nBool\n val) ?\n\n\nCompile a regular expression. Raises an error for an invalid expression.\n\n\nPublic Functions\n\n\nfun box  \napply\n(subject: (\nString\n val | \nArray\n[\nU8\n val] val), optional offset: \nUSize\n val): \nMatch\n ref^ ?\n\n\nMatch the supplied string, starting at the given offset. Returns a Match\nobject that can give precise match details. Raises an error if there is no\nmatch.\n\n\nfun ref  \ndispose\n(): \nNone\n val\n\n\nFree the underlying PCRE2 data.\n\n\nfun box  \neq\n(subject: (\nString\n box | \nArray\n[\nU8\n val] box)): \nBool\n val\n\n\nReturn true on a successful match, false otherwise.\n\n\nfun box  \nindex\n(name: \nString\n box): \nUSize\n val ?\n\n\nReturns the index of a named capture. Raises an error if the named capture\ndoes not exist.\n\n\nfun box  \nne\n(subject: (\nString\n box | \nArray\n[\nU8\n val] box)): \nBool\n val\n\n\nReturn false on a successful match, true otherwise.\n\n\nfun box  \nreplace\n[optional A: (\nSeq\n[\nU8\n val] iso \n (\nString\n iso | \nArray\n[\nU8\n val] iso))](subject: (\nString\n val | \nArray\n[\nU8\n val] val), value: (\nString\n box | \nArray\n[\nU8\n val] box), optional offset: \nUSize\n val, optional global: \nBool\n val): A iso^ ?\n\n\nPerform a match on the subject, starting at the given offset, and create\na new string using the value as a replacement for what was matched. Raise\nan error if there is no match.\n\n\nfun box  \nsplit\n(subject: \nString\n val, optional offset: \nUSize\n val): \nArray\n[\nString\n val] iso^ ?\n\n\nSplit subject by non-empty occurrences of this pattern, returning a list\nof the substrings.\n\n\nPrivate Functions\n\n\nfun box  \n_final\n(): \nNone\n val\n\n\nFree the underlying PCRE2 data.\n\n\nfun box  \n_match\n(subject: (\nString\n box | \nArray\n[\nU8\n val] box), offset: \nUSize\n val, options: \nU32\n val): \nPointer\n[\n_Match\n val] ref ?\n\n\nMatch the subject and keep the capture results. Raises an error if there\nis no match.", 
            "title": "class Regex"
        }, 
        {
            "location": "/regex-Regex/#class-regexregex", 
            "text": "Default capability :  ref  A perl compatible regular expression. This uses the PCRE2 library, and\nattempts to enable JIT matching whenever possible.", 
            "title": "class regex/Regex"
        }, 
        {
            "location": "/regex-Regex/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-Regex/#new-createfrom-string-box-array91u8-val93-box-optional-jit-bool-val", 
            "text": "Compile a regular expression. Raises an error for an invalid expression.", 
            "title": "new create(from: (String box | Array[U8 val] box), optional jit: Bool val) ?"
        }, 
        {
            "location": "/regex-Regex/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-Regex/#fun-box-applysubject-string-val-array91u8-val93-val-optional-offset-usize-val-match-ref", 
            "text": "Match the supplied string, starting at the given offset. Returns a Match\nobject that can give precise match details. Raises an error if there is no\nmatch.", 
            "title": "fun box  apply(subject: (String val | Array[U8 val] val), optional offset: USize val): Match ref^ ?"
        }, 
        {
            "location": "/regex-Regex/#fun-ref-dispose-none-val", 
            "text": "Free the underlying PCRE2 data.", 
            "title": "fun ref  dispose(): None val"
        }, 
        {
            "location": "/regex-Regex/#fun-box-eqsubject-string-box-array91u8-val93-box-bool-val", 
            "text": "Return true on a successful match, false otherwise.", 
            "title": "fun box  eq(subject: (String box | Array[U8 val] box)): Bool val"
        }, 
        {
            "location": "/regex-Regex/#fun-box-indexname-string-box-usize-val", 
            "text": "Returns the index of a named capture. Raises an error if the named capture\ndoes not exist.", 
            "title": "fun box  index(name: String box): USize val ?"
        }, 
        {
            "location": "/regex-Regex/#fun-box-nesubject-string-box-array91u8-val93-box-bool-val", 
            "text": "Return false on a successful match, true otherwise.", 
            "title": "fun box  ne(subject: (String box | Array[U8 val] box)): Bool val"
        }, 
        {
            "location": "/regex-Regex/#fun-box-replace91optional-a-seq91u8-val93-iso-string-iso-array91u8-val93-iso93subject-string-val-array91u8-val93-val-value-string-box-array91u8-val93-box-optional-offset-usize-val-optional-global-bool-val-a-iso", 
            "text": "Perform a match on the subject, starting at the given offset, and create\na new string using the value as a replacement for what was matched. Raise\nan error if there is no match.", 
            "title": "fun box  replace[optional A: (Seq[U8 val] iso &amp; (String iso | Array[U8 val] iso))](subject: (String val | Array[U8 val] val), value: (String box | Array[U8 val] box), optional offset: USize val, optional global: Bool val): A iso^ ?"
        }, 
        {
            "location": "/regex-Regex/#fun-box-splitsubject-string-val-optional-offset-usize-val-array91string-val93-iso", 
            "text": "Split subject by non-empty occurrences of this pattern, returning a list\nof the substrings.", 
            "title": "fun box  split(subject: String val, optional offset: USize val): Array[String val] iso^ ?"
        }, 
        {
            "location": "/regex-Regex/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/regex-Regex/#fun-box-_final-none-val", 
            "text": "Free the underlying PCRE2 data.", 
            "title": "fun box  _final(): None val"
        }, 
        {
            "location": "/regex-Regex/#fun-box-_matchsubject-string-box-array91u8-val93-box-offset-usize-val-options-u32-val-pointer91_match-val93-ref", 
            "text": "Match the subject and keep the capture results. Raises an error if there\nis no match.", 
            "title": "fun box  _match(subject: (String box | Array[U8 val] box), offset: USize val, options: U32 val): Pointer[_Match val] ref ?"
        }, 
        {
            "location": "/regex-_TestApply/", 
            "text": "class regex/_TestApply is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTests basic compilation and matching.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestApply"
        }, 
        {
            "location": "/regex-_TestApply/#class-regex_testapply-is-unittest-ref", 
            "text": "Default capability :  iso  Tests basic compilation and matching.", 
            "title": "class regex/_TestApply is UnitTest ref"
        }, 
        {
            "location": "/regex-_TestApply/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-_TestApply/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/regex-_TestApply/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-_TestApply/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/regex-_TestApply/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/regex-_TestApply/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/regex-_TestApply/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/regex-_TestApply/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/regex-_TestEq/", 
            "text": "class regex/_TestEq is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTests eq operator.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestEq"
        }, 
        {
            "location": "/regex-_TestEq/#class-regex_testeq-is-unittest-ref", 
            "text": "Default capability :  iso  Tests eq operator.", 
            "title": "class regex/_TestEq is UnitTest ref"
        }, 
        {
            "location": "/regex-_TestEq/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-_TestEq/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/regex-_TestEq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-_TestEq/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/regex-_TestEq/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/regex-_TestEq/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/regex-_TestEq/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/regex-_TestEq/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/regex-_TestError/", 
            "text": "class regex/_TestError is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTests basic compilation failure.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestError"
        }, 
        {
            "location": "/regex-_TestError/#class-regex_testerror-is-unittest-ref", 
            "text": "Default capability :  iso  Tests basic compilation failure.", 
            "title": "class regex/_TestError is UnitTest ref"
        }, 
        {
            "location": "/regex-_TestError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-_TestError/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/regex-_TestError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-_TestError/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/regex-_TestError/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/regex-_TestError/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/regex-_TestError/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/regex-_TestError/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/regex-_TestGroups/", 
            "text": "class regex/_TestGroups is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTests basic compilation and matching.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestGroups"
        }, 
        {
            "location": "/regex-_TestGroups/#class-regex_testgroups-is-unittest-ref", 
            "text": "Default capability :  iso  Tests basic compilation and matching.", 
            "title": "class regex/_TestGroups is UnitTest ref"
        }, 
        {
            "location": "/regex-_TestGroups/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-_TestGroups/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/regex-_TestGroups/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-_TestGroups/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/regex-_TestGroups/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/regex-_TestGroups/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/regex-_TestGroups/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/regex-_TestGroups/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/regex-_TestSplit/", 
            "text": "class regex/_TestSplit is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTests split.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val ?\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestSplit"
        }, 
        {
            "location": "/regex-_TestSplit/#class-regex_testsplit-is-unittest-ref", 
            "text": "Default capability :  iso  Tests split.", 
            "title": "class regex/_TestSplit is UnitTest ref"
        }, 
        {
            "location": "/regex-_TestSplit/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-_TestSplit/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/regex-_TestSplit/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-_TestSplit/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val ?"
        }, 
        {
            "location": "/regex-_TestSplit/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/regex-_TestSplit/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/regex-_TestSplit/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/regex-_TestSplit/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/signals--index/", 
            "text": "Signals package\n\n\nThe Signals package provides support for handling Unix style signals.\nFor each signal that you want to handle, you need to create a \nSignalHandler\n\nand a corresponding \nSignalNotify\n object. Each SignalHandler runs as it own\nactor and upon receiving the signal will call its corresponding \nSignalNotify\n's\napply method.\n\n\nExample program\n\n\nThe following program will listen for the TERM signal and output a message to\nstandard out if it is received.\n\n\nuse \nsignals\n\n\nactor Main\n  new create(env: Env) =\n\n    // Create a TERM handler\n    let signal = SignalHandler(TermHandler(env), Sig.term())\n    // Raise TERM signal\n    signal.raise()\n\nclass TermHandler is SignalNotify\n  let _env: Env\n\n  new iso create(env: Env) =\n\n    _env = env\n\n  fun ref apply(count: U32): Bool =\n\n    _env.out.print(\nTERM signal received\n)\n    true\n\n\n\n\nSignal portability\n\n\nThe \nSig\n primitive provides support for portable signal handling across Linux,\nFreeBSD and OSX. Signals are not supported on Windows and attempting to use them\nwill cause a compilation error.\n\n\nShutting down handlers\n\n\nUnlike a \nTCPConnection\n and other forms of input receiving, creating a\n\nSignalHandler\n will not keep your program running. As such, you are not required\nto call \ndispose\n on your signal handlers in order to shutdown your program.\n\n\nEntities\n\n\n\n\nactor Main\n\n\nprimitive Sig\n\n\nactor SignalHandler\n\n\ninterface SignalNotify\n\n\nprimitive SignalRaise\n\n\nclass _TestSighupNotify\n\n\nclass _TestSignalINT", 
            "title": "Package"
        }, 
        {
            "location": "/signals--index/#signals-package", 
            "text": "The Signals package provides support for handling Unix style signals.\nFor each signal that you want to handle, you need to create a  SignalHandler \nand a corresponding  SignalNotify  object. Each SignalHandler runs as it own\nactor and upon receiving the signal will call its corresponding  SignalNotify 's\napply method.", 
            "title": "Signals package"
        }, 
        {
            "location": "/signals--index/#example-program", 
            "text": "The following program will listen for the TERM signal and output a message to\nstandard out if it is received.  use  signals \n\nactor Main\n  new create(env: Env) = \n    // Create a TERM handler\n    let signal = SignalHandler(TermHandler(env), Sig.term())\n    // Raise TERM signal\n    signal.raise()\n\nclass TermHandler is SignalNotify\n  let _env: Env\n\n  new iso create(env: Env) = \n    _env = env\n\n  fun ref apply(count: U32): Bool = \n    _env.out.print( TERM signal received )\n    true", 
            "title": "Example program"
        }, 
        {
            "location": "/signals--index/#signal-portability", 
            "text": "The  Sig  primitive provides support for portable signal handling across Linux,\nFreeBSD and OSX. Signals are not supported on Windows and attempting to use them\nwill cause a compilation error.", 
            "title": "Signal portability"
        }, 
        {
            "location": "/signals--index/#shutting-down-handlers", 
            "text": "Unlike a  TCPConnection  and other forms of input receiving, creating a SignalHandler  will not keep your program running. As such, you are not required\nto call  dispose  on your signal handlers in order to shutdown your program.", 
            "title": "Shutting down handlers"
        }, 
        {
            "location": "/signals--index/#entities", 
            "text": "actor Main  primitive Sig  actor SignalHandler  interface SignalNotify  primitive SignalRaise  class _TestSighupNotify  class _TestSignalINT", 
            "title": "Entities"
        }, 
        {
            "location": "/signals-Main/", 
            "text": "actor signals/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/signals-Main/#actor-signalsmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor signals/Main is TestList ref"
        }, 
        {
            "location": "/signals-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/signals-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/signals-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/signals-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/signals-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/signals-Sig/", 
            "text": "primitive signals/Sig\n\n\nDefault capability\n: \nval\n\n\nDefine the portable signal numbers. Other signals can be used, but they are\nnot guaranteed to be portable.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \nabrt\n(): \nU32\n val\n\n\nfun box  \nalrm\n(): \nU32\n val\n\n\nfun box  \nbus\n(): \nU32\n val\n\n\nfun box  \nchld\n(): \nU32\n val\n\n\nfun box  \ncont\n(): \nU32\n val\n\n\nfun box  \nemt\n(): \nU32\n val\n\n\nfun box  \neq\n(that: \nSig\n val): \nBool\n val\n\n\nfun box  \nfpe\n(): \nU32\n val\n\n\nfun box  \nhup\n(): \nU32\n val\n\n\nfun box  \nill\n(): \nU32\n val\n\n\nfun box  \ninfo\n(): \nU32\n val\n\n\nfun box  \nint\n(): \nU32\n val\n\n\nfun box  \nio\n(): \nU32\n val\n\n\nfun box  \nkill\n(): \nU32\n val\n\n\nfun box  \nne\n(that: \nSig\n val): \nBool\n val\n\n\nfun box  \npipe\n(): \nU32\n val\n\n\nfun box  \nprof\n(): \nU32\n val\n\n\nfun box  \npwr\n(): \nU32\n val\n\n\nfun box  \nquit\n(): \nU32\n val\n\n\nfun box  \nrt\n(n: \nU32\n val): \nU32\n val ?\n\n\nfun box  \nsegv\n(): \nU32\n val\n\n\nfun box  \nstkflt\n(): \nU32\n val\n\n\nfun box  \nstop\n(): \nU32\n val\n\n\nfun box  \nsys\n(): \nU32\n val\n\n\nfun box  \nterm\n(): \nU32\n val\n\n\nfun box  \ntrap\n(): \nU32\n val\n\n\nfun box  \ntstp\n(): \nU32\n val\n\n\nfun box  \nttin\n(): \nU32\n val\n\n\nfun box  \nttou\n(): \nU32\n val\n\n\nfun box  \nurg\n(): \nU32\n val\n\n\nfun box  \nusr1\n(): \nU32\n val\n\n\nfun box  \nusr2\n(): \nU32\n val\n\n\nfun box  \nvtalrm\n(): \nU32\n val\n\n\nfun box  \nwinch\n(): \nU32\n val\n\n\nfun box  \nxcpu\n(): \nU32\n val\n\n\nfun box  \nxfsz\n(): \nU32\n val", 
            "title": "primitive Sig"
        }, 
        {
            "location": "/signals-Sig/#primitive-signalssig", 
            "text": "Default capability :  val  Define the portable signal numbers. Other signals can be used, but they are\nnot guaranteed to be portable.", 
            "title": "primitive signals/Sig"
        }, 
        {
            "location": "/signals-Sig/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/signals-Sig/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/signals-Sig/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/signals-Sig/#fun-box-abrt-u32-val", 
            "text": "", 
            "title": "fun box  abrt(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-alrm-u32-val", 
            "text": "", 
            "title": "fun box  alrm(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-bus-u32-val", 
            "text": "", 
            "title": "fun box  bus(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-chld-u32-val", 
            "text": "", 
            "title": "fun box  chld(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-cont-u32-val", 
            "text": "", 
            "title": "fun box  cont(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-emt-u32-val", 
            "text": "", 
            "title": "fun box  emt(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-eqthat-sig-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Sig val): Bool val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-fpe-u32-val", 
            "text": "", 
            "title": "fun box  fpe(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-hup-u32-val", 
            "text": "", 
            "title": "fun box  hup(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-ill-u32-val", 
            "text": "", 
            "title": "fun box  ill(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-info-u32-val", 
            "text": "", 
            "title": "fun box  info(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-int-u32-val", 
            "text": "", 
            "title": "fun box  int(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-io-u32-val", 
            "text": "", 
            "title": "fun box  io(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-kill-u32-val", 
            "text": "", 
            "title": "fun box  kill(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-nethat-sig-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Sig val): Bool val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-pipe-u32-val", 
            "text": "", 
            "title": "fun box  pipe(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-prof-u32-val", 
            "text": "", 
            "title": "fun box  prof(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-pwr-u32-val", 
            "text": "", 
            "title": "fun box  pwr(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-quit-u32-val", 
            "text": "", 
            "title": "fun box  quit(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-rtn-u32-val-u32-val", 
            "text": "", 
            "title": "fun box  rt(n: U32 val): U32 val ?"
        }, 
        {
            "location": "/signals-Sig/#fun-box-segv-u32-val", 
            "text": "", 
            "title": "fun box  segv(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-stkflt-u32-val", 
            "text": "", 
            "title": "fun box  stkflt(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-stop-u32-val", 
            "text": "", 
            "title": "fun box  stop(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-sys-u32-val", 
            "text": "", 
            "title": "fun box  sys(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-term-u32-val", 
            "text": "", 
            "title": "fun box  term(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-trap-u32-val", 
            "text": "", 
            "title": "fun box  trap(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-tstp-u32-val", 
            "text": "", 
            "title": "fun box  tstp(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-ttin-u32-val", 
            "text": "", 
            "title": "fun box  ttin(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-ttou-u32-val", 
            "text": "", 
            "title": "fun box  ttou(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-urg-u32-val", 
            "text": "", 
            "title": "fun box  urg(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-usr1-u32-val", 
            "text": "", 
            "title": "fun box  usr1(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-usr2-u32-val", 
            "text": "", 
            "title": "fun box  usr2(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-vtalrm-u32-val", 
            "text": "", 
            "title": "fun box  vtalrm(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-winch-u32-val", 
            "text": "", 
            "title": "fun box  winch(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-xcpu-u32-val", 
            "text": "", 
            "title": "fun box  xcpu(): U32 val"
        }, 
        {
            "location": "/signals-Sig/#fun-box-xfsz-u32-val", 
            "text": "", 
            "title": "fun box  xfsz(): U32 val"
        }, 
        {
            "location": "/signals-SignalHandler/", 
            "text": "actor signals/SignalHandler\n\n\nDefault capability\n: \ntag\n\n\nListen for a specific signal.\n\n\nConstructors\n\n\nnew \ncreate\n(notify: \nSignalNotify\n iso, sig: \nU32\n val)\n\n\nCreate a signal handler.\n\n\nPublic Behaviours\n\n\nbe \ndispose\n()\n\n\nDispose of the signal handler.\n\n\nbe \nraise\n()\n\n\nRaise the signal.\n\n\nPrivate Behaviours\n\n\nbe \nevent\nnotify\n(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nCalled when the signal is received, or when the AsioEventID can be\ndestroyed.\n\n\nPrivate Functions\n\n\nfun ref  \n_dispose\n(): \nNone\n val\n\n\nDispose of the AsioEventID.", 
            "title": "actor SignalHandler"
        }, 
        {
            "location": "/signals-SignalHandler/#actor-signalssignalhandler", 
            "text": "Default capability :  tag  Listen for a specific signal.", 
            "title": "actor signals/SignalHandler"
        }, 
        {
            "location": "/signals-SignalHandler/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/signals-SignalHandler/#new-createnotify-signalnotify-iso-sig-u32-val", 
            "text": "Create a signal handler.", 
            "title": "new create(notify: SignalNotify iso, sig: U32 val)"
        }, 
        {
            "location": "/signals-SignalHandler/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/signals-SignalHandler/#be-dispose", 
            "text": "Dispose of the signal handler.", 
            "title": "be dispose()"
        }, 
        {
            "location": "/signals-SignalHandler/#be-raise", 
            "text": "Raise the signal.", 
            "title": "be raise()"
        }, 
        {
            "location": "/signals-SignalHandler/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/signals-SignalHandler/#be-eventnotifyevent-pointer91asioevent-val93-tag-flags-u32-val-arg-u32-val", 
            "text": "Called when the signal is received, or when the AsioEventID can be\ndestroyed.", 
            "title": "be eventnotify(event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)"
        }, 
        {
            "location": "/signals-SignalHandler/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/signals-SignalHandler/#fun-ref-_dispose-none-val", 
            "text": "Dispose of the AsioEventID.", 
            "title": "fun ref  _dispose(): None val"
        }, 
        {
            "location": "/signals-SignalNotify/", 
            "text": "interface signals/SignalNotify\n\n\nDefault capability\n: \nref\n\n\nNotifications for a signal.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(count: \nU32\n val): \nBool\n val\n\n\nCalled with the the number of times the signal has fired since this was\nlast called. Return false to stop listening for the signal.\n\n\nfun ref  \ndispose\n(): \nNone\n val\n\n\nCalled if the signal is disposed. This is also called if the notifier\nreturns false.", 
            "title": "interface SignalNotify"
        }, 
        {
            "location": "/signals-SignalNotify/#interface-signalssignalnotify", 
            "text": "Default capability :  ref  Notifications for a signal.", 
            "title": "interface signals/SignalNotify"
        }, 
        {
            "location": "/signals-SignalNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/signals-SignalNotify/#fun-ref-applycount-u32-val-bool-val", 
            "text": "Called with the the number of times the signal has fired since this was\nlast called. Return false to stop listening for the signal.", 
            "title": "fun ref  apply(count: U32 val): Bool val"
        }, 
        {
            "location": "/signals-SignalNotify/#fun-ref-dispose-none-val", 
            "text": "Called if the signal is disposed. This is also called if the notifier\nreturns false.", 
            "title": "fun ref  dispose(): None val"
        }, 
        {
            "location": "/signals-SignalRaise/", 
            "text": "primitive signals/SignalRaise\n\n\nDefault capability\n: \nval\n\n\nRaise a signal.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(sig: \nU32\n val): \nNone\n val\n\n\nfun box  \neq\n(that: \nSignalRaise\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nSignalRaise\n val): \nBool\n val", 
            "title": "primitive SignalRaise"
        }, 
        {
            "location": "/signals-SignalRaise/#primitive-signalssignalraise", 
            "text": "Default capability :  val  Raise a signal.", 
            "title": "primitive signals/SignalRaise"
        }, 
        {
            "location": "/signals-SignalRaise/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/signals-SignalRaise/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/signals-SignalRaise/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/signals-SignalRaise/#fun-box-applysig-u32-val-none-val", 
            "text": "", 
            "title": "fun box  apply(sig: U32 val): None val"
        }, 
        {
            "location": "/signals-SignalRaise/#fun-box-eqthat-signalraise-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: SignalRaise val): Bool val"
        }, 
        {
            "location": "/signals-SignalRaise/#fun-box-nethat-signalraise-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: SignalRaise val): Bool val"
        }, 
        {
            "location": "/signals-_TestSighupNotify/", 
            "text": "class signals/_TestSighupNotify is \nSignalNotify\n ref\n\n\nDefault capability\n: \nref\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(h: \nTestHelper\n val)\n\n\nPublic Functions\n\n\nfun ref  \napply\n(count: \nU32\n val): \nBool\n val\n\n\nfun ref  \ndispose\n(): \nNone\n val", 
            "title": "class _TestSighupNotify"
        }, 
        {
            "location": "/signals-_TestSighupNotify/#class-signals_testsighupnotify-is-signalnotify-ref", 
            "text": "Default capability :  ref  No doc string provided.", 
            "title": "class signals/_TestSighupNotify is SignalNotify ref"
        }, 
        {
            "location": "/signals-_TestSighupNotify/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/signals-_TestSighupNotify/#new-createh-testhelper-val", 
            "text": "", 
            "title": "new create(h: TestHelper val)"
        }, 
        {
            "location": "/signals-_TestSighupNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/signals-_TestSighupNotify/#fun-ref-applycount-u32-val-bool-val", 
            "text": "", 
            "title": "fun ref  apply(count: U32 val): Bool val"
        }, 
        {
            "location": "/signals-_TestSighupNotify/#fun-ref-dispose-none-val", 
            "text": "", 
            "title": "fun ref  dispose(): None val"
        }, 
        {
            "location": "/signals-_TestSignalINT/", 
            "text": "class signals/_TestSignalINT is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun ref  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \ntimedout\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestSignalINT"
        }, 
        {
            "location": "/signals-_TestSignalINT/#class-signals_testsignalint-is-unittest-ref", 
            "text": "Default capability :  iso  No doc string provided.", 
            "title": "class signals/_TestSignalINT is UnitTest ref"
        }, 
        {
            "location": "/signals-_TestSignalINT/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/signals-_TestSignalINT/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/signals-_TestSignalINT/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/signals-_TestSignalINT/#fun-ref-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/signals-_TestSignalINT/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/signals-_TestSignalINT/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/signals-_TestSignalINT/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/signals-_TestSignalINT/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/signals-_TestSignalINT/#fun-box-timedouth-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  timedout(h: TestHelper val): None val"
        }, 
        {
            "location": "/strings--index/", 
            "text": "No package doc string provided for strings.\n\n\nEntities\n\n\n\n\nprimitive CommonPrefix\n\n\nactor Main\n\n\nclass _TestStringsCommonPrefix", 
            "title": "Package"
        }, 
        {
            "location": "/strings--index/#entities", 
            "text": "primitive CommonPrefix  actor Main  class _TestStringsCommonPrefix", 
            "title": "Entities"
        }, 
        {
            "location": "/strings-CommonPrefix/", 
            "text": "primitive strings/CommonPrefix\n\n\nDefault capability\n: \nval\n\n\nCreates a string that is the common prefix of the supplied strings, possibly empty.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(data: \nReadSeq\n[\nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box] box): \nString\n iso^\n\n\nfun box  \neq\n(that: \nCommonPrefix\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \nCommonPrefix\n val): \nBool\n val", 
            "title": "primitive CommonPrefix"
        }, 
        {
            "location": "/strings-CommonPrefix/#primitive-stringscommonprefix", 
            "text": "Default capability :  val  Creates a string that is the common prefix of the supplied strings, possibly empty.", 
            "title": "primitive strings/CommonPrefix"
        }, 
        {
            "location": "/strings-CommonPrefix/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/strings-CommonPrefix/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/strings-CommonPrefix/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/strings-CommonPrefix/#fun-box-applydata-readseq91stringable91formatdefault-val-prefixdefault-val93-box93-box-string-iso", 
            "text": "", 
            "title": "fun box  apply(data: ReadSeq[Stringable[FormatDefault val, PrefixDefault val] box] box): String iso^"
        }, 
        {
            "location": "/strings-CommonPrefix/#fun-box-eqthat-commonprefix-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: CommonPrefix val): Bool val"
        }, 
        {
            "location": "/strings-CommonPrefix/#fun-box-nethat-commonprefix-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: CommonPrefix val): Bool val"
        }, 
        {
            "location": "/strings-Main/", 
            "text": "actor strings/Main is \nTestList\n ref\n\n\nDefault capability\n: \ntag\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n(env: \nEnv\n val)\n\n\nnew \nmake\n()\n\n\nPublic Functions\n\n\nfun tag  \ntests\n(test: \nPonyTest\n tag): \nNone\n val", 
            "title": "actor Main"
        }, 
        {
            "location": "/strings-Main/#actor-stringsmain-is-testlist-ref", 
            "text": "Default capability :  tag  No doc string provided.", 
            "title": "actor strings/Main is TestList ref"
        }, 
        {
            "location": "/strings-Main/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/strings-Main/#new-createenv-env-val", 
            "text": "", 
            "title": "new create(env: Env val)"
        }, 
        {
            "location": "/strings-Main/#new-make", 
            "text": "", 
            "title": "new make()"
        }, 
        {
            "location": "/strings-Main/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/strings-Main/#fun-tag-teststest-ponytest-tag-none-val", 
            "text": "", 
            "title": "fun tag  tests(test: PonyTest tag): None val"
        }, 
        {
            "location": "/strings-_TestStringsCommonPrefix/", 
            "text": "class strings/_TestStringsCommonPrefix is \nUnitTest\n ref\n\n\nDefault capability\n: \niso\n\n\nTest strings/CommonPrefix\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun box  \nexclusion_group\n(): \nString\n val\n\n\nfun box  \nname\n(): \nString\n val\n\n\nfun ref  \ntear_down\n(h: \nTestHelper\n val): \nNone\n val\n\n\nfun ref  \ntimed_out\n(h: \nTestHelper\n val): \nNone\n val", 
            "title": "class _TestStringsCommonPrefix"
        }, 
        {
            "location": "/strings-_TestStringsCommonPrefix/#class-strings_teststringscommonprefix-is-unittest-ref", 
            "text": "Default capability :  iso  Test strings/CommonPrefix", 
            "title": "class strings/_TestStringsCommonPrefix is UnitTest ref"
        }, 
        {
            "location": "/strings-_TestStringsCommonPrefix/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/strings-_TestStringsCommonPrefix/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/strings-_TestStringsCommonPrefix/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/strings-_TestStringsCommonPrefix/#fun-box-applyh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun box  apply(h: TestHelper val): None val"
        }, 
        {
            "location": "/strings-_TestStringsCommonPrefix/#fun-box-exclusion_group-string-val", 
            "text": "", 
            "title": "fun box  exclusion_group(): String val"
        }, 
        {
            "location": "/strings-_TestStringsCommonPrefix/#fun-box-name-string-val", 
            "text": "", 
            "title": "fun box  name(): String val"
        }, 
        {
            "location": "/strings-_TestStringsCommonPrefix/#fun-ref-tear_downh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  tear_down(h: TestHelper val): None val"
        }, 
        {
            "location": "/strings-_TestStringsCommonPrefix/#fun-ref-timed_outh-testhelper-val-none-val", 
            "text": "", 
            "title": "fun ref  timed_out(h: TestHelper val): None val"
        }, 
        {
            "location": "/term--index/", 
            "text": "No package doc string provided for term.\n\n\nEntities\n\n\n\n\nprimitive ANSI\n\n\ninterface ANSINotify\n\n\nactor ANSITerm\n\n\nprimitive _EscapeCSI\n\n\nprimitive _EscapeMod\n\n\nprimitive _EscapeNone\n\n\nprimitive _EscapeSS3\n\n\nprimitive _EscapeStart\n\n\ntype _EscapeState\n\n\nclass Readline\n\n\ninterface ReadlineNotify", 
            "title": "Package"
        }, 
        {
            "location": "/term--index/#entities", 
            "text": "primitive ANSI  interface ANSINotify  actor ANSITerm  primitive _EscapeCSI  primitive _EscapeMod  primitive _EscapeNone  primitive _EscapeSS3  primitive _EscapeStart  type _EscapeState  class Readline  interface ReadlineNotify", 
            "title": "Entities"
        }, 
        {
            "location": "/term-ANSI/", 
            "text": "primitive term/ANSI\n\n\nDefault capability\n: \nval\n\n\nThese strings can be embedded in text when writing to a StdStream to create\na text-based UI.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \nblack\n(): \nString\n val\n\n\nBlack text.\n\n\nfun box  \nblack_bg\n(): \nString\n val\n\n\nBlack background.\n\n\nfun box  \nblink\n(optional state: \nBool\n val): \nString\n val\n\n\nBlinking text. Does nothing on Windows.\n\n\nfun box  \nblue\n(): \nString\n val\n\n\nBlue text.\n\n\nfun box  \nblue_bg\n(): \nString\n val\n\n\nBlue background.\n\n\nfun box  \nbold\n(optional state: \nBool\n val): \nString\n val\n\n\nBold text. Does nothing on Windows.\n\n\nfun box  \nbright_blue\n(): \nString\n val\n\n\nBright blue text.\n\n\nfun box  \nbright_blue_bg\n(): \nString\n val\n\n\nBright blue background.\n\n\nfun box  \nbright_cyan\n(): \nString\n val\n\n\nBright cyan text.\n\n\nfun box  \nbright_cyan_bg\n(): \nString\n val\n\n\nBright cyan background.\n\n\nfun box  \nbright_green\n(): \nString\n val\n\n\nBright green text.\n\n\nfun box  \nbright_green_bg\n(): \nString\n val\n\n\nBright green background.\n\n\nfun box  \nbright_grey\n(): \nString\n val\n\n\nBright grey text.\n\n\nfun box  \nbright_grey_bg\n(): \nString\n val\n\n\nBright grey background.\n\n\nfun box  \nbright_magenta\n(): \nString\n val\n\n\nBright magenta text.\n\n\nfun box  \nbright_magenta_bg\n(): \nString\n val\n\n\nBright magenta background.\n\n\nfun box  \nbright_red\n(): \nString\n val\n\n\nBright red text.\n\n\nfun box  \nbright_red_bg\n(): \nString\n val\n\n\nBright red background.\n\n\nfun box  \nbright_yellow\n(): \nString\n val\n\n\nBright yellow text.\n\n\nfun box  \nbright_yellow_bg\n(): \nString\n val\n\n\nBright yellow background.\n\n\nfun box  \nclear\n(): \nString\n val\n\n\nClear the screen and move the cursor to the top left corner.\n\n\nfun box  \ncursor\n(optional x: \nU32\n val, optional y: \nU32\n val): \nString\n val\n\n\nMove the cursor to line y, column x. 0 is the same as 1. This indexes from\nthe top left corner of the screen.\n\n\nfun box  \ncyan\n(): \nString\n val\n\n\nCyan text.\n\n\nfun box  \ncyan_bg\n(): \nString\n val\n\n\nCyan background.\n\n\nfun box  \ndown\n(optional n: \nU32\n val): \nString\n val\n\n\nMove the cursor down n lines. 0 is the same as 1.\n\n\nfun box  \neq\n(that: \nANSI\n val): \nBool\n val\n\n\nfun box  \nerase\n(): \nString\n val\n\n\nErases everything to the left of the cursor on the line the cursor is on.\n\n\nfun box  \ngreen\n(): \nString\n val\n\n\nGreen text.\n\n\nfun box  \ngreen_bg\n(): \nString\n val\n\n\nGreen background.\n\n\nfun box  \ngrey\n(): \nString\n val\n\n\nGrey text.\n\n\nfun box  \ngrey_bg\n(): \nString\n val\n\n\nGrey background.\n\n\nfun box  \nleft\n(optional n: \nU32\n val): \nString\n val\n\n\nMove the cursor left n columns. 0 is the same as 1.\n\n\nfun box  \nmagenta\n(): \nString\n val\n\n\nMagenta text.\n\n\nfun box  \nmagenta_bg\n(): \nString\n val\n\n\nMagenta background.\n\n\nfun box  \nne\n(that: \nANSI\n val): \nBool\n val\n\n\nfun box  \nred\n(): \nString\n val\n\n\nRed text.\n\n\nfun box  \nred_bg\n(): \nString\n val\n\n\nRed background.\n\n\nfun box  \nreset\n(): \nString\n val\n\n\nResets all colours and text styles to the default.\n\n\nfun box  \nreverse\n(optional state: \nBool\n val): \nString\n val\n\n\nSwap foreground and background colour.\n\n\nfun box  \nright\n(optional n: \nU32\n val): \nString\n val\n\n\nMove the cursor right n columns. 0 is the same as 1.\n\n\nfun box  \nunderline\n(optional state: \nBool\n val): \nString\n val\n\n\nUnderlined text. Does nothing on Windows.\n\n\nfun box  \nup\n(optional n: \nU32\n val): \nString\n val\n\n\nMove the cursor up n lines. 0 is the same as 1.\n\n\nfun box  \nwhite\n(): \nString\n val\n\n\nWhite text.\n\n\nfun box  \nwhite_bg\n(): \nString\n val\n\n\nWhite background.\n\n\nfun box  \nyellow\n(): \nString\n val\n\n\nYellow text.\n\n\nfun box  \nyellow_bg\n(): \nString\n val\n\n\nYellow background.", 
            "title": "primitive ANSI"
        }, 
        {
            "location": "/term-ANSI/#primitive-termansi", 
            "text": "Default capability :  val  These strings can be embedded in text when writing to a StdStream to create\na text-based UI.", 
            "title": "primitive term/ANSI"
        }, 
        {
            "location": "/term-ANSI/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-ANSI/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/term-ANSI/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-ANSI/#fun-box-black-string-val", 
            "text": "Black text.", 
            "title": "fun box  black(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-black_bg-string-val", 
            "text": "Black background.", 
            "title": "fun box  black_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-blinkoptional-state-bool-val-string-val", 
            "text": "Blinking text. Does nothing on Windows.", 
            "title": "fun box  blink(optional state: Bool val): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-blue-string-val", 
            "text": "Blue text.", 
            "title": "fun box  blue(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-blue_bg-string-val", 
            "text": "Blue background.", 
            "title": "fun box  blue_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-boldoptional-state-bool-val-string-val", 
            "text": "Bold text. Does nothing on Windows.", 
            "title": "fun box  bold(optional state: Bool val): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_blue-string-val", 
            "text": "Bright blue text.", 
            "title": "fun box  bright_blue(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_blue_bg-string-val", 
            "text": "Bright blue background.", 
            "title": "fun box  bright_blue_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_cyan-string-val", 
            "text": "Bright cyan text.", 
            "title": "fun box  bright_cyan(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_cyan_bg-string-val", 
            "text": "Bright cyan background.", 
            "title": "fun box  bright_cyan_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_green-string-val", 
            "text": "Bright green text.", 
            "title": "fun box  bright_green(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_green_bg-string-val", 
            "text": "Bright green background.", 
            "title": "fun box  bright_green_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_grey-string-val", 
            "text": "Bright grey text.", 
            "title": "fun box  bright_grey(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_grey_bg-string-val", 
            "text": "Bright grey background.", 
            "title": "fun box  bright_grey_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_magenta-string-val", 
            "text": "Bright magenta text.", 
            "title": "fun box  bright_magenta(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_magenta_bg-string-val", 
            "text": "Bright magenta background.", 
            "title": "fun box  bright_magenta_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_red-string-val", 
            "text": "Bright red text.", 
            "title": "fun box  bright_red(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_red_bg-string-val", 
            "text": "Bright red background.", 
            "title": "fun box  bright_red_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_yellow-string-val", 
            "text": "Bright yellow text.", 
            "title": "fun box  bright_yellow(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-bright_yellow_bg-string-val", 
            "text": "Bright yellow background.", 
            "title": "fun box  bright_yellow_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-clear-string-val", 
            "text": "Clear the screen and move the cursor to the top left corner.", 
            "title": "fun box  clear(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-cursoroptional-x-u32-val-optional-y-u32-val-string-val", 
            "text": "Move the cursor to line y, column x. 0 is the same as 1. This indexes from\nthe top left corner of the screen.", 
            "title": "fun box  cursor(optional x: U32 val, optional y: U32 val): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-cyan-string-val", 
            "text": "Cyan text.", 
            "title": "fun box  cyan(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-cyan_bg-string-val", 
            "text": "Cyan background.", 
            "title": "fun box  cyan_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-downoptional-n-u32-val-string-val", 
            "text": "Move the cursor down n lines. 0 is the same as 1.", 
            "title": "fun box  down(optional n: U32 val): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-eqthat-ansi-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: ANSI val): Bool val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-erase-string-val", 
            "text": "Erases everything to the left of the cursor on the line the cursor is on.", 
            "title": "fun box  erase(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-green-string-val", 
            "text": "Green text.", 
            "title": "fun box  green(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-green_bg-string-val", 
            "text": "Green background.", 
            "title": "fun box  green_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-grey-string-val", 
            "text": "Grey text.", 
            "title": "fun box  grey(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-grey_bg-string-val", 
            "text": "Grey background.", 
            "title": "fun box  grey_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-leftoptional-n-u32-val-string-val", 
            "text": "Move the cursor left n columns. 0 is the same as 1.", 
            "title": "fun box  left(optional n: U32 val): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-magenta-string-val", 
            "text": "Magenta text.", 
            "title": "fun box  magenta(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-magenta_bg-string-val", 
            "text": "Magenta background.", 
            "title": "fun box  magenta_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-nethat-ansi-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: ANSI val): Bool val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-red-string-val", 
            "text": "Red text.", 
            "title": "fun box  red(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-red_bg-string-val", 
            "text": "Red background.", 
            "title": "fun box  red_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-reset-string-val", 
            "text": "Resets all colours and text styles to the default.", 
            "title": "fun box  reset(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-reverseoptional-state-bool-val-string-val", 
            "text": "Swap foreground and background colour.", 
            "title": "fun box  reverse(optional state: Bool val): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-rightoptional-n-u32-val-string-val", 
            "text": "Move the cursor right n columns. 0 is the same as 1.", 
            "title": "fun box  right(optional n: U32 val): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-underlineoptional-state-bool-val-string-val", 
            "text": "Underlined text. Does nothing on Windows.", 
            "title": "fun box  underline(optional state: Bool val): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-upoptional-n-u32-val-string-val", 
            "text": "Move the cursor up n lines. 0 is the same as 1.", 
            "title": "fun box  up(optional n: U32 val): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-white-string-val", 
            "text": "White text.", 
            "title": "fun box  white(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-white_bg-string-val", 
            "text": "White background.", 
            "title": "fun box  white_bg(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-yellow-string-val", 
            "text": "Yellow text.", 
            "title": "fun box  yellow(): String val"
        }, 
        {
            "location": "/term-ANSI/#fun-box-yellow_bg-string-val", 
            "text": "Yellow background.", 
            "title": "fun box  yellow_bg(): String val"
        }, 
        {
            "location": "/term-ANSINotify/", 
            "text": "interface term/ANSINotify\n\n\nDefault capability\n: \nref\n\n\nReceive input from an ANSITerm.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(term: \nANSITerm\n ref, input: \nU8\n val): \nNone\n val\n\n\nfun ref  \nclosed\n(): \nNone\n val\n\n\nfun ref  \ndelete\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \ndown\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \nend_key\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \nfn_key\n(i: \nU8\n val, ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \nhome\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \ninsert\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \nleft\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \npage_down\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \npage_up\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \nprompt\n(term: \nANSITerm\n ref, value: \nString\n val): \nNone\n val\n\n\nfun ref  \nright\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \nup\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val", 
            "title": "interface ANSINotify"
        }, 
        {
            "location": "/term-ANSINotify/#interface-termansinotify", 
            "text": "Default capability :  ref  Receive input from an ANSITerm.", 
            "title": "interface term/ANSINotify"
        }, 
        {
            "location": "/term-ANSINotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-applyterm-ansiterm-ref-input-u8-val-none-val", 
            "text": "", 
            "title": "fun ref  apply(term: ANSITerm ref, input: U8 val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-closed-none-val", 
            "text": "", 
            "title": "fun ref  closed(): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-deletectrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  delete(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-downctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  down(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-end_keyctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  end_key(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-fn_keyi-u8-val-ctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  fn_key(i: U8 val, ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-homectrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  home(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-insertctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  insert(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-leftctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  left(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-page_downctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  page_down(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-page_upctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  page_up(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-promptterm-ansiterm-ref-value-string-val-none-val", 
            "text": "", 
            "title": "fun ref  prompt(term: ANSITerm ref, value: String val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-rightctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  right(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-ANSINotify/#fun-ref-upctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  up(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-ANSITerm/", 
            "text": "actor term/ANSITerm\n\n\nDefault capability\n: \ntag\n\n\nHandles ANSI escape codes from stdin.\n\n\nConstructors\n\n\nnew \ncreate\n(notify: \nANSINotify\n iso, source: \nDisposableActor\n tag, optional timers: \nTimers\n tag)\n\n\nPublic Behaviours\n\n\nbe \napply\n(data: \nArray\n[\nU8\n val] iso)\n\n\nReceives input from stdin.\n\n\nbe \ndispose\n()\n\n\nStop accepting input, inform the notifier we have closed, and dispose of\nour source.\n\n\nbe \nprompt\n(value: \nString\n val)\n\n\nPass a prompt along to the notifier.\n\n\nPrivate Behaviours\n\n\nbe \n_timeout\n()\n\n\nOur timer since receiving an ESC has expired. Send the buffered data as if\nit was not an escape sequence.\n\n\nPrivate Functions\n\n\nfun ref  \n_delete\n(): \nNone\n val\n\n\nDelete key.\n\n\nfun ref  \n_down\n(): \nNone\n val\n\n\nDown arrow.\n\n\nfun ref  \n_end\n(): \nNone\n val\n\n\nEnd key.\n\n\nfun ref  \nesc\nclear\n(): \nNone\n val\n\n\nClear the escape state.\n\n\nfun ref  \nesc\nflush\n(): \nNone\n val\n\n\nPass a partial or unrecognised escape sequence to the notifier.\n\n\nfun ref  \nfn\nkey\n(i: \nU8\n val): \nNone\n val\n\n\nFunction key.\n\n\nfun ref  \n_home\n(): \nNone\n val\n\n\nHome key.\n\n\nfun ref  \n_insert\n(): \nNone\n val\n\n\nInsert key.\n\n\nfun ref  \n_keypad\n(): \nNone\n val\n\n\nAn extended key.\n\n\nfun ref  \n_left\n(): \nNone\n val\n\n\nLeft arrow.\n\n\nfun ref  \n_mod\n(): (\nBool\n val , \nBool\n val , \nBool\n val)\n\n\nSet the modifier bools.\n\n\nfun ref  \npage\ndown\n(): \nNone\n val\n\n\nPage down key.\n\n\nfun ref  \npage\nup\n(): \nNone\n val\n\n\nPage up key.\n\n\nfun ref  \n_right\n(): \nNone\n val\n\n\nRight arrow.\n\n\nfun ref  \n_up\n(): \nNone\n val\n\n\nUp arrow.", 
            "title": "actor ANSITerm"
        }, 
        {
            "location": "/term-ANSITerm/#actor-termansiterm", 
            "text": "Default capability :  tag  Handles ANSI escape codes from stdin.", 
            "title": "actor term/ANSITerm"
        }, 
        {
            "location": "/term-ANSITerm/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-ANSITerm/#new-createnotify-ansinotify-iso-source-disposableactor-tag-optional-timers-timers-tag", 
            "text": "", 
            "title": "new create(notify: ANSINotify iso, source: DisposableActor tag, optional timers: Timers tag)"
        }, 
        {
            "location": "/term-ANSITerm/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/term-ANSITerm/#be-applydata-array91u8-val93-iso", 
            "text": "Receives input from stdin.", 
            "title": "be apply(data: Array[U8 val] iso)"
        }, 
        {
            "location": "/term-ANSITerm/#be-dispose", 
            "text": "Stop accepting input, inform the notifier we have closed, and dispose of\nour source.", 
            "title": "be dispose()"
        }, 
        {
            "location": "/term-ANSITerm/#be-promptvalue-string-val", 
            "text": "Pass a prompt along to the notifier.", 
            "title": "be prompt(value: String val)"
        }, 
        {
            "location": "/term-ANSITerm/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/term-ANSITerm/#be-_timeout", 
            "text": "Our timer since receiving an ESC has expired. Send the buffered data as if\nit was not an escape sequence.", 
            "title": "be _timeout()"
        }, 
        {
            "location": "/term-ANSITerm/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-_delete-none-val", 
            "text": "Delete key.", 
            "title": "fun ref  _delete(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-_down-none-val", 
            "text": "Down arrow.", 
            "title": "fun ref  _down(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-_end-none-val", 
            "text": "End key.", 
            "title": "fun ref  _end(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-escclear-none-val", 
            "text": "Clear the escape state.", 
            "title": "fun ref  escclear(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-escflush-none-val", 
            "text": "Pass a partial or unrecognised escape sequence to the notifier.", 
            "title": "fun ref  escflush(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-fnkeyi-u8-val-none-val", 
            "text": "Function key.", 
            "title": "fun ref  fnkey(i: U8 val): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-_home-none-val", 
            "text": "Home key.", 
            "title": "fun ref  _home(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-_insert-none-val", 
            "text": "Insert key.", 
            "title": "fun ref  _insert(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-_keypad-none-val", 
            "text": "An extended key.", 
            "title": "fun ref  _keypad(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-_left-none-val", 
            "text": "Left arrow.", 
            "title": "fun ref  _left(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-_mod-bool-val-bool-val-bool-val", 
            "text": "Set the modifier bools.", 
            "title": "fun ref  _mod(): (Bool val , Bool val , Bool val)"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-pagedown-none-val", 
            "text": "Page down key.", 
            "title": "fun ref  pagedown(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-pageup-none-val", 
            "text": "Page up key.", 
            "title": "fun ref  pageup(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-_right-none-val", 
            "text": "Right arrow.", 
            "title": "fun ref  _right(): None val"
        }, 
        {
            "location": "/term-ANSITerm/#fun-ref-_up-none-val", 
            "text": "Up arrow.", 
            "title": "fun ref  _up(): None val"
        }, 
        {
            "location": "/term-_EscapeCSI/", 
            "text": "primitive term/_EscapeCSI\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_EscapeCSI\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_EscapeCSI\n val): \nBool\n val", 
            "title": "primitive _EscapeCSI"
        }, 
        {
            "location": "/term-_EscapeCSI/#primitive-term_escapecsi", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive term/_EscapeCSI"
        }, 
        {
            "location": "/term-_EscapeCSI/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_EscapeCSI/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/term-_EscapeCSI/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_EscapeCSI/#fun-box-eqthat-_escapecsi-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _EscapeCSI val): Bool val"
        }, 
        {
            "location": "/term-_EscapeCSI/#fun-box-nethat-_escapecsi-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _EscapeCSI val): Bool val"
        }, 
        {
            "location": "/term-_EscapeMod/", 
            "text": "primitive term/_EscapeMod\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_EscapeMod\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_EscapeMod\n val): \nBool\n val", 
            "title": "primitive _EscapeMod"
        }, 
        {
            "location": "/term-_EscapeMod/#primitive-term_escapemod", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive term/_EscapeMod"
        }, 
        {
            "location": "/term-_EscapeMod/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_EscapeMod/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/term-_EscapeMod/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_EscapeMod/#fun-box-eqthat-_escapemod-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _EscapeMod val): Bool val"
        }, 
        {
            "location": "/term-_EscapeMod/#fun-box-nethat-_escapemod-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _EscapeMod val): Bool val"
        }, 
        {
            "location": "/term-_EscapeNone/", 
            "text": "primitive term/_EscapeNone\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_EscapeNone\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_EscapeNone\n val): \nBool\n val", 
            "title": "primitive _EscapeNone"
        }, 
        {
            "location": "/term-_EscapeNone/#primitive-term_escapenone", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive term/_EscapeNone"
        }, 
        {
            "location": "/term-_EscapeNone/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_EscapeNone/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/term-_EscapeNone/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_EscapeNone/#fun-box-eqthat-_escapenone-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _EscapeNone val): Bool val"
        }, 
        {
            "location": "/term-_EscapeNone/#fun-box-nethat-_escapenone-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _EscapeNone val): Bool val"
        }, 
        {
            "location": "/term-_EscapeSS3/", 
            "text": "primitive term/_EscapeSS3\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_EscapeSS3\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_EscapeSS3\n val): \nBool\n val", 
            "title": "primitive _EscapeSS3"
        }, 
        {
            "location": "/term-_EscapeSS3/#primitive-term_escapess3", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive term/_EscapeSS3"
        }, 
        {
            "location": "/term-_EscapeSS3/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_EscapeSS3/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/term-_EscapeSS3/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_EscapeSS3/#fun-box-eqthat-_escapess3-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _EscapeSS3 val): Bool val"
        }, 
        {
            "location": "/term-_EscapeSS3/#fun-box-nethat-_escapess3-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _EscapeSS3 val): Bool val"
        }, 
        {
            "location": "/term-_EscapeStart/", 
            "text": "primitive term/_EscapeStart\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \neq\n(that: \n_EscapeStart\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_EscapeStart\n val): \nBool\n val", 
            "title": "primitive _EscapeStart"
        }, 
        {
            "location": "/term-_EscapeStart/#primitive-term_escapestart", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive term/_EscapeStart"
        }, 
        {
            "location": "/term-_EscapeStart/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_EscapeStart/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/term-_EscapeStart/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_EscapeStart/#fun-box-eqthat-_escapestart-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _EscapeStart val): Bool val"
        }, 
        {
            "location": "/term-_EscapeStart/#fun-box-nethat-_escapestart-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _EscapeStart val): Bool val"
        }, 
        {
            "location": "/term-_EscapeState/", 
            "text": "type term/_EscapeState is ((((\n_EscapeNone\n val | \n_EscapeStart\n val) | \n_EscapeSS3\n val) | \n_EscapeCSI\n val) | \n_EscapeMod\n val)\n\n\nNo doc string provided.", 
            "title": "type _EscapeState"
        }, 
        {
            "location": "/term-_EscapeState/#type-term_escapestate-is-_escapenone-val-_escapestart-val-_escapess3-val-_escapecsi-val-_escapemod-val", 
            "text": "No doc string provided.", 
            "title": "type term/_EscapeState is ((((_EscapeNone val | _EscapeStart val) | _EscapeSS3 val) | _EscapeCSI val) | _EscapeMod val)"
        }, 
        {
            "location": "/term-Readline/", 
            "text": "class term/Readline is \nANSINotify\n ref\n\n\nDefault capability\n: \nref\n\n\nLine editing, history, and tab completion.\n\n\nConstructors\n\n\nnew \ncreate\n(notify: \nReadlineNotify\n iso, out: \nOutStream\n tag, optional path: (\nFilePath\n val | \nNone\n val), optional maxlen: \nUSize\n val)\n\n\nPublic Functions\n\n\nfun ref  \napply\n(term: \nANSITerm\n ref, input: \nU8\n val): \nNone\n val\n\n\nReceives input.\n\n\nfun ref  \nclosed\n(): \nNone\n val\n\n\nNo more input is available.\n\n\nfun ref  \ndelete\n(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nForward delete.\n\n\nfun ref  \ndown\n(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nNext line.\n\n\nfun ref  \nend_key\n(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nEnd of the line.\n\n\nfun ref  \nfn_key\n(i: \nU8\n val, ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \nhome\n(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nBeginning of the line.\n\n\nfun ref  \ninsert\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \nleft\n(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nMove left.\n\n\nfun ref  \npage_down\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \npage_up\n(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nfun ref  \nprompt\n(term: \nANSITerm\n ref, value: \nString\n val): \nNone\n val\n\n\nSet a new prompt, unblock, and handle the pending queue.\n\n\nfun ref  \nright\n(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nMove right.\n\n\nfun ref  \nup\n(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nPrevious line.\n\n\nPrivate Functions\n\n\nfun ref  \nadd\nhistory\n(line: \nString\n val): \nNone\n val\n\n\nAdd a line to the history, trimming an earlier line if necessary.\n\n\nfun ref  \n_backspace\n(): \nNone\n val\n\n\nBackward delete.\n\n\nfun ref  \n_clear\n(): \nNone\n val\n\n\nClear the screen.\n\n\nfun ref  \ndelete\nprev_word\n(): \nNone\n val\n\n\nDelete the previous word.\n\n\nfun ref  \n_dispatch\n(term: \nANSITerm\n tag): \nNone\n val\n\n\nSend a finished line to the notifier.\n\n\nfun tag  \nfulfill\nprompt\n(term: \nANSITerm\n tag, value: \nString\n val): \nString\n val\n\n\nTell the terminal, which will call \nthis.prompt(value)\n.\n\n\nfun ref  \nhandle\nline\n(term: \nANSITerm\n tag, line: \nString\n val): \nNone\n val\n\n\nDispatch a single line.\n\n\nfun ref  \nload\nhistory\n(): \nNone\n val\n\n\nLoad the history from a file.\n\n\nfun ref  \nrefresh\nline\n(): \nNone\n val\n\n\nRefresh the line on screen.\n\n\nfun tag  \nreject\nprompt\n(term: \nANSITerm\n tag): \nString\n val ?\n\n\nTell the terminal we've closed. Raise an error to reject any remaining\npromise chain.\n\n\nfun box  \nsave\nhistory\n(): \nNone\n val\n\n\nWrite the history back to a file.\n\n\nfun ref  \n_swap\n(): \nNone\n val\n\n\nSwap the previous character with the current one.\n\n\nfun ref  \n_tab\n(): \nNone\n val\n\n\nTab completion.\n\n\nTODO: Improve this.", 
            "title": "class Readline"
        }, 
        {
            "location": "/term-Readline/#class-termreadline-is-ansinotify-ref", 
            "text": "Default capability :  ref  Line editing, history, and tab completion.", 
            "title": "class term/Readline is ANSINotify ref"
        }, 
        {
            "location": "/term-Readline/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-Readline/#new-createnotify-readlinenotify-iso-out-outstream-tag-optional-path-filepath-val-none-val-optional-maxlen-usize-val", 
            "text": "", 
            "title": "new create(notify: ReadlineNotify iso, out: OutStream tag, optional path: (FilePath val | None val), optional maxlen: USize val)"
        }, 
        {
            "location": "/term-Readline/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-Readline/#fun-ref-applyterm-ansiterm-ref-input-u8-val-none-val", 
            "text": "Receives input.", 
            "title": "fun ref  apply(term: ANSITerm ref, input: U8 val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-closed-none-val", 
            "text": "No more input is available.", 
            "title": "fun ref  closed(): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-deleteoptional-ctrl-bool-val-optional-alt-bool-val-optional-shift-bool-val-none-val", 
            "text": "Forward delete.", 
            "title": "fun ref  delete(optional ctrl: Bool val, optional alt: Bool val, optional shift: Bool val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-downoptional-ctrl-bool-val-optional-alt-bool-val-optional-shift-bool-val-none-val", 
            "text": "Next line.", 
            "title": "fun ref  down(optional ctrl: Bool val, optional alt: Bool val, optional shift: Bool val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-end_keyoptional-ctrl-bool-val-optional-alt-bool-val-optional-shift-bool-val-none-val", 
            "text": "End of the line.", 
            "title": "fun ref  end_key(optional ctrl: Bool val, optional alt: Bool val, optional shift: Bool val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-fn_keyi-u8-val-ctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  fn_key(i: U8 val, ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-homeoptional-ctrl-bool-val-optional-alt-bool-val-optional-shift-bool-val-none-val", 
            "text": "Beginning of the line.", 
            "title": "fun ref  home(optional ctrl: Bool val, optional alt: Bool val, optional shift: Bool val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-insertctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  insert(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-leftoptional-ctrl-bool-val-optional-alt-bool-val-optional-shift-bool-val-none-val", 
            "text": "Move left.", 
            "title": "fun ref  left(optional ctrl: Bool val, optional alt: Bool val, optional shift: Bool val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-page_downctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  page_down(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-page_upctrl-bool-val-alt-bool-val-shift-bool-val-none-val", 
            "text": "", 
            "title": "fun ref  page_up(ctrl: Bool val, alt: Bool val, shift: Bool val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-promptterm-ansiterm-ref-value-string-val-none-val", 
            "text": "Set a new prompt, unblock, and handle the pending queue.", 
            "title": "fun ref  prompt(term: ANSITerm ref, value: String val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-rightoptional-ctrl-bool-val-optional-alt-bool-val-optional-shift-bool-val-none-val", 
            "text": "Move right.", 
            "title": "fun ref  right(optional ctrl: Bool val, optional alt: Bool val, optional shift: Bool val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-upoptional-ctrl-bool-val-optional-alt-bool-val-optional-shift-bool-val-none-val", 
            "text": "Previous line.", 
            "title": "fun ref  up(optional ctrl: Bool val, optional alt: Bool val, optional shift: Bool val): None val"
        }, 
        {
            "location": "/term-Readline/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/term-Readline/#fun-ref-addhistoryline-string-val-none-val", 
            "text": "Add a line to the history, trimming an earlier line if necessary.", 
            "title": "fun ref  addhistory(line: String val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-_backspace-none-val", 
            "text": "Backward delete.", 
            "title": "fun ref  _backspace(): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-_clear-none-val", 
            "text": "Clear the screen.", 
            "title": "fun ref  _clear(): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-deleteprev_word-none-val", 
            "text": "Delete the previous word.", 
            "title": "fun ref  deleteprev_word(): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-_dispatchterm-ansiterm-tag-none-val", 
            "text": "Send a finished line to the notifier.", 
            "title": "fun ref  _dispatch(term: ANSITerm tag): None val"
        }, 
        {
            "location": "/term-Readline/#fun-tag-fulfillpromptterm-ansiterm-tag-value-string-val-string-val", 
            "text": "Tell the terminal, which will call  this.prompt(value) .", 
            "title": "fun tag  fulfillprompt(term: ANSITerm tag, value: String val): String val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-handlelineterm-ansiterm-tag-line-string-val-none-val", 
            "text": "Dispatch a single line.", 
            "title": "fun ref  handleline(term: ANSITerm tag, line: String val): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-loadhistory-none-val", 
            "text": "Load the history from a file.", 
            "title": "fun ref  loadhistory(): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-refreshline-none-val", 
            "text": "Refresh the line on screen.", 
            "title": "fun ref  refreshline(): None val"
        }, 
        {
            "location": "/term-Readline/#fun-tag-rejectpromptterm-ansiterm-tag-string-val", 
            "text": "Tell the terminal we've closed. Raise an error to reject any remaining\npromise chain.", 
            "title": "fun tag  rejectprompt(term: ANSITerm tag): String val ?"
        }, 
        {
            "location": "/term-Readline/#fun-box-savehistory-none-val", 
            "text": "Write the history back to a file.", 
            "title": "fun box  savehistory(): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-_swap-none-val", 
            "text": "Swap the previous character with the current one.", 
            "title": "fun ref  _swap(): None val"
        }, 
        {
            "location": "/term-Readline/#fun-ref-_tab-none-val", 
            "text": "Tab completion.  TODO: Improve this.", 
            "title": "fun ref  _tab(): None val"
        }, 
        {
            "location": "/term-ReadlineNotify/", 
            "text": "interface term/ReadlineNotify\n\n\nDefault capability\n: \nref\n\n\nNotifier for readline.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(line: \nString\n val, prompt: \nPromise\n[\nString\n val] tag): \nNone\n val\n\n\nReceives finished lines. The returned string is the next prompt. This may\nbe called with an empty line to get the current prompt. If this raises an\nerror, readline will stop handling input.\n\n\nfun ref  \ntab\n(line: \nString\n val): \nSeq\n[\nString\n val] box\n\n\nReturn tab completion possibilities.", 
            "title": "interface ReadlineNotify"
        }, 
        {
            "location": "/term-ReadlineNotify/#interface-termreadlinenotify", 
            "text": "Default capability :  ref  Notifier for readline.", 
            "title": "interface term/ReadlineNotify"
        }, 
        {
            "location": "/term-ReadlineNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-ReadlineNotify/#fun-ref-applyline-string-val-prompt-promise91string-val93-tag-none-val", 
            "text": "Receives finished lines. The returned string is the next prompt. This may\nbe called with an empty line to get the current prompt. If this raises an\nerror, readline will stop handling input.", 
            "title": "fun ref  apply(line: String val, prompt: Promise[String val] tag): None val"
        }, 
        {
            "location": "/term-ReadlineNotify/#fun-ref-tabline-string-val-seq91string-val93-box", 
            "text": "Return tab completion possibilities.", 
            "title": "fun ref  tab(line: String val): Seq[String val] box"
        }, 
        {
            "location": "/time--index/", 
            "text": "No package doc string provided for time.\n\n\nEntities\n\n\n\n\ntype _Clock\n\n\nprimitive _ClockMonotonic\n\n\nprimitive _ClockRealtime\n\n\nclass Date\n\n\nprimitive Time\n\n\nclass Timer\n\n\ninterface TimerNotify\n\n\nactor Timers\n\n\nclass _TimingWheel", 
            "title": "Package"
        }, 
        {
            "location": "/time--index/#entities", 
            "text": "type _Clock  primitive _ClockMonotonic  primitive _ClockRealtime  class Date  primitive Time  class Timer  interface TimerNotify  actor Timers  class _TimingWheel", 
            "title": "Entities"
        }, 
        {
            "location": "/time-_Clock/", 
            "text": "type time/_Clock is (\n_ClockRealtime\n val | \n_ClockMonotonic\n val)\n\n\nNo doc string provided.", 
            "title": "type _Clock"
        }, 
        {
            "location": "/time-_Clock/#type-time_clock-is-_clockrealtime-val-_clockmonotonic-val", 
            "text": "No doc string provided.", 
            "title": "type time/_Clock is (_ClockRealtime val | _ClockMonotonic val)"
        }, 
        {
            "location": "/time-_ClockMonotonic/", 
            "text": "primitive time/_ClockMonotonic\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(): \nU32\n val\n\n\nfun box  \neq\n(that: \n_ClockMonotonic\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_ClockMonotonic\n val): \nBool\n val", 
            "title": "primitive _ClockMonotonic"
        }, 
        {
            "location": "/time-_ClockMonotonic/#primitive-time_clockmonotonic", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive time/_ClockMonotonic"
        }, 
        {
            "location": "/time-_ClockMonotonic/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-_ClockMonotonic/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/time-_ClockMonotonic/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-_ClockMonotonic/#fun-box-apply-u32-val", 
            "text": "", 
            "title": "fun box  apply(): U32 val"
        }, 
        {
            "location": "/time-_ClockMonotonic/#fun-box-eqthat-_clockmonotonic-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _ClockMonotonic val): Bool val"
        }, 
        {
            "location": "/time-_ClockMonotonic/#fun-box-nethat-_clockmonotonic-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _ClockMonotonic val): Bool val"
        }, 
        {
            "location": "/time-_ClockRealtime/", 
            "text": "primitive time/_ClockRealtime\n\n\nDefault capability\n: \nval\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \napply\n(): \nU32\n val\n\n\nfun box  \neq\n(that: \n_ClockRealtime\n val): \nBool\n val\n\n\nfun box  \nne\n(that: \n_ClockRealtime\n val): \nBool\n val", 
            "title": "primitive _ClockRealtime"
        }, 
        {
            "location": "/time-_ClockRealtime/#primitive-time_clockrealtime", 
            "text": "Default capability :  val  No doc string provided.", 
            "title": "primitive time/_ClockRealtime"
        }, 
        {
            "location": "/time-_ClockRealtime/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-_ClockRealtime/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/time-_ClockRealtime/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-_ClockRealtime/#fun-box-apply-u32-val", 
            "text": "", 
            "title": "fun box  apply(): U32 val"
        }, 
        {
            "location": "/time-_ClockRealtime/#fun-box-eqthat-_clockrealtime-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: _ClockRealtime val): Bool val"
        }, 
        {
            "location": "/time-_ClockRealtime/#fun-box-nethat-_clockrealtime-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: _ClockRealtime val): Bool val"
        }, 
        {
            "location": "/time-Date/", 
            "text": "class time/Date\n\n\nDefault capability\n: \nref\n\n\nRepresents a proleptic Gregorian date and time, without specifying a\ntime zone. The day of month, month, day of week, and day of year are all\nindexed from 1, i.e. January is 1, Monday is 1.\n\n\nPublic fields\n\n\n\n\nvar day_of_month: \nI32\n val\n\n\nvar day_of_week: \nI32\n val\n\n\nvar day_of_year: \nI32\n val\n\n\nvar hour: \nI32\n val\n\n\nvar min: \nI32\n val\n\n\nvar month: \nI32\n val\n\n\nvar nsec: \nI32\n val\n\n\nvar sec: \nI32\n val\n\n\nvar year: \nI32\n val\n\n\n\n\nConstructors\n\n\nnew \ncreate\n(optional seconds: \nI64\n val, optional nanoseconds: \nI64\n val)\n\n\nPublic Functions\n\n\nfun box  \nformat\n(fmt: \nString\n val): \nString\n val\n\n\nFormat the time as for strftime.\n\n\nfun ref  \nnormal\n(): \nDate\n ref^\n\n\nNormalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.\n\n\nfun box  \ntime\n(): \nI64\n val\n\n\nReturn a POSIX time. Treats the date as UTC.", 
            "title": "class Date"
        }, 
        {
            "location": "/time-Date/#class-timedate", 
            "text": "Default capability :  ref  Represents a proleptic Gregorian date and time, without specifying a\ntime zone. The day of month, month, day of week, and day of year are all\nindexed from 1, i.e. January is 1, Monday is 1.", 
            "title": "class time/Date"
        }, 
        {
            "location": "/time-Date/#public-fields", 
            "text": "var day_of_month:  I32  val  var day_of_week:  I32  val  var day_of_year:  I32  val  var hour:  I32  val  var min:  I32  val  var month:  I32  val  var nsec:  I32  val  var sec:  I32  val  var year:  I32  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/time-Date/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-Date/#new-createoptional-seconds-i64-val-optional-nanoseconds-i64-val", 
            "text": "", 
            "title": "new create(optional seconds: I64 val, optional nanoseconds: I64 val)"
        }, 
        {
            "location": "/time-Date/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-Date/#fun-box-formatfmt-string-val-string-val", 
            "text": "Format the time as for strftime.", 
            "title": "fun box  format(fmt: String val): String val"
        }, 
        {
            "location": "/time-Date/#fun-ref-normal-date-ref", 
            "text": "Normalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.", 
            "title": "fun ref  normal(): Date ref^"
        }, 
        {
            "location": "/time-Date/#fun-box-time-i64-val", 
            "text": "Return a POSIX time. Treats the date as UTC.", 
            "title": "fun box  time(): I64 val"
        }, 
        {
            "location": "/time-Time/", 
            "text": "primitive time/Time\n\n\nDefault capability\n: \nval\n\n\nA collection of ways to fetch the current time.\n\n\nConstructors\n\n\nnew \ncreate\n()\n\n\nPublic Functions\n\n\nfun box  \ncycles\n(): \nU64\n val\n\n\nProcessor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.\n\n\nfun box  \neq\n(that: \nTime\n val): \nBool\n val\n\n\nfun box  \nmicros\n(): \nU64\n val\n\n\nMonotonic unadjusted microseconds.\n\n\nfun box  \nmillis\n(): \nU64\n val\n\n\nMonotonic unadjusted milliseconds.\n\n\nfun box  \nnanos\n(): \nU64\n val\n\n\nMonotonic unadjusted nanoseconds.\n\n\nfun box  \nne\n(that: \nTime\n val): \nBool\n val\n\n\nfun box  \nnow\n(): (\nI64\n val , \nI64\n val)\n\n\nThe wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)\n\n\nfun box  \nperf_begin\n(): \nU64\n val\n\n\nGet a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.\n\n\nfun box  \nperf_end\n(): \nU64\n val\n\n\nGet a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.\n\n\nfun box  \nseconds\n(): \nI64\n val\n\n\nThe wall-clock adjusted system time.\n\n\nfun box  \nwall_to_nanos\n(wall: (\nI64\n val , \nI64\n val)): \nU64\n val\n\n\nConverts a wall-clock adjusted system time to monotonic unadjusted\nnanoseconds.\n\n\nPrivate Functions\n\n\nfun box  \nclock\ngettime\n(clock: (\n_ClockRealtime\n val | \n_ClockMonotonic\n val)): (\nI64\n val , \nI64\n val)\n\n\nReturn a clock time on linux and freebsd.\n\n\nfun box  \nquery\nperformance_counter\n(): (\nU64\n val , \nU64\n val)\n\n\nReturn QPC and QPF.", 
            "title": "primitive Time"
        }, 
        {
            "location": "/time-Time/#primitive-timetime", 
            "text": "Default capability :  val  A collection of ways to fetch the current time.", 
            "title": "primitive time/Time"
        }, 
        {
            "location": "/time-Time/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-Time/#new-create", 
            "text": "", 
            "title": "new create()"
        }, 
        {
            "location": "/time-Time/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-Time/#fun-box-cycles-u64-val", 
            "text": "Processor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.", 
            "title": "fun box  cycles(): U64 val"
        }, 
        {
            "location": "/time-Time/#fun-box-eqthat-time-val-bool-val", 
            "text": "", 
            "title": "fun box  eq(that: Time val): Bool val"
        }, 
        {
            "location": "/time-Time/#fun-box-micros-u64-val", 
            "text": "Monotonic unadjusted microseconds.", 
            "title": "fun box  micros(): U64 val"
        }, 
        {
            "location": "/time-Time/#fun-box-millis-u64-val", 
            "text": "Monotonic unadjusted milliseconds.", 
            "title": "fun box  millis(): U64 val"
        }, 
        {
            "location": "/time-Time/#fun-box-nanos-u64-val", 
            "text": "Monotonic unadjusted nanoseconds.", 
            "title": "fun box  nanos(): U64 val"
        }, 
        {
            "location": "/time-Time/#fun-box-nethat-time-val-bool-val", 
            "text": "", 
            "title": "fun box  ne(that: Time val): Bool val"
        }, 
        {
            "location": "/time-Time/#fun-box-now-i64-val-i64-val", 
            "text": "The wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)", 
            "title": "fun box  now(): (I64 val , I64 val)"
        }, 
        {
            "location": "/time-Time/#fun-box-perf_begin-u64-val", 
            "text": "Get a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.", 
            "title": "fun box  perf_begin(): U64 val"
        }, 
        {
            "location": "/time-Time/#fun-box-perf_end-u64-val", 
            "text": "Get a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.", 
            "title": "fun box  perf_end(): U64 val"
        }, 
        {
            "location": "/time-Time/#fun-box-seconds-i64-val", 
            "text": "The wall-clock adjusted system time.", 
            "title": "fun box  seconds(): I64 val"
        }, 
        {
            "location": "/time-Time/#fun-box-wall_to_nanoswall-i64-val-i64-val-u64-val", 
            "text": "Converts a wall-clock adjusted system time to monotonic unadjusted\nnanoseconds.", 
            "title": "fun box  wall_to_nanos(wall: (I64 val , I64 val)): U64 val"
        }, 
        {
            "location": "/time-Time/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/time-Time/#fun-box-clockgettimeclock-_clockrealtime-val-_clockmonotonic-val-i64-val-i64-val", 
            "text": "Return a clock time on linux and freebsd.", 
            "title": "fun box  clockgettime(clock: (_ClockRealtime val | _ClockMonotonic val)): (I64 val , I64 val)"
        }, 
        {
            "location": "/time-Time/#fun-box-queryperformance_counter-u64-val-u64-val", 
            "text": "Return QPC and QPF.", 
            "title": "fun box  queryperformance_counter(): (U64 val , U64 val)"
        }, 
        {
            "location": "/time-Timer/", 
            "text": "class time/Timer\n\n\nDefault capability\n: \nref\n\n\nA timer.\n\n\nConstructors\n\n\nnew \nabs\n(notify: \nTimerNotify\n ref, expiration: (\nI64\n val , \nI64\n val), optional interval: \nU64\n val)\n\n\nCreates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.\n\n\nnew \ncreate\n(notify: \nTimerNotify\n iso, expiration: \nU64\n val, optional interval: \nU64\n val)\n\n\nCreate a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.\n\n\nPrivate Functions\n\n\nfun ref  \n_cancel\n(): \nNone\n val\n\n\nRemove the timer from any list.\n\n\nfun ref  \n_fire\n(current: \nU64\n val): \nBool\n val\n\n\nA timer is fired if its expiration time is in the past. The notifier is\ncalled with a count based on the elapsed time since expiration and the\ntimer interval. The expiration time is set to the next expiration. Returns\ntrue if the timer should be rescheduled, false otherwise.\n\n\nfun ref  \nget\nnode\n(): \nListNode\n[\nTimer\n ref] ref\n\n\nReturns the list node pointing to the timer. Used to schedule the timer in\na queue.\n\n\nfun box  \n_next\n(): \nU64\n val\n\n\nReturns the next expiration time.\n\n\nfun ref  \n_slop\n(bits: \nUSize\n val): \nNone\n val\n\n\nApply slop bits to the expiration time and interval. This reduces the\nprecision by the given number of bits, effectively quantizing time.", 
            "title": "class Timer"
        }, 
        {
            "location": "/time-Timer/#class-timetimer", 
            "text": "Default capability :  ref  A timer.", 
            "title": "class time/Timer"
        }, 
        {
            "location": "/time-Timer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-Timer/#new-absnotify-timernotify-ref-expiration-i64-val-i64-val-optional-interval-u64-val", 
            "text": "Creates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.", 
            "title": "new abs(notify: TimerNotify ref, expiration: (I64 val , I64 val), optional interval: U64 val)"
        }, 
        {
            "location": "/time-Timer/#new-createnotify-timernotify-iso-expiration-u64-val-optional-interval-u64-val", 
            "text": "Create a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.", 
            "title": "new create(notify: TimerNotify iso, expiration: U64 val, optional interval: U64 val)"
        }, 
        {
            "location": "/time-Timer/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/time-Timer/#fun-ref-_cancel-none-val", 
            "text": "Remove the timer from any list.", 
            "title": "fun ref  _cancel(): None val"
        }, 
        {
            "location": "/time-Timer/#fun-ref-_firecurrent-u64-val-bool-val", 
            "text": "A timer is fired if its expiration time is in the past. The notifier is\ncalled with a count based on the elapsed time since expiration and the\ntimer interval. The expiration time is set to the next expiration. Returns\ntrue if the timer should be rescheduled, false otherwise.", 
            "title": "fun ref  _fire(current: U64 val): Bool val"
        }, 
        {
            "location": "/time-Timer/#fun-ref-getnode-listnode91timer-ref93-ref", 
            "text": "Returns the list node pointing to the timer. Used to schedule the timer in\na queue.", 
            "title": "fun ref  getnode(): ListNode[Timer ref] ref"
        }, 
        {
            "location": "/time-Timer/#fun-box-_next-u64-val", 
            "text": "Returns the next expiration time.", 
            "title": "fun box  _next(): U64 val"
        }, 
        {
            "location": "/time-Timer/#fun-ref-_slopbits-usize-val-none-val", 
            "text": "Apply slop bits to the expiration time and interval. This reduces the\nprecision by the given number of bits, effectively quantizing time.", 
            "title": "fun ref  _slop(bits: USize val): None val"
        }, 
        {
            "location": "/time-TimerNotify/", 
            "text": "interface time/TimerNotify\n\n\nDefault capability\n: \nref\n\n\nNotifications for timer.\n\n\nPublic Functions\n\n\nfun ref  \napply\n(timer: \nTimer\n ref, count: \nU64\n val): \nBool\n val\n\n\nCalled with the the number of times the timer has fired since this was last\ncalled. Return true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).\n\n\nfun ref  \ncancel\n(timer: \nTimer\n ref): \nNone\n val\n\n\nCalled if the timer is cancelled. This is also called if the notifier\nreturns false.", 
            "title": "interface TimerNotify"
        }, 
        {
            "location": "/time-TimerNotify/#interface-timetimernotify", 
            "text": "Default capability :  ref  Notifications for timer.", 
            "title": "interface time/TimerNotify"
        }, 
        {
            "location": "/time-TimerNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-TimerNotify/#fun-ref-applytimer-timer-ref-count-u64-val-bool-val", 
            "text": "Called with the the number of times the timer has fired since this was last\ncalled. Return true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).", 
            "title": "fun ref  apply(timer: Timer ref, count: U64 val): Bool val"
        }, 
        {
            "location": "/time-TimerNotify/#fun-ref-canceltimer-timer-ref-none-val", 
            "text": "Called if the timer is cancelled. This is also called if the notifier\nreturns false.", 
            "title": "fun ref  cancel(timer: Timer ref): None val"
        }, 
        {
            "location": "/time-Timers/", 
            "text": "actor time/Timers\n\n\nDefault capability\n: \ntag\n\n\nA hierarchical set of timing wheels.\n\n\nConstructors\n\n\nnew \ncreate\n(optional slop: \nUSize\n val)\n\n\nPublic Behaviours\n\n\nbe \napply\n(timer: \nTimer\n iso)\n\n\nSets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.\n\n\nbe \ncancel\n(timer: \nTimer\n tag)\n\n\nCancels a timer.\n\n\nbe \ndispose\n()\n\n\nDipose of this set of timing wheels.\n\n\nPrivate Behaviours\n\n\nbe \nevent\nnotify\n(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nWhen the event fires, advance the timing wheels.\n\n\nPrivate Functions\n\n\nfun ref  \n_advance\n(): \nNone\n val\n\n\nUpdate the current time, process all the timing wheels, and set the event\nfor the next time we need to advance.\n\n\nfun tag  \n_bits\n(): \nUSize\n val\n\n\nfun tag  \nexpiration\nmax\n(): \nU64\n val\n\n\nGet the maximum time the timing wheels cover. Anything beyond this is\nscheduled on the last timing wheel.\n\n\nfun ref  \n_fire\n(timer: \nTimer\n ref): \nNone\n val\n\n\nFire a timer if necessary, then schedule it on the correct timing wheel\nbased on how long it is until it expires.\n\n\nfun ref  \nget\nwheel\n(rem: \nU64\n val): \n_TimingWheel\n ref ?\n\n\nGet the hierarchical timing wheel for the given time until expiration.\n\n\nfun box  \n_next\n(): \nU64\n val\n\n\nReturn the next time at which the timing wheels should be advanced. This is\nadjusted for slop, so it yields nanoseconds. If no events are pending, this\nreturns -1.\n\n\nfun ref  \nset\ntime\n(): \nU64\n val\n\n\nSet the current time with precision reduced by the slop bits. Return the\nelapsed time.\n\n\nfun tag  \n_wheels\n(): \nUSize\n val", 
            "title": "actor Timers"
        }, 
        {
            "location": "/time-Timers/#actor-timetimers", 
            "text": "Default capability :  tag  A hierarchical set of timing wheels.", 
            "title": "actor time/Timers"
        }, 
        {
            "location": "/time-Timers/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-Timers/#new-createoptional-slop-usize-val", 
            "text": "", 
            "title": "new create(optional slop: USize val)"
        }, 
        {
            "location": "/time-Timers/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/time-Timers/#be-applytimer-timer-iso", 
            "text": "Sets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.", 
            "title": "be apply(timer: Timer iso)"
        }, 
        {
            "location": "/time-Timers/#be-canceltimer-timer-tag", 
            "text": "Cancels a timer.", 
            "title": "be cancel(timer: Timer tag)"
        }, 
        {
            "location": "/time-Timers/#be-dispose", 
            "text": "Dipose of this set of timing wheels.", 
            "title": "be dispose()"
        }, 
        {
            "location": "/time-Timers/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/time-Timers/#be-eventnotifyevent-pointer91asioevent-val93-tag-flags-u32-val-arg-u32-val", 
            "text": "When the event fires, advance the timing wheels.", 
            "title": "be eventnotify(event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)"
        }, 
        {
            "location": "/time-Timers/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/time-Timers/#fun-ref-_advance-none-val", 
            "text": "Update the current time, process all the timing wheels, and set the event\nfor the next time we need to advance.", 
            "title": "fun ref  _advance(): None val"
        }, 
        {
            "location": "/time-Timers/#fun-tag-_bits-usize-val", 
            "text": "", 
            "title": "fun tag  _bits(): USize val"
        }, 
        {
            "location": "/time-Timers/#fun-tag-expirationmax-u64-val", 
            "text": "Get the maximum time the timing wheels cover. Anything beyond this is\nscheduled on the last timing wheel.", 
            "title": "fun tag  expirationmax(): U64 val"
        }, 
        {
            "location": "/time-Timers/#fun-ref-_firetimer-timer-ref-none-val", 
            "text": "Fire a timer if necessary, then schedule it on the correct timing wheel\nbased on how long it is until it expires.", 
            "title": "fun ref  _fire(timer: Timer ref): None val"
        }, 
        {
            "location": "/time-Timers/#fun-ref-getwheelrem-u64-val-_timingwheel-ref", 
            "text": "Get the hierarchical timing wheel for the given time until expiration.", 
            "title": "fun ref  getwheel(rem: U64 val): _TimingWheel ref ?"
        }, 
        {
            "location": "/time-Timers/#fun-box-_next-u64-val", 
            "text": "Return the next time at which the timing wheels should be advanced. This is\nadjusted for slop, so it yields nanoseconds. If no events are pending, this\nreturns -1.", 
            "title": "fun box  _next(): U64 val"
        }, 
        {
            "location": "/time-Timers/#fun-ref-settime-u64-val", 
            "text": "Set the current time with precision reduced by the slop bits. Return the\nelapsed time.", 
            "title": "fun ref  settime(): U64 val"
        }, 
        {
            "location": "/time-Timers/#fun-tag-_wheels-usize-val", 
            "text": "", 
            "title": "fun tag  _wheels(): USize val"
        }, 
        {
            "location": "/time-_TimingWheel/", 
            "text": "class time/_TimingWheel\n\n\nDefault capability\n: \nref\n\n\nA timing wheel in a hierarchical set of timing wheels. Each wheel covers 6\nbits of precision.\n\n\nConstructors\n\n\nnew \ncreate\n(index: \nUSize\n val)\n\n\nPublic Functions\n\n\nfun ref  \nadvance\n(list: \nList\n[\nTimer\n ref] ref, current: \nU64\n val, elapsed: \nU64\n val): \nBool\n val\n\n\nRemove pending timers from this timing wheel and put them on the pending\nlist supplied. Needs the current time and the elapsed time since the\nprevious advance. Returns true if the next timing wheel in the hierarchy\nshould be advanced.\n\n\nfun ref  \nclear\n(): \nNone\n val\n\n\nCancels all pending timers.\n\n\nfun box  \nnext\n(current: \nU64\n val): \nU64\n val\n\n\nGiven a current time, return the next time at which this timing wheel\nshould be advanced. Returns -1 if no timers are on this timing wheel.\n\n\nfun ref  \nschedule\n(timer: \nTimer\n ref): \nNone\n val\n\n\nSchedule a timer on this wheel. Mark the bit indicating that the given slot\nhas timers in its list.\n\n\nPrivate Functions\n\n\nfun tag  \n_bits\n(): \nUSize\n val\n\n\nfun tag  \n_mask\n(): \nU64\n val\n\n\nfun tag  \n_max\n(): \nUSize\n val\n\n\nfun box  \n_slot\n(time: \nU64\n val): \nU64\n val\n\n\nReturn the slot for a given time.", 
            "title": "class _TimingWheel"
        }, 
        {
            "location": "/time-_TimingWheel/#class-time_timingwheel", 
            "text": "Default capability :  ref  A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6\nbits of precision.", 
            "title": "class time/_TimingWheel"
        }, 
        {
            "location": "/time-_TimingWheel/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-_TimingWheel/#new-createindex-usize-val", 
            "text": "", 
            "title": "new create(index: USize val)"
        }, 
        {
            "location": "/time-_TimingWheel/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-_TimingWheel/#fun-ref-advancelist-list91timer-ref93-ref-current-u64-val-elapsed-u64-val-bool-val", 
            "text": "Remove pending timers from this timing wheel and put them on the pending\nlist supplied. Needs the current time and the elapsed time since the\nprevious advance. Returns true if the next timing wheel in the hierarchy\nshould be advanced.", 
            "title": "fun ref  advance(list: List[Timer ref] ref, current: U64 val, elapsed: U64 val): Bool val"
        }, 
        {
            "location": "/time-_TimingWheel/#fun-ref-clear-none-val", 
            "text": "Cancels all pending timers.", 
            "title": "fun ref  clear(): None val"
        }, 
        {
            "location": "/time-_TimingWheel/#fun-box-nextcurrent-u64-val-u64-val", 
            "text": "Given a current time, return the next time at which this timing wheel\nshould be advanced. Returns -1 if no timers are on this timing wheel.", 
            "title": "fun box  next(current: U64 val): U64 val"
        }, 
        {
            "location": "/time-_TimingWheel/#fun-ref-scheduletimer-timer-ref-none-val", 
            "text": "Schedule a timer on this wheel. Mark the bit indicating that the given slot\nhas timers in its list.", 
            "title": "fun ref  schedule(timer: Timer ref): None val"
        }, 
        {
            "location": "/time-_TimingWheel/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/time-_TimingWheel/#fun-tag-_bits-usize-val", 
            "text": "", 
            "title": "fun tag  _bits(): USize val"
        }, 
        {
            "location": "/time-_TimingWheel/#fun-tag-_mask-u64-val", 
            "text": "", 
            "title": "fun tag  _mask(): U64 val"
        }, 
        {
            "location": "/time-_TimingWheel/#fun-tag-_max-usize-val", 
            "text": "", 
            "title": "fun tag  _max(): USize val"
        }, 
        {
            "location": "/time-_TimingWheel/#fun-box-_slottime-u64-val-u64-val", 
            "text": "Return the slot for a given time.", 
            "title": "fun box  _slot(time: U64 val): U64 val"
        }
    ]
}